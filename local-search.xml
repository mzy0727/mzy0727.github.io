<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>基于epoll的web服务器(C语言版本)</title>
    <link href="/2023/10/28/%E5%9F%BA%E4%BA%8Eepoll%E7%9A%84web%E6%9C%8D%E5%8A%A1%E5%99%A8-C%E8%AF%AD%E8%A8%80%E7%89%88%E6%9C%AC/"/>
    <url>/2023/10/28/%E5%9F%BA%E4%BA%8Eepoll%E7%9A%84web%E6%9C%8D%E5%8A%A1%E5%99%A8-C%E8%AF%AD%E8%A8%80%E7%89%88%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<p>记录学习使用epoll实现web服务器</p><span id="more"></span><h2 id="基于epoll的web服务器-C语言版本"><a href="#基于epoll的web服务器-C语言版本" class="headerlink" title="基于epoll的web服务器(C语言版本)"></a>基于epoll的web服务器(C语言版本)</h2><h3 id="1-初始化监听套接字"><a href="#1-初始化监听套接字" class="headerlink" title="1. 初始化监听套接字"></a>1. 初始化监听套接字</h3><p>包括创建监听套接字，设置端口复用，绑定，设置监听等步骤</p><h4 id="1-1-创建监听套接字（socket函数）"><a href="#1-1-创建监听套接字（socket函数）" class="headerlink" title="1.1 创建监听套接字（socket函数）"></a>1.1 创建监听套接字（socket函数）</h4><p><code>socket()</code>打开一个网络通讯端口，如果成功的话，就像<code>open()</code>一样返回一个文件描述符，应用程序可以像读写文件一样用<code>read/write</code>在网络上收发数据，如果<code>socket()</code>调用出错则返回<code>-1</code>。对于<code>IPv4</code>，<code>domain</code>参数指定为<code>AF_INET</code>。对于<code>TCP</code>协议，<code>type</code>参数指定为<code>SOCK_STREAM</code>，表示面向流的传输协议。如果是<code>UDP</code>协议，则<code>type</code>参数指定为<code>SOCK_DGRAM</code>，表示面向数据报的传输协议。<code>protocol</code>参数的介绍从略，指定为0即可。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs txt">#include &lt;sys/types.h&gt; /* See NOTES */<br>#include &lt;sys/socket.h&gt;<br>int socket(int domain, int type, int protocol);<br>domain:<br>AF_INET 这是大多数用来产生socket的协议，使用TCP或UDP来传输，用IPv4的地址<br>AF_INET6 与上面类似，不过是来用IPv6的地址<br>AF_UNIX 本地协议，使用在Unix和Linux系统上，一般都是当客户端和服务器在同一台及其上的时候使用<br>type:<br>SOCK_STREAM 这个协议是按照顺序的、可靠的、数据完整的基于字节流的连接。这是一个使用最多的socket类型，这个socket是使用TCP来进行传输。<br>SOCK_DGRAM 这个协议是无连接的、固定长度的传输调用。该协议是不可靠的，使用UDP来进行它的连接。<br>SOCK_SEQPACKET该协议是双线路的、可靠的连接，发送固定长度的数据包进行传输。必须把这个包完整的接受才能进行读取。<br>SOCK_RAW socket类型提供单一的网络访问，这个socket类型使用ICMP公共协议。（ping、traceroute使用该协议）<br>SOCK_RDM 这个类型是很少使用的，在大部分的操作系统上没有实现，它是提供给数据链路层使用，不保证数据包的顺序<br>protocol:<br>传0 表示使用默认协议。<br>返回值：<br>成功：返回指向新创建的socket的文件描述符，失败：返回-1，设置errno<br></code></pre></td></tr></table></figure><h4 id="1-2-设置端口复用（setsockopt函数）"><a href="#1-2-设置端口复用（setsockopt函数）" class="headerlink" title="1.2 设置端口复用（setsockopt函数）"></a>1.2 设置端口复用（setsockopt函数）</h4><p>在<code>server</code>的TCP连接没有完全断开之前不允许重新监听是不合理的。因为，TCP连接没有完全断开指的是<code>connfd</code>（127.0.0.1:6666）没有完全断开，而我们重新监听的是<code>listenfd</code>（0.0.0.0:6666），虽然是占用同一个端口，但<code>IP</code>地址不同，<code>connfd</code>对应的是与某个客户端通讯的一个具体的<code>IP</code>地址，而<code>listenfd</code>对应的是<code>wildcard address</code>。解决这个问题的方法是使用<code>setsockopt()</code>设置<code>socket</code>描述符的选项<code>SO_REUSEADDR</code>为1，表示允许创建端口号相同但<code>IP</code>地址不同的多个<code>socket</code>描述符。</p><p>在server代码的socket()和bind()调用之间插入如下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> opt = <span class="hljs-number">1</span>;<br>setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, &amp;opt, <span class="hljs-keyword">sizeof</span>(opt));<br></code></pre></td></tr></table></figure><h4 id="1-3-绑定（bind函数）"><a href="#1-3-绑定（bind函数）" class="headerlink" title="1.3 绑定（bind函数）"></a>1.3 绑定（bind函数）</h4><p>服务器程序所监听的网络地址和端口号通常是固定不变的，客户端程序得知服务器程序的地址和端口号后就可以向服务器发起连接，因此服务器需要调用<code>bind</code>绑定一个固定的网络地址和端口号。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs txt">#include &lt;sys/types.h&gt; /* See NOTES */<br>#include &lt;sys/socket.h&gt;<br>int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);<br>sockfd：<br>socket文件描述符<br>addr:<br>构造出IP地址加端口号<br>addrlen:<br>sizeof(addr)长度<br>返回值：<br>成功返回0，失败返回-1, 设置errno<br></code></pre></td></tr></table></figure><p><code>bind()</code>的作用是将参数<code>sockfd</code>和<code>addr</code>绑定在一起，使<code>sockfd</code>这个用于网络通讯的文件描述符监听<code>addr</code>所描述的地址和端口号。前面讲过，<code>struct sockaddr *</code>是一个通用指针类型，<code>addr</code>参数实际上可以接受多种协议的<code>sockaddr</code>结构体，而它们的长度各不相同，所以需要第三个参数<code>addrlen</code>指定结构体的长度。如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">addr</span>;</span><br>bzero(&amp;addr, <span class="hljs-keyword">sizeof</span>(addr));<br>servaddr.sin_family = AF_INET;<br>servaddr.sin_addr.s_addr = htonl(INADDR_ANY);<span class="hljs-comment">//INADDR_ANY = 0</span><br>servaddr.sin_port = htons(<span class="hljs-number">8888</span>);<br></code></pre></td></tr></table></figure><p>首先将整个结构体清零，然后设置地址类型为<code>AF_INET</code>，<strong>网络地址为</strong><code>INADDR_ANY</code>**，这个宏表示本地的任意<code>IP</code><strong>地址</strong>，因为服务器可能有多个网卡，每个网卡也可能绑定多个<code>IP</code>地址，这样设置可以在所有的<code>IP</code>地址上监听，直到与某个客户端建立了连接时才确定下来到底用哪个<code>IP</code>地址，端口号为8888。</p><h4 id="1-4-设置监听-（listen函数）"><a href="#1-4-设置监听-（listen函数）" class="headerlink" title="1.4 设置监听 （listen函数）"></a>1.4 设置监听 （listen函数）</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs txt">#include &lt;sys/types.h&gt; /* See NOTES */<br>#include &lt;sys/socket.h&gt;<br>int listen(int sockfd, int backlog);<br>sockfd:<br>socket文件描述符<br>backlog:<br>排队建立3次握手队列和刚刚建立3次握手队列的链接数和(现在只表示建立链接队列的数量)<br></code></pre></td></tr></table></figure><p>查看系统默认<code>backlog</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /proc/sys/net/ipv4/tcp_max_syn_backlog<br></code></pre></td></tr></table></figure><p>典型的服务器程序可以同时服务于多个客户端，当有客户端发起连接时，服务器调用的<code>accept()</code>返回并接受这个连接，如果有大量的客户端发起连接而服务器来不及处理，尚未<code>accept</code>的客户端就处于连接等待状态，<code>listen()</code>声明<code>sockfd</code>处于监听状态，并且最多允许有<code>backlog</code>个客户端处于连接待状态，如果接收到更多的连接请求就忽略。<code>listen()</code>成功返回0，失败返回-1。</p><h4 id="1-5-初始化监听套接字（initListenFd函数）"><a href="#1-5-初始化监听套接字（initListenFd函数）" class="headerlink" title="1.5 初始化监听套接字（initListenFd函数）"></a>1.5 初始化监听套接字（initListenFd函数）</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 初始化监听套接字</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">initListenFd</span><span class="hljs-params">(port)</span>&#123;<br>    <span class="hljs-comment">// 1. 创建监听套接字</span><br>    <span class="hljs-type">int</span> lfd = socket(AF_INET,SOCK_STREAM,<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span>(lfd == <span class="hljs-number">-1</span>)&#123;<br>        perror(<span class="hljs-string">&quot;socket error&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-comment">// 2. 设置端口复用</span><br>    <span class="hljs-type">int</span> opt = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> ret = setsockopt(lfd,SOL_SOCKET,SO_REUSEADDR,&amp;opt,<span class="hljs-keyword">sizeof</span>(opt));<br>    <span class="hljs-keyword">if</span>(ret == <span class="hljs-number">-1</span>)&#123;<br>        perror(<span class="hljs-string">&quot;setsockopt error&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-comment">// 3. 绑定</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">addr</span>;</span><br>    addr.sin_family = AF_INET;<br>    addr.sin_port = htons(port);<br>    addr.sin_addr.s_addr = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> ret = bind(lfd,(<span class="hljs-keyword">struct</span> sockaddr *)&amp;addr,<span class="hljs-keyword">sizeof</span>(addr));<br>    <span class="hljs-keyword">if</span>(ret == <span class="hljs-number">-1</span>)&#123;<br>        perror(<span class="hljs-string">&quot;bind error&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-comment">// 4.设置监听</span><br>    ret = listen(lfd,<span class="hljs-number">128</span>);<br>    <span class="hljs-keyword">if</span>(ret == <span class="hljs-number">-1</span>)&#123;<br>        perror(<span class="hljs-string">&quot;listen error&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-comment">// 5. 返回fd</span><br>    <span class="hljs-keyword">return</span> lfd;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-启动epoll"><a href="#2-启动epoll" class="headerlink" title="2. 启动epoll"></a>2. 启动epoll</h3><p><code>epoll</code>是<code>Linux</code>下<strong>IO多路复用</strong>接口<code>select/poll</code>的增强版本，它能显著提高程序在大量并发连接中只有少量活跃的情况下的系统CPU利用率，因为它会复用文件描述符集合来传递结果而不用迫使开发者每次等待事件之前都必须重新准备要被侦听的文件描述符集合，另一点原因就是获取事件的时候，它无须遍历整个被侦听的描述符集，只要遍历那些被内核IO事件异步唤醒而加入<code>Ready</code>队列的描述符集合就行了。</p><p><code>epoll</code>除了提供<code>select/poll</code>那种IO事件的水平触发（Level Triggered）外，还提供了边沿触发（Edge Triggered），这就使得用户空间程序有可能缓存IO状态，减少<code>epoll_wait/epoll_pwait</code>的调用，提高应用程序效率。</p><h4 id="2-1-创建epoll树-epoll-create"><a href="#2-1-创建epoll树-epoll-create" class="headerlink" title="2.1 创建epoll树  (epoll_create)"></a>2.1 创建epoll树  (epoll_create)</h4><p> 创建一个<code>epoll</code>句柄，参数<code>size</code>用来告诉内核监听的文件描述符的个数，跟内存大小有关。(<strong>参数size已经弃用，只需提供大于0的数字就行</strong>)</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">#include &lt;sys/epoll.h&gt;<br>int epoll_create(int size)<br>size：监听数目（内核参考值）<br>返回值：成功：非负文件描述符；失败：-1，设置相应的errno<br></code></pre></td></tr></table></figure><p>可以使用cat命令查看一个进程可以打开的socket描述符上限。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /proc/sys/fs/file-max<br>806425<br></code></pre></td></tr></table></figure><p>如有需要，可以通过修改配置文件的方式修改该上限值。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">sudo vi /etc/security/limits.conf<br>在文件尾部写入以下配置,soft软限制，hard硬限制。如下图所示。<br>* soft nofile 65536<br>* hard nofile 100000<br></code></pre></td></tr></table></figure><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20231026200903197.png" alt="image-20231026200903197"></p><h4 id="2-2-上树（epoll-ctl函数）"><a href="#2-2-上树（epoll-ctl函数）" class="headerlink" title="2.2 上树（epoll_ctl函数）"></a>2.2 上树（epoll_ctl函数）</h4><p>控制某个<code>epoll</code>监控的文件描述符上的事件：注册、修改、删除。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs txt">#include &lt;sys/epoll.h&gt;<br>int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event)<br>    epfd：为epoll_creat的句柄<br>    op：表示动作，用3个宏来表示：<br>    EPOLL_CTL_ADD (注册新的fd到epfd)，<br>    EPOLL_CTL_MOD (修改已经注册的fd的监听事件)，<br>    EPOLL_CTL_DEL (从epfd删除一个fd)；<br>    event：告诉内核需要监听的事件<br><br>struct epoll_event &#123;<br>    __uint32_t events; /* Epoll events */<br>    epoll_data_t data; /* User data variable */<br>&#125;;<br><br>typedef union epoll_data &#123;<br>    void *ptr;<br>    int fd;<br>    uint32_t u32;<br>    uint64_t u64;<br>&#125; epoll_data_t;<br><br>EPOLLIN ：表示对应的文件描述符可以读（包括对端SOCKET正常关闭）<br>EPOLLOUT：表示对应的文件描述符可以写<br>EPOLLPRI：表示对应的文件描述符有紧急的数据可读（这里应该表示有带外数据到来）<br>EPOLLERR：表示对应的文件描述符发生错误<br>EPOLLHUP：表示对应的文件描述符被挂断；<br>EPOLLET： 将EPOLL设为边缘触发(Edge Triggered)模式，这是相对于水平触发(Level Triggered)而言的<br>EPOLLONESHOT：只监听一次事件，当监听完这次事件之后，如果还需要继续监听这个socket的话，需要再次把这个socket加入到EPOLL队列里<br>返回值：成功：0；失败：-1，设置相应的errno<br></code></pre></td></tr></table></figure><h4 id="2-3-检测（epoll-wait函数）"><a href="#2-3-检测（epoll-wait函数）" class="headerlink" title="2.3 检测（epoll_wait函数）"></a>2.3 检测（epoll_wait函数）</h4><p>等待所监控文件描述符上有事件的产生，类似于<code>select()</code>调用。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs txt">#include &lt;sys/epoll.h&gt;<br>int epoll_wait(int epfd, struct epoll_event *events, int maxevents, int timeout)<br>    events：用来存内核得到事件的集合，可简单看作数组。<br>    maxevents：告之内核这个events有多大，这个maxevents的值不能大于创建epoll_create()时的size，<br>    timeout：是超时时间<br>    -1：阻塞<br>    0：立即返回，非阻塞<br>    &gt;0：指定毫秒<br>    返回值：成功返回有多少文件描述符就绪，时间到时返回0，出错返回-1<br></code></pre></td></tr></table></figure><h4 id="2-4-启动epoll-epollrun函数"><a href="#2-4-启动epoll-epollrun函数" class="headerlink" title="2.4 启动epoll(epollrun函数)"></a>2.4 启动epoll(epollrun函数)</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//启动epoll</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">epollrun</span><span class="hljs-params">(<span class="hljs-type">int</span> lfd)</span>&#123;<br>    <span class="hljs-comment">// 1. 创建epoll树</span><br>    <span class="hljs-type">int</span> epfd = epoll_create(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span>(epfd == <span class="hljs-number">-1</span>)&#123;<br>        perror(<span class="hljs-string">&quot;epoll_create error&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-comment">// 2. lfd上树</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epoll_event</span> <span class="hljs-title">ev</span>;</span><br>    ev.data.fd = lfd;<br>    ev.events = EPOLLIN;<br>    <span class="hljs-type">int</span> ret = epoll_ctl(epfd,EPOLL_CTL_ADD,lfd,&amp;ev);<br>    <span class="hljs-keyword">if</span>(ret == <span class="hljs-number">-1</span>)&#123;<br>        perror(<span class="hljs-string">&quot;epoll_ctl error&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-comment">// 3. 检测(委托内核检测添加到树上的节点)</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epoll_event</span> <span class="hljs-title">evs</span>[1024];</span><br>    <span class="hljs-type">int</span> size = siezof(evs) / <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> epoll_event);<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-type">int</span> num = epoll_wait(epfd,evs,size,<span class="hljs-number">-1</span>);<br>        <span class="hljs-keyword">if</span>(num == <span class="hljs-number">-1</span>) &#123;<br>            perror(<span class="hljs-string">&quot;epoll_wait error&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-comment">// 遍历发生变化的节点</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i)&#123;<br>            <span class="hljs-keyword">if</span>(!(evs[i].events &amp; EPOLLIN)) &#123;<br>                <span class="hljs-comment">// 不是读事件</span><br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-type">int</span> fd = evs[i].data.fd;<br>            <span class="hljs-keyword">if</span>(fd == lfd)&#123;<br>                <span class="hljs-comment">// 建立新连接 accept</span><br>                acceptClient(lfd,epfd);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">// 主要是接受对端的数据(读数据)</span><br>                recvHttpRequest(fd,epfd);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-建立连接"><a href="#3-建立连接" class="headerlink" title="3. 建立连接"></a>3. 建立连接</h3><h4 id="3-1-建立连接-（accept函数）"><a href="#3-1-建立连接-（accept函数）" class="headerlink" title="3.1 建立连接 （accept函数）"></a>3.1 建立连接 （accept函数）</h4><p><strong>三方握手完成后，服务器调用<code>accept()</code>接受连接</strong>，如果服务器调用<code>accept()</code>时还没有客户端的连接请求，就阻塞等待直到有客户端连接上来。<code>addr</code>是一个传出参数，<code>accept()</code>返回时传出客户端的地址和端口号。<code>addrlen</code>参数是一个传入传出参数（value-result argument），传入的是调用者提供的缓冲区<code>addr</code>的长度以避免缓冲区溢出问题，传出的是客户端地址结构体的实际长度（有可能没有占满调用者提供的缓冲区）。如果给<code>addr</code>参数传<code>NULL</code>，表示不关心客户端的地址。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs txt">#include &lt;sys/types.h&gt; /* See NOTES */<br>#include &lt;sys/socket.h&gt;<br>int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);<br>sockdf:<br>socket文件描述符<br>addr:<br>传出参数，返回链接客户端地址信息，含IP地址和端口号<br>addrlen:<br>传入传出参数（值-结果）,传入sizeof(addr)大小，函数返回时返回真正接收到地址结构体的大小<br>返回值：<br>成功返回一个新的socket文件描述符，用于和客户端通信，失败返回-1，设置errno<br><br></code></pre></td></tr></table></figure><p>我们的服务器程序结构是这样的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>cliaddr_len = <span class="hljs-keyword">sizeof</span>(cliaddr);<br>connfd = accept(listenfd, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;cliaddr, &amp;cliaddr_len);<br>n = read(connfd, buf, MAXLINE);<br>......<br>close(connfd);<br>&#125;<br></code></pre></td></tr></table></figure><p>整个是一个while死循环，每次循环处理一个客户端连接。由于<code>cliaddr_len</code>是传入传出参数，每次调用<code>accept()</code>之前应该重新赋初值。<code>accept()</code>的参数<code>listenfd</code>是先前的监听文件描述符，而<code>accept()</code>的返回值是另外一个文件描述符<code>connfd</code>，之后与客户端之间就通过这个<code>connfd</code>通讯，最后关闭<code>connfd</code>断开连接，而不关闭<code>listenfd</code>，再次回到循环开头<code>listenfd</code>仍然用作<code>accept</code>的参数。<code>accept()</code>成功返回一个文件描述符，出错返回-1。</p><h4 id="3-2-epoll事件模型"><a href="#3-2-epoll事件模型" class="headerlink" title="3.2 epoll事件模型"></a>3.2 epoll事件模型</h4><p><code>EPOLL</code>事件有两种模型：</p><ul><li><p><code>Edge Triggered (ET) </code>边缘触发只有数据到来才触发，不管缓存区中是否还有数据。</p></li><li><p><code>Level Triggered (LT) </code>水平触发只要有数据都会触发。</p></li></ul><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs txt">思考如下步骤：<br>1.假定我们已经把一个用来从管道中读取数据的文件描述符(rfd)添加到epoll描述符。<br>2.管道的另一端写入了2KB的数据<br>3.调用epoll_wait，并且它会返回rfd，说明它已经准备好读取操作<br>4.读取1KB的数据<br>5.调用epoll_wait……<br></code></pre></td></tr></table></figure><p><strong>ET模式 即Edge Triggered工作模式（边沿触发）</strong></p><p>如果我们在第1步将<code>rfd</code>添加到<code>epoll</code>描述符的时候使用了<code>EPOLLET</code>标志，那么在第5步调用<code>epoll_wait</code>之后将有可能会挂起，因为剩余的数据还存在于文件的输入缓冲区内，而且数据发出端还在等待一个针对已经发出数据的反馈信息。只有在监视的文件句柄上发生了某个事件的时候 <code>ET</code> 工作模式才会汇报事件。因此在第5步的时候，调用者可能会放弃等待仍在存在于文件输入缓冲区内的剩余数据。<code>epoll</code>工作在<code>ET</code>模式的时候，必须使用非阻塞套接口，以避免由于一个文件句柄的阻塞读&#x2F;阻塞写操作把处理多个文件描述符的任务饿死。最好以下面的方式调用<code>ET</code>模式的<code>epoll</code>接口，在后面会介绍避免可能的缺陷。</p><ul><li><p>基于非阻塞文件句柄</p></li><li><p>只有当<code>read</code>或者<code>write</code>返回<code>EAGAIN</code>(非阻塞读，暂时无数据)时才需要挂起、等待。但这并不是说每次<code>read</code>时都需要循环读，直到读到产生一个<code>EAGAIN</code>才认为此次事件处理完成，当<code>read</code>返回的读到的数据长度小于请求的数据长度时，就可以确定此时缓冲中已没有数据了，也就可以认为此事读事件已处理完成。</p></li></ul><p><strong>LT模式即Level Triggered工作模式(水平触发)</strong></p><p>与<code>ET</code>模式不同的是，以<code>LT</code>方式调用<code>epoll</code>接口的时候，它就相当于一个速度比较快的<code>poll</code>，无论后面的数据是否被使用。</p><p><strong>比较</strong></p><p><code>LT(level triggered)</code>：<code>LT</code>是<strong>缺省</strong>的工作方式，并且同时支持<code>block</code>和<code>no-block socket</code>。在这种做法中，内核告诉你一个文件描述符是否就绪了，然后你可以对这个就绪的<code>fd</code>进行IO操作。如果你不作任何操作，内核还是会继续通知你的，所以，这种模式编程出错误可能性要小一点。**传统的<code>select/poll</code>**都是这种模型的代表。</p><p><code>ET(edge-triggered)</code>：**<code>ET</code>是高速工作方式，只支持<code>no-block socket</code>**。在这种模式下，当描述符从未就绪变为就绪时，内核通过<code>epoll</code>告诉你。然后它会假设你知道文件描述符已经就绪，并且不会再为那个文件描述符发送更多的就绪通知。请注意，如果一直不对这个<code>fd</code>作IO操作(从而导致它再次变成未就绪)，内核不会发送更多的通知<code>**(only once)**</code>.</p><h4 id="3-3-阻塞与非阻塞"><a href="#3-3-阻塞与非阻塞" class="headerlink" title="3.3 阻塞与非阻塞"></a>3.3 阻塞与非阻塞</h4><ul><li>非阻塞模式可以理解为，执行此套接字的网络调用时，不管是否执行成功，都会立即返回。</li></ul><p>​如调用<code>recv( )</code>函数读取网络缓冲区中的数据时，不管是否读到数据都立即返回，而不会一直挂在此函数的调用上。</p><ul><li>阻塞模式为只有接收到数据后才会返回，套接字默认的会创建堵塞模式。</li></ul><h4 id="3-4-建立连接（accpetClient函数）"><a href="#3-4-建立连接（accpetClient函数）" class="headerlink" title="3.4 建立连接（accpetClient函数）"></a>3.4 建立连接（accpetClient函数）</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">accpetClient</span><span class="hljs-params">(<span class="hljs-type">int</span> lfd,<span class="hljs-type">int</span> epfd)</span>&#123;<br>    <span class="hljs-comment">// 1. 建立连接</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">cliaddr</span>;</span><br>    <span class="hljs-type">socklen_t</span> len = <span class="hljs-keyword">sizeof</span>(cliaddr);<br>    cliaddr.sin_family = AF_INET;<br>    <span class="hljs-type">int</span> cfd = accept(lfd,(<span class="hljs-keyword">struct</span> sockaddr*)&amp;cliaddr,&amp;len);<br>    <span class="hljs-keyword">if</span>(cfd == <span class="hljs-number">-1</span>)&#123;<br>        perror(<span class="hljs-string">&quot;accept error&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-type">char</span> ip[<span class="hljs-number">16</span>]=<span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;new client ip=%s port=%d\n&quot;</span>,<br>    inet_ntop(AF_INET, &amp;cliaddr.sin_addr.s_addr,ip,<span class="hljs-number">16</span>),ntohs(cliaddr.sin_port));<br>    <br>    <span class="hljs-comment">// 2. 设置非阻塞</span><br>    <span class="hljs-type">int</span> flag = fcntl(cfd,F_GETFL);<br>    flag |= O_NONBLOCK;<br>    fcntl(cfd,F_SETFL,flag);<br><br>    <span class="hljs-comment">// 3. cfd添加到epoll</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epoll_event</span> <span class="hljs-title">ev</span>;</span><br>    ev.data.fd = cfd;<br>    ev.events = EPOLLIN | EPOLLET;      <span class="hljs-comment">//边沿模式</span><br><br>    <span class="hljs-type">int</span> ret = epoll_ctl(epfd,EPOLL_CTL_ADD,cfd,&amp;ev);<br>    <span class="hljs-keyword">if</span>(ret == <span class="hljs-number">-1</span>)&#123;<br>        perror(<span class="hljs-string">&quot;epoll_ctl error&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-接收客户端发来的http请求"><a href="#4-接收客户端发来的http请求" class="headerlink" title="4. 接收客户端发来的http请求"></a>4. 接收客户端发来的http请求</h3><h4 id="4-1-接收数据-（recv函数）"><a href="#4-1-接收数据-（recv函数）" class="headerlink" title="4.1 接收数据 （recv函数）"></a>4.1 接收数据 （recv函数）</h4><p>接收来自<code>socket</code>缓冲区的数据，当缓冲区没有数据可取时，<code>recv</code>会一直处于阻塞状态()，直到缓冲区至少又一个字节数据可读取，或者对端关闭，并读取所有数据后返回。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs txt">#include&lt;sys/types.h&gt;<br>#include&lt;sys/socket.h&gt;<br><br>int recv(int sockfd, char * buf, int len, int flags);<br>sockfd：连接的fd<br>buf：用于接收数据的缓冲区<br>len：缓冲区长度<br>flags：指定调用方式<br>返回值：成功返回实际读到的字节数。如果recv在copy时出错，那么它返回err，err小于0；如果recv函数在等待协议接收数据时网络中断了，那么它返回0。<br></code></pre></td></tr></table></figure><p><strong>read</strong></p><p><code>read</code>函数从文件描述符（包括<code>TCP Socket</code>）中读取数据，并将读取的数据存储到指定的缓冲区中。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">ssize_t read(int fd, void *buf, size_t count);<br>fd：要读取数据的文件描述符，可以是TCP Socket。<br>buf：存储读取数据的缓冲区。<br>count：要读取的字节数。<br>返回值：成功时返回实际读取的字节数，失败时返回-1，并设置errno变量来指示错误的原因。<br></code></pre></td></tr></table></figure><p><code>read</code>函数和<code>recv</code>函数都是阻塞调用，即在没有数据可读时会一直阻塞等待。它们的主要区别在于<code>recv</code>函数可以通过<code>flags</code>参数控制一些特殊的行为，如设置<code>MSG_PEEK</code>标志来预览数据而不将其从缓冲区中移除。</p><h4 id="4-2-EAGAIN错误"><a href="#4-2-EAGAIN错误" class="headerlink" title="4.2 EAGAIN错误"></a>4.2 EAGAIN错误</h4><p>以<code>O_NONBLOCK</code>的标志打开文件<code>/socket/FIFO</code>，如果你连续做<code>read</code>或者<code>recv</code>操作而没有数据可读。此时程序不会阻塞起来等待数据准备就绪返回，<code>read</code>函数会返回一个错误<code>EAGAIN</code>，提示你的应用程序现在没有数据可读请稍后再试。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">（epoll的ET模式下设置recv，对应的fd文件描述符设置为非阻塞）下调用了阻塞操作，在该操作没有完成就返回这个错误，这个错误不会破坏socket的同步，不用管它，下次循环接着recv就可以。对非阻塞socket而言，EAGAIN不是一种错误。在VxWorks和Windows上，EAGAIN的名字叫做EWOULDBLOCK。<br></code></pre></td></tr></table></figure><h4 id="4-3-接受http请求（recvHttpRequest函数）"><a href="#4-3-接受http请求（recvHttpRequest函数）" class="headerlink" title="4.3 接受http请求（recvHttpRequest函数）"></a>4.3 接受http请求（recvHttpRequest函数）</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">recvHttpRequest</span><span class="hljs-params">(<span class="hljs-type">int</span> cfd,<span class="hljs-type">int</span> epfd)</span>&#123;<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">4096</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-type">char</span> tmp[<span class="hljs-number">1024</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-type">int</span> len = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> total = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 1. 接收数据</span><br>    <span class="hljs-keyword">while</span>((len = recv(cfd,tmp,<span class="hljs-keyword">sizeof</span>(tmp),<span class="hljs-number">0</span>)) &gt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">if</span>(total + len &lt; <span class="hljs-keyword">sizeof</span>(buf))&#123;<br>            <span class="hljs-built_in">memcpy</span>(buf + total,tmp,len);<br>        &#125;<br>        total += len;<br>    &#125;<br><br>    <span class="hljs-comment">// 2. 判断数据是否接受完毕</span><br>    <span class="hljs-keyword">if</span>(len == <span class="hljs-number">-1</span> &amp;&amp; errno == EAGAIN)&#123;<br>        <span class="hljs-comment">// 解析请求行   </span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19</span><br><span class="hljs-comment">        G E T   / 1 . t x t H  T  T  P  /  1  .  1  /r /n</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-type">char</span>* pt = <span class="hljs-built_in">strstr</span>(buf,<span class="hljs-string">&quot;\r\n&quot;</span>);  <span class="hljs-comment">//大字符串找小字符串</span><br>        <span class="hljs-type">int</span> reqLen = pt - buf;<br>        buf[reqLen] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br><br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(len == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-comment">// 客户端断开连接</span><br>        epoll_ctl(epfd,EPOLL_CTL_DEL,cfd,<span class="hljs-literal">NULL</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        perror(<span class="hljs-string">&quot;recv error&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-解析请求行"><a href="#5-解析请求行" class="headerlink" title="5. 解析请求行"></a>5. 解析请求行</h3><h4 id="5-1-格式化拆分字符串-（sscanf函数）"><a href="#5-1-格式化拆分字符串-（sscanf函数）" class="headerlink" title="5.1 格式化拆分字符串 （sscanf函数）"></a>5.1 格式化拆分字符串 （sscanf函数）</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">sprintf（）是把格式化数据输出成（存储到）字符串。<br>sscanf（）是从字符串中读取格式化的数据。<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs txt">// 函数原型<br>// 将参数str的字符串根据参数format字符串来转换并格式化数据，转换后的结果存于对应的参数内。<br>sscanf(const char *str, const char *format, ...)。<br><br>具体功能如下：<br>（1）根据格式从字符串中提取数据。如从字符串中取出整数、浮点数和字符串等。<br>（2）取指定长度的字符串<br>（3）取到指定字符为止的字符串<br>（4）取仅包含指定字符集的字符串<br>（5）取到指定字符集为止的字符串<br><br>// 可以使用正则表达式进行字符串的拆分<br>// shell脚本的时候, 会将正则表达式, 其实就是字符串的匹配规则, 用特殊字符来描述一类字符串<br>/*<br>正则匹配规则:<br>[1-9]: 匹配一个字符, 这个字符在 1-9 范围内就满足条件<br>[2-7]: 匹配一个字符, 这个字符在 2-7 范围内就满足条件<br>[a-z]: 匹配一个字符, 这个字符在 a-z 范围内就满足条件<br>[A,b,c,D, e, f]: 匹配一个字符, 这个字符是集合中任意一个就满足条件<br>[1-9, f-x]: 匹配一个字符, 这个字符是1-9, 或者f-x 集合中的任意一个就满足条件<br>[^1]: ^代表否定, 匹配一个字符,这个字符只要不是1就满足条件<br>[^2-8]: 匹配一个字符,这个字符只要不在 2-8 范围内就满足条件<br>[^a-f]: 匹配一个字符,这个字符只要不在 a-f 范围内就满足条件<br>[^ ]: 匹配一个字符,这个字符只要不是空格就满足条件<br>使用正则表达式如何取匹配字符串:<br>举例: <br>字符串 ==&gt; abcdefg12345AABBCCDD890<br>正则表达式: [1-9][a-z], 可以匹配两个字符<br>匹配方式: 从原始字符串开始位置遍历, 每遍历一个字符都需要和正则表达式进行匹配, <br>满足条件继续向后匹配, 不满足条件, 匹配结束<br>从新开始: 从正则表达式的第一个字符重新开始向后一次匹配<br>当整个大字符串被匹配一遍, 就结束了<br>abcdefg12345AABBCCDD893b<br>- 匹配到一个子字符串: 3b<br>1a2b3c4d5e6f7g12345AABBCCDD893b<br> - 1a<br> - 2b<br> - 3c<br> - 4d<br> - 5e<br> - 6f<br> - 7g<br> - 3b<br>*/<br>sscanf可以支持格式字符%[]：<br><br>(1)-: 表示范围，如：%[1-9]表示只读取1-9这几个数字 %[a-z]表示只读取a-z小写字母，类似地 %[A-Z]只读取大写字母<br>(2)^: 表示不取，如：%[^1]表示读取除&#x27;1&#x27;以外的所有字符 %[^/]表示除/以外的所有字符<br>(3),: 范围可以用&quot;,&quot;相连接 如%[1-9,a-z]表示同时取1-9数字和a-z小写字母 <br>(4)原则：从第一个在指定范围内的数字开始读取，到第一个不在范围内的数字结束%s 可以看成%[] 的一个特例 %[^ ](注意^后面有一个空格！)<br></code></pre></td></tr></table></figure><h4 id="5-2-转码"><a href="#5-2-转码" class="headerlink" title="5.2 转码"></a>5.2 转码</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs txt">假设浏览器访问的文件名中有中文: Linux内核.jpg<br>- 浏览器在给服务器发送请求的时候, 会自动将中文进制转换: Linux%E5%86%85%E6%A0%B8.jpg<br>- 为什么要转换?<br>- 在http请求的请求行中不支持中文字符, 如果有中文, 浏览器就会自动将中文进行转换<br>- 在服务器端收到的文件名就不是原来的名字了, 因此服务器端就不能识别了<br>- 如果服务器端想要正确的处理, 需要将特殊字符串解析成原来的汉字<br><br>$ unicode 内<br>UTF-8: e5 86 85 <br>$ unicode 核<br>UTF-8: e6 a0 b8<br></code></pre></td></tr></table></figure><h4 id="5-3-获取文件信息（stat）"><a href="#5-3-获取文件信息（stat）" class="headerlink" title="5.3 获取文件信息（stat）"></a>5.3 获取文件信息（stat）</h4><p><code>Linux</code> 下可以使用<code>stat </code>命令查看文件的属性，其实这个命令内部就是通过调用<code> stat()</code>函数来获取文件属性的，<code>stat </code>函数是 <code>Linux </code>中的系统调用，用于获取文件相关的信息。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">#include &lt;sys/types.h&gt;<br>#include &lt;sys/stat.h&gt;<br>#include &lt;unistd.h&gt;<br>int stat(const char *pathname, struct stat *buf);<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs txt">struct stat<br>&#123;<br> dev_t st_dev; /* 文件所在设备的 ID */<br> ino_t st_ino; /* 文件对应 inode 节点编号 */<br> mode_t st_mode; /* 文件对应的模式 */<br> nlink_t st_nlink; /* 文件的链接数 */<br> uid_t st_uid; /* 文件所有者的用户 ID */<br> gid_t st_gid; /* 文件所有者的组 ID */<br> dev_t st_rdev; /* 设备号（指针对设备文件） */<br> off_t st_size; /* 文件大小（以字节为单位） */<br> blksize_t st_blksize; /* 文件内容存储的块大小 */<br> blkcnt_t st_blocks; /* 文件内容所占块数 */<br> struct timespec st_atim; /* 文件最后被访问的时间 */<br> struct timespec st_mtim; /* 文件内容最后被修改的时间 */<br> struct timespec st_ctim; /* 文件状态最后被改变的时间 */<br>&#125;;<br>st_dev：该字段用于描述此文件所在的设备。不常用，可以不用理会。<br>st_ino：文件的 inode 编号。<br>st_mode：该字段用于描述文件的模式，譬如文件类型、文件权限都记录在该变量中。<br>st_nlink：该字段用于记录文件的硬链接数，也就是为该文件创建了多少个硬链接文件。链接文件可以分为软链接（符号链接）文件和硬链接文件。<br>st_uid、st_gid：此两个字段分别用于描述文件所有者的用户 ID 以及文件所有者的组 ID。<br>st_rdev：该字段记录了设备号，设备号只针对于设备文件，包括字符设备文件和块设备文件，不用理会。<br>st_size：该字段记录了文件的大小（逻辑大小），以字节为单位。<br>st_atim、st_mtim、st_ctim：此三个字段分别用于记录文件最后被访问的时间、文件内容最后被修改的时间以及文件状态最后被改变的时间，都是 struct timespec 类型变量。<br></code></pre></td></tr></table></figure><h4 id="5-3-解析请求行（parseRequestLine函数）"><a href="#5-3-解析请求行（parseRequestLine函数）" class="headerlink" title="5.3 解析请求行（parseRequestLine函数）"></a>5.3 解析请求行（parseRequestLine函数）</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">parseRequestLine</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* line,<span class="hljs-type">int</span> cfd)</span>&#123;<br>    <span class="hljs-comment">// 1. 拆分http请求行   get /xxx/1.jpg http/1.1</span><br>    <span class="hljs-type">char</span> method[<span class="hljs-number">12</span>];    <span class="hljs-comment">// 方法</span><br>    <span class="hljs-type">char</span> path[<span class="hljs-number">1024</span>];    <span class="hljs-comment">// 路径</span><br>    <span class="hljs-type">char</span> protocol[<span class="hljs-number">12</span>];  <span class="hljs-comment">// 协议</span><br>    <span class="hljs-built_in">sscanf</span>(line,<span class="hljs-string">&quot;%[^ ] %[^ ] %[^ ]&quot;</span>,method,path,protocol);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;method = %s, path = %s, protocol = %s\n&quot;</span>, method, path, protocol);<br><br>    <span class="hljs-comment">// 判断是否是get请求</span><br>    <span class="hljs-keyword">if</span>(strcasecmp(method,<span class="hljs-string">&quot;get&quot;</span>) != <span class="hljs-number">0</span>)&#123;     <span class="hljs-comment">//不区分大小写</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 转码 将不能识别的中文乱码 -&gt; 中文</span><br>    <span class="hljs-comment">// 解码 %23 %34 %5f</span><br>    decode_str(path, path);<br><br>    <span class="hljs-comment">// 2. 处理客户端请求的静态资源</span><br>    <span class="hljs-type">char</span>* file = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-comment">// 如果没有指定访问的资源, 默认显示资源目录中的内容</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(path,<span class="hljs-string">&quot;/&quot;</span>) == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-comment">// file的值, 资源目录的当前位置</span><br>        file = <span class="hljs-string">&quot;./&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">// 去掉path中的/ 获取访问文件名</span><br>        file = path + <span class="hljs-number">1</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 3. 获取文件属性</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> <span class="hljs-title">st</span>;</span><br>    <span class="hljs-type">int</span> ret = stat(file,&amp;st);<br>    <span class="hljs-keyword">if</span>(ret == <span class="hljs-number">-1</span>)&#123;<br>        <span class="hljs-comment">// 文件不存在--回复404</span><br><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">// 判断文件类型（判断是目录还是文件）</span><br>    <span class="hljs-keyword">if</span>(S_ISDIR(st.st_mode))&#123;    <span class="hljs-comment">// 目录</span><br>        <span class="hljs-comment">// 把目录发给客户端</span><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">// 把文件内容发给客户端</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-发送响应头"><a href="#6-发送响应头" class="headerlink" title="6. 发送响应头"></a>6. 发送响应头</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">sendHeadMsg</span><span class="hljs-params">(<span class="hljs-type">int</span> cfd,<span class="hljs-type">int</span> status,<span class="hljs-type">const</span> <span class="hljs-type">char</span>* desrc,<span class="hljs-type">const</span> <span class="hljs-type">char</span>* type,<span class="hljs-type">int</span> length)</span>&#123;<br>    <span class="hljs-comment">// 状态行</span><br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">4096</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-built_in">sprintf</span>(buf,<span class="hljs-string">&quot;http/1.1 %d %s \r\n&quot;</span>,status,desrc);<br>    <span class="hljs-comment">// 消息报头</span><br>    <span class="hljs-built_in">sprintf</span>(buf + <span class="hljs-built_in">strlen</span>(buf),<span class="hljs-string">&quot;Content-Type: %s\r\n&quot;</span>,type);<br>    <span class="hljs-built_in">sprintf</span>(buf + <span class="hljs-built_in">strlen</span>(buf),<span class="hljs-string">&quot;Content-Length: %d\r\n&quot;</span>,length);<br><br>    send(cfd,buf,<span class="hljs-built_in">strlen</span>(buf),<span class="hljs-number">0</span>);<br>     <span class="hljs-comment">// 空行</span><br>    send(cfd, <span class="hljs-string">&quot;\r\n&quot;</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-通过文件名获取文件的类型"><a href="#7-通过文件名获取文件的类型" class="headerlink" title="7. 通过文件名获取文件的类型"></a>7. 通过文件名获取文件的类型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 通过文件名获取文件的类型</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">get_file_type</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name)</span><br>&#123;<br>    <span class="hljs-type">char</span>* dot;<br><br>    <span class="hljs-comment">// 自右向左查找‘.’字符, 如不存在返回NULL</span><br>    dot = <span class="hljs-built_in">strrchr</span>(name, <span class="hljs-string">&#x27;.&#x27;</span>);   <br>    <span class="hljs-keyword">if</span> (dot == <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;text/plain; charset=utf-8&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(dot, <span class="hljs-string">&quot;.html&quot;</span>) == <span class="hljs-number">0</span> || <span class="hljs-built_in">strcmp</span>(dot, <span class="hljs-string">&quot;.htm&quot;</span>) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(dot, <span class="hljs-string">&quot;.jpg&quot;</span>) == <span class="hljs-number">0</span> || <span class="hljs-built_in">strcmp</span>(dot, <span class="hljs-string">&quot;.jpeg&quot;</span>) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;image/jpeg&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(dot, <span class="hljs-string">&quot;.gif&quot;</span>) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;image/gif&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(dot, <span class="hljs-string">&quot;.png&quot;</span>) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;image/png&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(dot, <span class="hljs-string">&quot;.css&quot;</span>) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;text/css&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(dot, <span class="hljs-string">&quot;.au&quot;</span>) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;audio/basic&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>( dot, <span class="hljs-string">&quot;.wav&quot;</span> ) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;audio/wav&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(dot, <span class="hljs-string">&quot;.avi&quot;</span>) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;video/x-msvideo&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(dot, <span class="hljs-string">&quot;.mov&quot;</span>) == <span class="hljs-number">0</span> || <span class="hljs-built_in">strcmp</span>(dot, <span class="hljs-string">&quot;.qt&quot;</span>) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;video/quicktime&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(dot, <span class="hljs-string">&quot;.mpeg&quot;</span>) == <span class="hljs-number">0</span> || <span class="hljs-built_in">strcmp</span>(dot, <span class="hljs-string">&quot;.mpe&quot;</span>) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;video/mpeg&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(dot, <span class="hljs-string">&quot;.vrml&quot;</span>) == <span class="hljs-number">0</span> || <span class="hljs-built_in">strcmp</span>(dot, <span class="hljs-string">&quot;.wrl&quot;</span>) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;model/vrml&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(dot, <span class="hljs-string">&quot;.midi&quot;</span>) == <span class="hljs-number">0</span> || <span class="hljs-built_in">strcmp</span>(dot, <span class="hljs-string">&quot;.mid&quot;</span>) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;audio/midi&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(dot, <span class="hljs-string">&quot;.mp3&quot;</span>) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;audio/mpeg&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(dot, <span class="hljs-string">&quot;.ogg&quot;</span>) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;application/ogg&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(dot, <span class="hljs-string">&quot;.pac&quot;</span>) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;application/x-ns-proxy-autoconfig&quot;</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;text/plain; charset=utf-8&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-发送文件"><a href="#8-发送文件" class="headerlink" title="8. 发送文件"></a>8. 发送文件</h3><h4 id="8-1-断言（assert函数）"><a href="#8-1-断言（assert函数）" class="headerlink" title="8.1 断言（assert函数）"></a>8.1 断言（assert函数）</h4><p>编译期<code>assert</code>函数的目的在于当条件不满足时，阻止编译，从而防止错误的逻辑通过编辑。而运行期<code>assert</code>的目的在于运行时发现条件不满足时，产生一个<code>Debug</code>事件(<code>DebugBreak</code>)，从而让调试器停下来方便用户检查原因。<code>assert </code>是一个宏，不是函数。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//表达式可以是任何有效的 C 语言表达式，很多时候它是一个条件。</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">assert</span><span class="hljs-params">(<span class="hljs-type">int</span> expression <span class="hljs-keyword">or</span> variable)</span></span>;<br></code></pre></td></tr></table></figure><h4 id="8-2-光标函数（lseek函数）"><a href="#8-2-光标函数（lseek函数）" class="headerlink" title="8.2 光标函数（lseek函数）"></a>8.2 光标函数（lseek函数）</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs txt">#include &lt;sys/types.h&gt; <br>#include &lt;unistd.h&gt;<br>off_t lseek(int handle, off_t offset, int fromwhere);<br>1) 欲将读写位置移到文件开头时:<br>lseek（int fildes,0,SEEK_SET）；<br>2) 欲将读写位置移到文件尾时:<br>lseek（int fildes，0,SEEK_END）；<br>3) 想要取得目前文件位置时:<br>lseek（int fildes，0,SEEK_CUR）；<br></code></pre></td></tr></table></figure><h4 id="8-3-发送文件（sendFile函数）"><a href="#8-3-发送文件（sendFile函数）" class="headerlink" title="8.3 发送文件（sendFile函数）"></a>8.3 发送文件（sendFile函数）</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">sendFile</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* filename,<span class="hljs-type">int</span> cfd)</span>&#123;<br><br>    <span class="hljs-comment">// 1. 打开文件</span><br>    <span class="hljs-type">int</span> fd = open(filename,O_RDONLY);<br>    assert(fd &gt; <span class="hljs-number">0</span>);     <span class="hljs-comment">// 断言</span><br>    <span class="hljs-comment">// if(fd == -1)&#123;</span><br>    <span class="hljs-comment">//     perror(&quot;open error&quot;);</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// 2. 循环读文件</span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 1</span><br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">4096</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-type">int</span> len = <span class="hljs-number">0</span>, ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>((len = read(fd,buf,<span class="hljs-keyword">sizeof</span>(buf))) &gt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-comment">// 发送读出的数据</span><br>        ret = send(cfd,buf,len,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span>(ret == <span class="hljs-number">-1</span>)&#123;<br>            <span class="hljs-keyword">if</span>(errno = EAGAIN)&#123;<br>                perror(<span class="hljs-string">&quot;send error:&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (errno == EINTR) &#123;<br>                perror(<span class="hljs-string">&quot;send error:&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                perror(<span class="hljs-string">&quot;send error:&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    <span class="hljs-type">off_t</span> offset = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> size = lseek(fd,<span class="hljs-number">0</span>,SEEK_END);<br>    lseek(fd,<span class="hljs-number">0</span>,SEEK_SET);<br>    <span class="hljs-keyword">while</span>(offset &lt; size)&#123;<br>        <span class="hljs-type">int</span> ret = sendfile(cfd,fd,&amp;offset,size);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ret value: %d\n&quot;</span>,ret);<br>        <span class="hljs-keyword">if</span>(ret == <span class="hljs-number">-1</span> &amp;&amp; errno == EAGAIN)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;没数据。。。\n&quot;</span>);<br>            perror(<span class="hljs-string">&quot;snedfile&quot;</span>);<br>            <br>        &#125;<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    close(fd);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-发送目录"><a href="#9-发送目录" class="headerlink" title="9. 发送目录"></a>9. 发送目录</h3><h4 id="9-1-目录扫描函数（scandir函数）"><a href="#9-1-目录扫描函数（scandir函数）" class="headerlink" title="9.1 目录扫描函数（scandir函数）"></a>9.1 目录扫描函数（scandir函数）</h4><p><code>scandir()</code>会扫描参数<code>dir</code>指定的目录文件，经由参数<code>select</code>指定的函数来挑选目录结构至参数<code>namelist</code>数组中，最后再调用参数<code>compar</code>指定的函数来排序<code>namelist</code>数组中的目录数据。每次从目录文件中读取一个目录结构后便将此结构传给参数<code>select</code>所指的函数，<code>select</code>函数若不想要将此目录结构复制到<code>namelis</code>t数组就返回0，若<code>select</code>为空指针则代表选择所有的目录结构。<code>scandir()</code>会调用<code>qsort()</code>来排序数据，参数<code>compar</code>则为<code>qsort()</code>的参数，若是要排列目录名称字母则可使用<code>alphasort()</code>。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs txt">#include &lt;dirent.h&gt;<br>int scandir(const char *dir, <br>struct dirent ***namelist,<br>int (*select)(const struct dirent *),<br>int (*compar)(const struct dirent **, <br>const struct dirent **));<br>dir:指定扫描的目录<br>namelist:struct dirent结构体类型的三级指针，用于获取该函数内部为存放返回结果的分配的动态内存<br>select:函数指针，指向过滤模式函数,当selectr指针设置为NULL时，扫描dir目录下的所有顶层文件.该函数有一个参数const struct dirent *是指在遍历过程中所遍历到的每一个子目录dirent，select可以根据dirent的类型、名称等信息来判定当前的dirent是否为合法的子目录，合法则函数返回0，则该子目录的名称会被存储在namelist中；否则返回非0，则该子目录被过滤掉。<br>compar:函数指针，指向对遍历结果进行排序函数，alphasort函数和versionsort是经常用到的函数<br></code></pre></td></tr></table></figure><h4 id="9-2-发送目录（sendDir函数）"><a href="#9-2-发送目录（sendDir函数）" class="headerlink" title="9.2 发送目录（sendDir函数）"></a>9.2 发送目录（sendDir函数）</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 发送目录内容</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sendDir</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* dirname, <span class="hljs-type">int</span> cfd)</span><br>&#123;<br>   <br>   <span class="hljs-comment">// 拼接一个html页面&lt;table&gt;&lt;/table&gt;</span><br>   <span class="hljs-type">char</span> buf[<span class="hljs-number">4096</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>   <br>   <span class="hljs-built_in">sprintf</span>(buf,<span class="hljs-string">&quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;目录名：%s&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;table&gt;&quot;</span>,dirname);<br>   <span class="hljs-comment">//sprintf(buf + strlen(buf),&quot;&lt;body&gt;&lt;h1&gt;当前目录：%s&lt;/h1&gt;&lt;table&gt;&quot;,dirname);</span><br><br>    <span class="hljs-comment">// 目录项二级指针</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dirent</span>** <span class="hljs-title">ptr</span>;</span><br>    <span class="hljs-type">int</span> num = scandir(dirname,&amp;ptr,<span class="hljs-literal">NULL</span>,alphasort);<br><br>    <span class="hljs-comment">// 遍历目录</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; i++)&#123;<br>        <span class="hljs-comment">// 取出文件名 namelist 指向的是一个指针数组 struct dirent* tmp[]</span><br>        <span class="hljs-type">char</span>* name = ptr[i]-&gt;d_name;<br>        <span class="hljs-type">char</span> subPath[<span class="hljs-number">1024</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>        <span class="hljs-comment">// 拼接文件袋完整路径</span><br>        <span class="hljs-built_in">sprintf</span>(subPath,<span class="hljs-string">&quot;%s/%s&quot;</span>,dirname,name);<br>        <br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> <span class="hljs-title">st</span>;</span><br>        stat(subPath,&amp;st);<br><br>        <span class="hljs-type">char</span> enstr[<span class="hljs-number">1024</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>        <span class="hljs-comment">// 编码生成 %E5 %A7 之类的东西</span><br>        encode_str(enstr, <span class="hljs-keyword">sizeof</span>(enstr), name);<br><br>        <span class="hljs-comment">// 如果是文件</span><br>        <span class="hljs-keyword">if</span>(S_ISREG(st.st_mode)) &#123;       <br>            <span class="hljs-built_in">sprintf</span>(buf+<span class="hljs-built_in">strlen</span>(buf), <br>                    <span class="hljs-string">&quot;&lt;tr&gt;&lt;td&gt;&lt;a href=\&quot;%s\&quot;&gt;%s&lt;/a&gt;&lt;/td&gt;&lt;td&gt;%ld&lt;/td&gt;&lt;/tr&gt;&quot;</span>,<br>                    enstr, name, (<span class="hljs-type">long</span>)st.st_size);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(S_ISDIR(st.st_mode)) &#123;<span class="hljs-comment">// 如果是目录       </span><br>            <span class="hljs-built_in">sprintf</span>(buf+<span class="hljs-built_in">strlen</span>(buf), <br>                    <span class="hljs-string">&quot;&lt;tr&gt;&lt;td&gt;&lt;a href=\&quot;%s/\&quot;&gt;%s/&lt;/a&gt;&lt;/td&gt;&lt;td&gt;%ld&lt;/td&gt;&lt;/tr&gt;&quot;</span>,<br>                    enstr, name, (<span class="hljs-type">long</span>)st.st_size);<br>        &#125;<br>        <span class="hljs-type">int</span> ret = send(cfd, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span> (ret == <span class="hljs-number">-1</span>) &#123;<br>            <span class="hljs-keyword">if</span> (errno == EAGAIN) &#123;<br>                perror(<span class="hljs-string">&quot;send error:&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (errno == EINTR) &#123;<br>                perror(<span class="hljs-string">&quot;send error:&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                perror(<span class="hljs-string">&quot;send error:&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(buf));<br>        <span class="hljs-comment">// 字符串拼接</span><br>        <span class="hljs-built_in">free</span>(ptr[i]);<br>    &#125;  <br>    <br>    <span class="hljs-comment">// 字符串拼接</span><br>    <span class="hljs-comment">//memset(buf, 0, sizeof(buf));</span><br>    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span>);<br>    send(cfd, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;dir message send OK!!!!\n&quot;</span>); <br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br>    <span class="hljs-comment">// 打开目录</span><br>    DIR* dir = opendir(dirname);<br>    <span class="hljs-keyword">if</span>(dir == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        perror(<span class="hljs-string">&quot;opendir error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 读目录</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dirent</span>* <span class="hljs-title">ptr</span> =</span> <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">while</span>( (ptr = readdir(dir)) != <span class="hljs-literal">NULL</span> )<br>    &#123;<br>        <span class="hljs-type">char</span>* name = ptr-&gt;d_name;<br>    &#125;<br>    closedir(dir);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-built_in">free</span>(ptr);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="10-完整代码"><a href="#10-完整代码" class="headerlink" title="10. 完整代码"></a>10. 完整代码</h3><h4 id="整体框架"><a href="#整体框架" class="headerlink" title="整体框架"></a>整体框架</h4><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20231028135200278.png" alt="image-20231028135200278"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">客户端: 浏览器</span><br><span class="hljs-comment">- 通过浏览器访问服务器:</span><br><span class="hljs-comment">- 访问方式: 服务器的IP地址:端口</span><br><span class="hljs-comment">- 应用层协议使用: http, 数据需要在浏览器端使用该协议进行包装</span><br><span class="hljs-comment">- 响应消息的处理也是浏览器完成的 =&gt; 程序猿不需要管</span><br><span class="hljs-comment">- 客户端通过url访问服务器资源</span><br><span class="hljs-comment">- 客户端访问的路径:</span><br><span class="hljs-comment">1. http://192.168.1.100:8989/  或者  http://192.168.1.100:8989</span><br><span class="hljs-comment">- 访问服务器提供的资源目录的根目录</span><br><span class="hljs-comment">- 并不是服务器上的 / 目录  </span><br><span class="hljs-comment">- 这个目录根据服务器端的描述应该是: /home/robin/luffy 目录</span><br><span class="hljs-comment">- 请求行:</span><br><span class="hljs-comment">GET / HTTP/1.1</span><br><span class="hljs-comment">2. http://192.168.1.100:8989/a.txt</span><br><span class="hljs-comment">- 端口后边的/代表服务器的资源根目录</span><br><span class="hljs-comment">- 在服务器端路径: /home/robin/luffy 目录</span><br><span class="hljs-comment">- 客户端要访问服务器上的a.txt的文件</span><br><span class="hljs-comment">- a.txt 这个文件在服务器提供的资源目录中</span><br><span class="hljs-comment">- 服务器上的路径: /home/robin/luffy/a.txt</span><br><span class="hljs-comment">- 请求行:</span><br><span class="hljs-comment">GET /a.txt HTTP/1.1</span><br><span class="hljs-comment">3. http://192.168.1.100:8989/hello/a.txt</span><br><span class="hljs-comment">- http://192.168.1.100:8989: 服务器地址</span><br><span class="hljs-comment">- /hello/a.txt</span><br><span class="hljs-comment">- /: 服务器端提供的资源根目录</span><br><span class="hljs-comment">- hello: 资源根目录的子目录</span><br><span class="hljs-comment">- a.txt: 在hello目录中</span><br><span class="hljs-comment">- 请求行:</span><br><span class="hljs-comment">GET /hello/a.txt HTTP/1.1</span><br><span class="hljs-comment">4. http://192.168.1.100:8989/hello/wrold/</span><br><span class="hljs-comment">- http://192.168.1.100:8989: 服务器地址</span><br><span class="hljs-comment">- /hello/world/</span><br><span class="hljs-comment">- /: 服务器端提供的资源根目录</span><br><span class="hljs-comment">- hello: 资源根目录的子目录</span><br><span class="hljs-comment">- world/: 如果world后边有/代表这是一个目录, 这个目录在hello目录中</span><br><span class="hljs-comment">- 请求行:</span><br><span class="hljs-comment">GET /hello/world/ HTTP/1.1</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">服务器端: 提供服务器, 让客户端访问</span><br><span class="hljs-comment">- 支持多客户端访问</span><br><span class="hljs-comment">- 使用IO多路转接 =&gt; epoll</span><br><span class="hljs-comment">- 客户端发送给的请求消息是基于http的</span><br><span class="hljs-comment">- 需要能够解析http请求</span><br><span class="hljs-comment">- 服务器回复客户端数据, 使用http协议封装回复的数据 ==&gt; http响应</span><br><span class="hljs-comment">- 服务器端需要提供一个资源目录, 目录中的文件可以供客户端访问</span><br><span class="hljs-comment">- 客户端访问的文件没有在资源目录中, 就不能访问了</span><br><span class="hljs-comment">- 假设服务器提供个资源目录: /home/robin/luffy 目录</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 服务器端处理的伪代码</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">// 1. 创建监听的fd</span><br>    socket();<br>    <span class="hljs-comment">// 2. 绑定</span><br>    bind();<br>    <span class="hljs-comment">// 3. 设置监听</span><br>    listen();<br>    <br>    <span class="hljs-comment">// 4. 创建epoll模型</span><br>    epoll_create();<br>    epoll_ctl();<br>    <span class="hljs-comment">// 5. 检测</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>    &#123;<br>        epoll_wait();<br>        <span class="hljs-comment">// 监听的文件描述符</span><br>        accept();<br>        <span class="hljs-comment">// 通信的</span><br>        <span class="hljs-comment">// 接收数据-&gt;http请求消息</span><br>        recvAndParseHttp();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 基于边沿非阻塞模型接收数据</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">recvAndParseHttp</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">// 循环接收数据</span><br>    <span class="hljs-comment">// 解析http请求消息</span><br>    <span class="hljs-comment">// http请求由两种:get / post</span><br>    <span class="hljs-comment">// 只处理get请求, 浏览器向服务器请求访问的文件都是静态资源, 因此使用get就可以</span><br>    <span class="hljs-comment">// 判断是不是get请求  ==&gt; 在请求行中 ==&gt; 请求行的第一部分</span><br>    <span class="hljs-comment">// 客户端向服务器请求的静态资源是什么? =&gt; 请求行的第二部分</span><br>    <span class="hljs-comment">// 找到服务器上的静态资源</span><br>    - 文件 -&gt; 读文件内容<br>        - 目录 -&gt; 遍历目录<br>    <span class="hljs-comment">// 将文件内容或者目录内容打包到http响应协议中</span><br>    <span class="hljs-comment">// 将整条协议发送回给客户端即可</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="epoll-web-c"><a href="#epoll-web-c" class="headerlink" title="epoll_web.c"></a><strong>epoll_web.c</strong></h4><!-- more --><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;epoll_web.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/epoll.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;strings.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/sendfile.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;dirent.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctype.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-comment">// 初始化监听套接字</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">initListenFd</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> port)</span>&#123;<br>    <span class="hljs-comment">// 1. 创建监听套接字</span><br>    <span class="hljs-type">int</span> lfd = socket(AF_INET,SOCK_STREAM,<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span>(lfd == <span class="hljs-number">-1</span>)&#123;<br>        perror(<span class="hljs-string">&quot;socket error&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-comment">// 2. 设置端口复用</span><br>    <span class="hljs-type">int</span> opt = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> ret = setsockopt(lfd,SOL_SOCKET,SO_REUSEADDR,&amp;opt,<span class="hljs-keyword">sizeof</span>(opt));<br>    <span class="hljs-keyword">if</span>(ret == <span class="hljs-number">-1</span>)&#123;<br>        perror(<span class="hljs-string">&quot;setsockopt error&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-comment">// 3. 绑定</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">addr</span>;</span><br>    addr.sin_family = AF_INET;<br>    addr.sin_port = htons(port);<br>    addr.sin_addr.s_addr = <span class="hljs-number">0</span>;<br>    ret = bind(lfd,(<span class="hljs-keyword">struct</span> sockaddr *)&amp;addr,<span class="hljs-keyword">sizeof</span>(addr));<br>    <span class="hljs-keyword">if</span>(ret == <span class="hljs-number">-1</span>)&#123;<br>        perror(<span class="hljs-string">&quot;bind error&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-comment">// 4.设置监听</span><br>    ret = listen(lfd,<span class="hljs-number">128</span>);<br>    <span class="hljs-keyword">if</span>(ret == <span class="hljs-number">-1</span>)&#123;<br>        perror(<span class="hljs-string">&quot;listen error&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-comment">// 5. 返回fd</span><br>    <span class="hljs-keyword">return</span> lfd;<br>&#125;<br><br><span class="hljs-comment">//启动epoll</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">epollrun</span><span class="hljs-params">(<span class="hljs-type">int</span> lfd)</span>&#123;<br>    <span class="hljs-comment">// 1. 创建epoll树</span><br>    <span class="hljs-type">int</span> epfd = epoll_create(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span>(epfd == <span class="hljs-number">-1</span>)&#123;<br>        perror(<span class="hljs-string">&quot;epoll_create error&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-comment">// 2. lfd上树</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epoll_event</span> <span class="hljs-title">ev</span>;</span><br>    ev.data.fd = lfd;<br>    ev.events = EPOLLIN;<br>    <span class="hljs-type">int</span> ret = epoll_ctl(epfd,EPOLL_CTL_ADD,lfd,&amp;ev);<br>    <span class="hljs-keyword">if</span>(ret == <span class="hljs-number">-1</span>)&#123;<br>        perror(<span class="hljs-string">&quot;epoll_ctl error&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-comment">// 3. 检测(委托内核检测添加到树上的节点)</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epoll_event</span> <span class="hljs-title">evs</span>[1024];</span><br>    <span class="hljs-type">int</span> size = <span class="hljs-keyword">sizeof</span>(evs) / <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> epoll_event);<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-type">int</span> num = epoll_wait(epfd,evs,size,<span class="hljs-number">-1</span>);<br>        <span class="hljs-keyword">if</span>(num == <span class="hljs-number">-1</span>) &#123;<br>            perror(<span class="hljs-string">&quot;epoll_wait error&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-comment">// 遍历发生变化的节点</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i)&#123;<br>            <span class="hljs-keyword">if</span>(!(evs[i].events &amp; EPOLLIN)) &#123;<br>                <span class="hljs-comment">// 不是读事件</span><br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-type">int</span> fd = evs[i].data.fd;<br>            <span class="hljs-keyword">if</span>(fd == lfd)&#123;<br>                <span class="hljs-comment">//建立新连接accept</span><br>                accpetClient(lfd,epfd);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">// 读数据</span><br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;=============before recvHttpRequest=============\n&quot;</span>);<br>                recvHttpRequest(fd,epfd);<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;=============after recvHttpRequest=============\n&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">accpetClient</span><span class="hljs-params">(<span class="hljs-type">int</span> lfd,<span class="hljs-type">int</span> epfd)</span>&#123;<br>    <span class="hljs-comment">// 1. 建立连接</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">cliaddr</span>;</span><br>    <span class="hljs-type">socklen_t</span> len = <span class="hljs-keyword">sizeof</span>(cliaddr);<br>    cliaddr.sin_family = AF_INET;<br>    <span class="hljs-type">int</span> cfd = accept(lfd,(<span class="hljs-keyword">struct</span> sockaddr*)&amp;cliaddr,&amp;len);<br>    <span class="hljs-keyword">if</span>(cfd == <span class="hljs-number">-1</span>)&#123;<br>        perror(<span class="hljs-string">&quot;accept error&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-type">char</span> ip[<span class="hljs-number">16</span>]=<span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;new client ip=%s port=%d\n&quot;</span>,<br>    inet_ntop(AF_INET, &amp;cliaddr.sin_addr.s_addr,ip,<span class="hljs-number">16</span>),ntohs(cliaddr.sin_port));<br>    <br>    <span class="hljs-comment">// 2. 设置cfd为非阻塞</span><br>    <span class="hljs-type">int</span> flag = fcntl(cfd,F_GETFL);<br>    flag |= O_NONBLOCK;<br>    fcntl(cfd,F_SETFL,flag);<br><br>    <span class="hljs-comment">// 3. cfd添加到epoll</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epoll_event</span> <span class="hljs-title">ev</span>;</span><br>    ev.data.fd = cfd;<br>    <span class="hljs-comment">// 边沿非阻塞模式</span><br>    ev.events = EPOLLIN | EPOLLET;      <span class="hljs-comment">//边沿模式</span><br><br>    <span class="hljs-type">int</span> ret = epoll_ctl(epfd,EPOLL_CTL_ADD,cfd,&amp;ev);<br>    <span class="hljs-keyword">if</span>(ret == <span class="hljs-number">-1</span>)&#123;<br>        perror(<span class="hljs-string">&quot;epoll_ctl error&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">recvHttpRequest</span><span class="hljs-params">(<span class="hljs-type">int</span> cfd,<span class="hljs-type">int</span> epfd)</span>&#123;<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">4096</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-type">char</span> tmp[<span class="hljs-number">1024</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-type">int</span> len = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> total = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 1. 接收数据</span><br>    <span class="hljs-keyword">while</span>((len = recv(cfd,tmp,<span class="hljs-keyword">sizeof</span>(tmp),<span class="hljs-number">0</span>)) &gt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">if</span>(total + len &lt; <span class="hljs-keyword">sizeof</span>(buf))&#123;<br>            <span class="hljs-built_in">memcpy</span>(buf + total,tmp,len);<br>        &#125;<br>        total += len;<br>    &#125;<br><br>    <span class="hljs-comment">// 2. 判断数据是否接受完毕</span><br>    <span class="hljs-keyword">if</span>(len == <span class="hljs-number">-1</span> &amp;&amp; errno == EAGAIN)&#123;<br>        <span class="hljs-comment">// 解析请求行   </span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19</span><br><span class="hljs-comment">        G E T   / 1 . t x t H  T  T  P  /  1  .  1  /r /n</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-type">char</span>* pt = <span class="hljs-built_in">strstr</span>(buf,<span class="hljs-string">&quot;\r\n&quot;</span>);  <span class="hljs-comment">//大字符串找小字符串</span><br>        <span class="hljs-type">int</span> reqLen = pt - buf;<br>        buf[reqLen] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>        parseRequestLine(buf,cfd);<br><br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(len == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-comment">// 客户端断开连接</span><br>        epoll_ctl(epfd,EPOLL_CTL_DEL,cfd,<span class="hljs-literal">NULL</span>);<br>        close(cfd);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        perror(<span class="hljs-string">&quot;recv error&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">parseRequestLine</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* line,<span class="hljs-type">int</span> cfd)</span>&#123;<br>    <span class="hljs-comment">// 1. 拆分http请求行   get /xxx/1.jpg http/1.1</span><br>    <span class="hljs-type">char</span> method[<span class="hljs-number">12</span>];    <span class="hljs-comment">// 方法</span><br>    <span class="hljs-type">char</span> path[<span class="hljs-number">1024</span>];    <span class="hljs-comment">// 路径</span><br>    <span class="hljs-type">char</span> protocol[<span class="hljs-number">12</span>];  <span class="hljs-comment">// 协议</span><br>    <span class="hljs-built_in">sscanf</span>(line,<span class="hljs-string">&quot;%[^ ] %[^ ] %[^ ]&quot;</span>,method,path,protocol);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;method = %s, path = %s, protocol = %s\n&quot;</span>, method, path, protocol);<br><br>    <span class="hljs-comment">// 判断是否是get请求</span><br>    <span class="hljs-keyword">if</span>(strcasecmp(method,<span class="hljs-string">&quot;get&quot;</span>) != <span class="hljs-number">0</span>)&#123;     <span class="hljs-comment">//不区分大小写</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 转码 将不能识别的中文乱码 -&gt; 中文</span><br>    <span class="hljs-comment">// 解码 %23 %34 %5f</span><br>    decode_str(path, path);<br><br>    <span class="hljs-comment">// 2. 处理客户端请求的静态资源</span><br>    <span class="hljs-type">char</span>* file = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-comment">// 如果没有指定访问的资源, 默认显示资源目录中的内容</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(path,<span class="hljs-string">&quot;/&quot;</span>) == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-comment">// file的值, 资源目录的当前位置</span><br>        file = <span class="hljs-string">&quot;./&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">// 去掉path中的/ 获取访问文件名</span><br>        file = path + <span class="hljs-number">1</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 3. 获取文件属性</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> <span class="hljs-title">st</span>;</span><br>    <span class="hljs-type">int</span> ret = stat(file,&amp;st);<br>    <span class="hljs-keyword">if</span>(ret == <span class="hljs-number">-1</span>)&#123;<br>        <span class="hljs-comment">// 文件不存在--回复404</span><br>        sendHeadMsg(cfd,<span class="hljs-number">404</span>,<span class="hljs-string">&quot;Not Found&quot;</span>,get_file_type(<span class="hljs-string">&quot;.html&quot;</span>),<span class="hljs-number">-1</span>);<br>        sendFile(<span class="hljs-string">&quot;404.html&quot;</span>,cfd);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">// 判断文件类型（判断是目录还是文件）</span><br>    <span class="hljs-keyword">if</span>(S_ISDIR(st.st_mode))&#123;    <span class="hljs-comment">// 目录</span><br>        <span class="hljs-comment">// 把目录发给客户端</span><br>         sendHeadMsg(cfd,<span class="hljs-number">200</span>,<span class="hljs-string">&quot;OK&quot;</span>,get_file_type(<span class="hljs-string">&quot;.html&quot;</span>),<span class="hljs-number">-1</span>);<br>         sendDir(file,cfd);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">// 把文件内容发给客户端</span><br>        sendHeadMsg(cfd,<span class="hljs-number">200</span>,<span class="hljs-string">&quot;OK&quot;</span>,get_file_type(file),st.st_size);<br>        sendFile(file,cfd);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">sendHeadMsg</span><span class="hljs-params">(<span class="hljs-type">int</span> cfd,<span class="hljs-type">int</span> status,<span class="hljs-type">const</span> <span class="hljs-type">char</span>* desrc,<span class="hljs-type">const</span> <span class="hljs-type">char</span>* type,<span class="hljs-type">int</span> length)</span>&#123;<br>    <span class="hljs-comment">// 状态行</span><br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">4096</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-built_in">sprintf</span>(buf,<span class="hljs-string">&quot;http/1.1 %d %s \r\n&quot;</span>,status,desrc);<br>    <span class="hljs-comment">// 消息报头</span><br>    <span class="hljs-built_in">sprintf</span>(buf + <span class="hljs-built_in">strlen</span>(buf),<span class="hljs-string">&quot;Content-Type: %s\r\n&quot;</span>,type);<br>    <span class="hljs-built_in">sprintf</span>(buf + <span class="hljs-built_in">strlen</span>(buf),<span class="hljs-string">&quot;Content-Length: %d\r\n&quot;</span>,length);<br><br>    send(cfd,buf,<span class="hljs-built_in">strlen</span>(buf),<span class="hljs-number">0</span>);<br>     <span class="hljs-comment">// 空行</span><br>    send(cfd, <span class="hljs-string">&quot;\r\n&quot;</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">sendFile</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* filename,<span class="hljs-type">int</span> cfd)</span>&#123;<br><br>    <span class="hljs-comment">// 1. 打开文件</span><br>    <span class="hljs-type">int</span> fd = open(filename,O_RDONLY);<br>    assert(fd &gt; <span class="hljs-number">0</span>);     <span class="hljs-comment">// 断言</span><br>    <span class="hljs-comment">// if(fd == -1)&#123;</span><br>    <span class="hljs-comment">//     perror(&quot;open error&quot;);</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// 2. 循环读文件</span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 1</span><br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">4096</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-type">int</span> len = <span class="hljs-number">0</span>, ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>((len = read(fd,buf,<span class="hljs-keyword">sizeof</span>(buf))) &gt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-comment">// 发送读出的数据</span><br>        ret = send(cfd,buf,len,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span>(ret == <span class="hljs-number">-1</span>)&#123;<br>            <span class="hljs-keyword">if</span>(errno = EAGAIN)&#123;<br>                perror(<span class="hljs-string">&quot;send error:&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (errno == EINTR) &#123;<br>                perror(<span class="hljs-string">&quot;send error:&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                perror(<span class="hljs-string">&quot;send error:&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    <span class="hljs-type">off_t</span> offset = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> size = lseek(fd,<span class="hljs-number">0</span>,SEEK_END);<br>    lseek(fd,<span class="hljs-number">0</span>,SEEK_SET);<br>    <span class="hljs-keyword">while</span>(offset &lt; size)&#123;<br>        <span class="hljs-type">int</span> ret = sendfile(cfd,fd,&amp;offset,size);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ret value: %d\n&quot;</span>,ret);<br>        <span class="hljs-keyword">if</span>(ret == <span class="hljs-number">-1</span> &amp;&amp; errno == EAGAIN)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;没数据。。。\n&quot;</span>);<br>            perror(<span class="hljs-string">&quot;snedfile&quot;</span>);<br>            <br>        &#125;<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    close(fd);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 发送目录内容</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sendDir</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* dirname, <span class="hljs-type">int</span> cfd)</span><br>&#123;<br>   <br>   <span class="hljs-comment">// 拼接一个html页面&lt;table&gt;&lt;/table&gt;</span><br>   <span class="hljs-type">char</span> buf[<span class="hljs-number">4096</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>   <br>   <span class="hljs-built_in">sprintf</span>(buf,<span class="hljs-string">&quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;目录名：%s&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;table&gt;&quot;</span>,dirname);<br>   <span class="hljs-comment">//sprintf(buf + strlen(buf),&quot;&lt;body&gt;&lt;h1&gt;当前目录：%s&lt;/h1&gt;&lt;table&gt;&quot;,dirname);</span><br><br>    <span class="hljs-comment">// 目录项二级指针</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dirent</span>** <span class="hljs-title">ptr</span>;</span><br>    <span class="hljs-type">int</span> num = scandir(dirname,&amp;ptr,<span class="hljs-literal">NULL</span>,alphasort);<br><br>    <span class="hljs-comment">// 遍历目录</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; i++)&#123;<br>        <span class="hljs-comment">// 取出文件名 namelist 指向的是一个指针数组 struct dirent* tmp[]</span><br>        <span class="hljs-type">char</span>* name = ptr[i]-&gt;d_name;<br>        <span class="hljs-type">char</span> subPath[<span class="hljs-number">1024</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>        <span class="hljs-comment">// 拼接文件袋完整路径</span><br>        <span class="hljs-built_in">sprintf</span>(subPath,<span class="hljs-string">&quot;%s/%s&quot;</span>,dirname,name);<br>        <br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> <span class="hljs-title">st</span>;</span><br>        stat(subPath,&amp;st);<br><br>        <span class="hljs-type">char</span> enstr[<span class="hljs-number">1024</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>        <span class="hljs-comment">// 编码生成 %E5 %A7 之类的东西</span><br>        encode_str(enstr, <span class="hljs-keyword">sizeof</span>(enstr), name);<br><br>        <span class="hljs-comment">// 如果是文件</span><br>        <span class="hljs-keyword">if</span>(S_ISREG(st.st_mode)) &#123;       <br>            <span class="hljs-built_in">sprintf</span>(buf+<span class="hljs-built_in">strlen</span>(buf), <br>                    <span class="hljs-string">&quot;&lt;tr&gt;&lt;td&gt;&lt;a href=\&quot;%s\&quot;&gt;%s&lt;/a&gt;&lt;/td&gt;&lt;td&gt;%ld&lt;/td&gt;&lt;/tr&gt;&quot;</span>,<br>                    enstr, name, (<span class="hljs-type">long</span>)st.st_size);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(S_ISDIR(st.st_mode)) &#123;<span class="hljs-comment">// 如果是目录       </span><br>            <span class="hljs-built_in">sprintf</span>(buf+<span class="hljs-built_in">strlen</span>(buf), <br>                    <span class="hljs-string">&quot;&lt;tr&gt;&lt;td&gt;&lt;a href=\&quot;%s/\&quot;&gt;%s/&lt;/a&gt;&lt;/td&gt;&lt;td&gt;%ld&lt;/td&gt;&lt;/tr&gt;&quot;</span>,<br>                    enstr, name, (<span class="hljs-type">long</span>)st.st_size);<br>        &#125;<br>        <span class="hljs-type">int</span> ret = send(cfd, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span> (ret == <span class="hljs-number">-1</span>) &#123;<br>            <span class="hljs-keyword">if</span> (errno == EAGAIN) &#123;<br>                perror(<span class="hljs-string">&quot;send error:&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (errno == EINTR) &#123;<br>                perror(<span class="hljs-string">&quot;send error:&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                perror(<span class="hljs-string">&quot;send error:&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(buf));<br>        <span class="hljs-comment">// 字符串拼接</span><br>        <span class="hljs-built_in">free</span>(ptr[i]);<br>    &#125;  <br>    <br>    <span class="hljs-comment">// 字符串拼接</span><br>    <span class="hljs-comment">//memset(buf, 0, sizeof(buf));</span><br>    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span>);<br>    send(cfd, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;dir message send OK!!!!\n&quot;</span>); <br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br>    <span class="hljs-comment">// 打开目录</span><br>    DIR* dir = opendir(dirname);<br>    <span class="hljs-keyword">if</span>(dir == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        perror(<span class="hljs-string">&quot;opendir error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 读目录</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dirent</span>* <span class="hljs-title">ptr</span> =</span> <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">while</span>( (ptr = readdir(dir)) != <span class="hljs-literal">NULL</span> )<br>    &#123;<br>        <span class="hljs-type">char</span>* name = ptr-&gt;d_name;<br>    &#125;<br>    closedir(dir);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-built_in">free</span>(ptr);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *  这里的内容是处理%20之类的东西！是&quot;解码&quot;过程。</span><br><span class="hljs-comment"> *  %20 URL编码中的‘ ’(space)</span><br><span class="hljs-comment"> *  %21 &#x27;!&#x27; %22 &#x27;&quot;&#x27; %23 &#x27;#&#x27; %24 &#x27;$&#x27;</span><br><span class="hljs-comment"> *  %25 &#x27;%&#x27; %26 &#x27;&amp;&#x27; %27 &#x27;&#x27;&#x27; %28 &#x27;(&#x27;......</span><br><span class="hljs-comment"> *  相关知识html中的‘ ’(space)是&amp;nbsp</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">// 16进制数转化为10进制</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">hexit</span><span class="hljs-params">(<span class="hljs-type">char</span> c)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>)<br>        <span class="hljs-keyword">return</span> c - <span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-keyword">if</span> (c &gt;= <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;f&#x27;</span>)<br>        <span class="hljs-keyword">return</span> c - <span class="hljs-string">&#x27;a&#x27;</span> + <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">if</span> (c &gt;= <span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;F&#x27;</span>)<br>        <span class="hljs-keyword">return</span> c - <span class="hljs-string">&#x27;A&#x27;</span> + <span class="hljs-number">10</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">encode_str</span><span class="hljs-params">(<span class="hljs-type">char</span>* to, <span class="hljs-type">int</span> tosize, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* from)</span><br>&#123;<br>    <span class="hljs-type">int</span> tolen;<br><br>    <span class="hljs-keyword">for</span> (tolen = <span class="hljs-number">0</span>; *from != <span class="hljs-string">&#x27;\0&#x27;</span> &amp;&amp; tolen + <span class="hljs-number">4</span> &lt; tosize; ++from) &#123;    <br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isalnum</span>(*from) || <span class="hljs-built_in">strchr</span>(<span class="hljs-string">&quot;/_.-~&quot;</span>, *from) != (<span class="hljs-type">char</span>*)<span class="hljs-number">0</span>) &#123;      <br>            *to = *from;<br>            ++to;<br>            ++tolen;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">sprintf</span>(to, <span class="hljs-string">&quot;%%%02x&quot;</span>, (<span class="hljs-type">int</span>) *from &amp; <span class="hljs-number">0xff</span>);<br>            to += <span class="hljs-number">3</span>;<br>            tolen += <span class="hljs-number">3</span>;<br>        &#125;<br>    &#125;<br>    *to = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">decode_str</span><span class="hljs-params">(<span class="hljs-type">char</span> *to, <span class="hljs-type">char</span> *from)</span><br>&#123;<br>    <span class="hljs-keyword">for</span> ( ; *from != <span class="hljs-string">&#x27;\0&#x27;</span>; ++to, ++from  ) &#123;     <br>        <span class="hljs-keyword">if</span> (from[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;%&#x27;</span> &amp;&amp; <span class="hljs-built_in">isxdigit</span>(from[<span class="hljs-number">1</span>]) &amp;&amp; <span class="hljs-built_in">isxdigit</span>(from[<span class="hljs-number">2</span>])) &#123;       <br>            *to = hexit(from[<span class="hljs-number">1</span>])*<span class="hljs-number">16</span> + hexit(from[<span class="hljs-number">2</span>]);<br>            from += <span class="hljs-number">2</span>;                      <br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            *to = *from;<br>        &#125;<br>    &#125;<br>    *to = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>&#125;<br><br><span class="hljs-comment">// 通过文件名获取文件的类型</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">get_file_type</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name)</span><br>&#123;<br>    <span class="hljs-type">char</span>* dot;<br><br>    <span class="hljs-comment">// 自右向左查找‘.’字符, 如不存在返回NULL</span><br>    dot = <span class="hljs-built_in">strrchr</span>(name, <span class="hljs-string">&#x27;.&#x27;</span>);   <br>    <span class="hljs-keyword">if</span> (dot == <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;text/plain; charset=utf-8&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(dot, <span class="hljs-string">&quot;.html&quot;</span>) == <span class="hljs-number">0</span> || <span class="hljs-built_in">strcmp</span>(dot, <span class="hljs-string">&quot;.htm&quot;</span>) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(dot, <span class="hljs-string">&quot;.jpg&quot;</span>) == <span class="hljs-number">0</span> || <span class="hljs-built_in">strcmp</span>(dot, <span class="hljs-string">&quot;.jpeg&quot;</span>) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;image/jpeg&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(dot, <span class="hljs-string">&quot;.gif&quot;</span>) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;image/gif&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(dot, <span class="hljs-string">&quot;.png&quot;</span>) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;image/png&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(dot, <span class="hljs-string">&quot;.css&quot;</span>) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;text/css&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(dot, <span class="hljs-string">&quot;.au&quot;</span>) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;audio/basic&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>( dot, <span class="hljs-string">&quot;.wav&quot;</span> ) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;audio/wav&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(dot, <span class="hljs-string">&quot;.avi&quot;</span>) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;video/x-msvideo&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(dot, <span class="hljs-string">&quot;.mov&quot;</span>) == <span class="hljs-number">0</span> || <span class="hljs-built_in">strcmp</span>(dot, <span class="hljs-string">&quot;.qt&quot;</span>) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;video/quicktime&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(dot, <span class="hljs-string">&quot;.mpeg&quot;</span>) == <span class="hljs-number">0</span> || <span class="hljs-built_in">strcmp</span>(dot, <span class="hljs-string">&quot;.mpe&quot;</span>) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;video/mpeg&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(dot, <span class="hljs-string">&quot;.vrml&quot;</span>) == <span class="hljs-number">0</span> || <span class="hljs-built_in">strcmp</span>(dot, <span class="hljs-string">&quot;.wrl&quot;</span>) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;model/vrml&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(dot, <span class="hljs-string">&quot;.midi&quot;</span>) == <span class="hljs-number">0</span> || <span class="hljs-built_in">strcmp</span>(dot, <span class="hljs-string">&quot;.mid&quot;</span>) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;audio/midi&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(dot, <span class="hljs-string">&quot;.mp3&quot;</span>) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;audio/mpeg&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(dot, <span class="hljs-string">&quot;.ogg&quot;</span>) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;application/ogg&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(dot, <span class="hljs-string">&quot;.pac&quot;</span>) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;application/x-ns-proxy-autoconfig&quot;</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;text/plain; charset=utf-8&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="epoll-web-h"><a href="#epoll-web-h" class="headerlink" title="epoll_web.h"></a><strong>epoll_web.h</strong></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> _EPOLL_SEVER_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _EPOLL_SEVER_H</span><br><br><span class="hljs-comment">// 初始化监听的套接字</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">initListenFd</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> port)</span>;<br><br><span class="hljs-comment">//启动epoll</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">epollrun</span><span class="hljs-params">(<span class="hljs-type">int</span> lfd)</span>;<br><br><span class="hljs-comment">// 建立新连接</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">accpetClient</span><span class="hljs-params">(<span class="hljs-type">int</span> lfd,<span class="hljs-type">int</span> epfd)</span>;<br><br><span class="hljs-comment">// 读数据</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">recvHttpRequest</span><span class="hljs-params">(<span class="hljs-type">int</span> fd,<span class="hljs-type">int</span> epfd)</span>;<br><br><span class="hljs-comment">// 解析请求行</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">parseRequestLine</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* line,<span class="hljs-type">int</span> cfd)</span>;<br><br><span class="hljs-comment">// 发送响应头（状态行+响应头）</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sendHeadMsg</span><span class="hljs-params">(<span class="hljs-type">int</span> cfd,<span class="hljs-type">int</span> status,<span class="hljs-type">const</span> <span class="hljs-type">char</span>* desrc,<span class="hljs-type">const</span> <span class="hljs-type">char</span>* type,<span class="hljs-type">int</span> length)</span>;<br><br><span class="hljs-comment">// 发送文件</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sendFile</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* filename,<span class="hljs-type">int</span> cfd)</span>;<br><br><span class="hljs-comment">// 发送目录</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sendDir</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* dirName,<span class="hljs-type">int</span> cfd)</span>;<br><br><span class="hljs-comment">// 通过文件名获取文件的类型</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">get_file_type</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">hexit</span><span class="hljs-params">(<span class="hljs-type">char</span> c)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">encode_str</span><span class="hljs-params">(<span class="hljs-type">char</span>* to, <span class="hljs-type">int</span> tosize, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* from)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">decode_str</span><span class="hljs-params">(<span class="hljs-type">char</span> *to, <span class="hljs-type">char</span> *from)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br></code></pre></td></tr></table></figure><h4 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;epoll_web.h&quot;</span></span><br><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span>&#123;<br>    <span class="hljs-keyword">if</span>(argc &lt; <span class="hljs-number">3</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;./a.out port path\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-comment">// 采用指定端口</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> port = atoi(argv[<span class="hljs-number">1</span>]);<br><br>    <span class="hljs-comment">// 修改进程工作目录，方便后续操作</span><br>    <span class="hljs-type">int</span> ret = chdir(argv[<span class="hljs-number">2</span>]);<br>    <span class="hljs-keyword">if</span>(ret == <span class="hljs-number">-1</span>)&#123;<br>        perror(<span class="hljs-string">&quot;chdir error&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 初始化监听套接字</span><br>    <span class="hljs-type">int</span> lfd = initListenFd(port);<br>    <span class="hljs-comment">// 启动epoll模型</span><br>    epollrun(lfd);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>c</tag>
      
      <tag>网络编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Qt开发工作上的需求</title>
    <link href="/2023/10/26/%E4%BD%BF%E7%94%A8Qt%E5%BC%80%E5%8F%91%E5%B7%A5%E4%BD%9C%E4%B8%8A%E7%9A%84%E9%9C%80%E6%B1%82/"/>
    <url>/2023/10/26/%E4%BD%BF%E7%94%A8Qt%E5%BC%80%E5%8F%91%E5%B7%A5%E4%BD%9C%E4%B8%8A%E7%9A%84%E9%9C%80%E6%B1%82/</url>
    
    <content type="html"><![CDATA[<p>记录最近工作设及到一些关于qt编程的相关内容</p><span id="more"></span><h3 id="功能1：鼠标点击图片显示坐标和像素"><a href="#功能1：鼠标点击图片显示坐标和像素" class="headerlink" title="功能1：鼠标点击图片显示坐标和像素"></a>功能1：鼠标点击图片显示坐标和像素</h3><p>最近工作设及到一些关于qt编程的工作，主要内容就是在一个<code>QGraphicsView</code>上显示了一个<code>QGraphicsPixmapItem</code>的相机监控的图片，并用鼠标点击图片显示坐标和像素。</p><p>最初在网上找到的解决方案是重写<code>mousePressEvent()</code>方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ImgHelper::mousePressEvent</span><span class="hljs-params">(QGraphicsSceneMouseEvent* event)</span></span><br><span class="hljs-function"></span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Item: (&quot;</span> &lt;&lt; event-&gt;<span class="hljs-built_in">scenePos</span>().<span class="hljs-built_in">x</span>() &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; event-&gt;<span class="hljs-built_in">scenePos</span>().<span class="hljs-built_in">y</span>() &lt;&lt; <span class="hljs-string">&#x27;)&#x27;</span> &lt;&lt; std::endl; <br>&#125;<br><br></code></pre></td></tr></table></figure><p>测试发现未响应鼠标事件，网上找到说：重写鼠标点击事件函数时发现鼠标点击事件在子类化后的<code>QGraphicsScene</code>中被响应，但是子类化后的<code>QGraphicsPixmapItem</code>无法响应。<code>QGraphicsView</code>的事件传递机制的顺序是<code>View-&gt;Scene-&gt;Item</code>，也就是说事件被子类化的<code>QGraphicsScene</code>吞没了，没有传递到下一级的<code>item</code>。<br>解决方案，在子类化的<code>QGraphicsScene</code>中重写<code>mousePressEvent()</code>方法内部一定要要记得调用：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">QGraphicsScene::<span class="hljs-built_in">mousePressEvent</span>(event);<br></code></pre></td></tr></table></figure><p>注意，要想返回图像坐标系的位置，就需要在子类化的<code>QGraphicsPixmapItem</code>中调用<code>scenePos()</code>函数。即使放大图像，点击图像中相同位置也会返回相同坐标结果。</p><p>结果发现还是没有反应，还有一种说法就是加上下面这句话</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//使能QGraphcisView控件的鼠标跟踪</span><br>view-&gt;<span class="hljs-built_in">setMouseTracking</span>(<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><p>最后尝试把<code>mousePressEvent</code>函数在最上层的<code>mainwindow</code>中重写并使能鼠标，有效果，但是坐标并不是我想要的效果，现在的坐标系是整个界面的，我想要的是图像的坐标，然后能通过图像控件的位置和长宽进行筛选，但是获得的图像是经过qt自适应缩放在<code>600X600</code>的容器里的。</p><p>在一筹莫展的时候，突然看到<code>eventFilter</code>事件过滤器。</p><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/20210320141253167.png" alt="在这里插入图片描述"></p><p>原本事件应该直接发送给“组件对象”，但是现在却先将事件发送给“过滤器对象”，经过过滤的事件再发给“组件对象”。</p><p><strong>事件过滤器的操作：</strong></p><ol><li>首先给需要添加事件过滤器的部件<strong>注册监听对象</strong>；<br><code>对象名-&gt;installEventFilter(true);</code></li><li>重写<code>eventFilter(QObject *obj, QEvent *event)</code>函数进行处理。<!-- more -->首先使用参数<code>obj</code>进行与绑定的控件对象进行判断，是否与其相等；然后在使用参数<code>event-&gt;type()</code>的返回值与枚举鼠标或者键盘进行判断；最后将<code>event</code>转换为鼠标事件对象或者键盘对象事件，就可以进行操作了。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">ImgHelper::eventFilter</span><span class="hljs-params">(QObject *watched, QEvent *event)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//判断信号是不是来自QGraphicsView</span><br>    <span class="hljs-keyword">if</span>(watched == view-&gt;<span class="hljs-built_in">viewport</span>())&#123;<br>        <span class="hljs-keyword">switch</span> (event-&gt;<span class="hljs-built_in">type</span>()) &#123;<br>        <span class="hljs-comment">//鼠标移动事件</span><br>        <span class="hljs-keyword">case</span>  QEvent::MouseMove:<br>        &#123;<br>            QMouseEvent *m_event = (QMouseEvent*)event;<br><br><br>            <span class="hljs-keyword">if</span>(pixmapItem == <span class="hljs-literal">NULL</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>           <span class="hljs-comment">// QPoint point = m_event-&gt;pos();</span><br><br>            QPixmap pix= pixmapItem-&gt;<span class="hljs-built_in">pixmap</span>();<br>            QImage img = pix.<span class="hljs-built_in">toImage</span>();<br>          <span class="hljs-comment">//  QSize size = pixmapItem-&gt;pixmap().size();</span><br><br><br>            QPoint point = m_event-&gt;<span class="hljs-built_in">pos</span>();<br>           <span class="hljs-comment">// qDebug()&lt;&lt;&quot;point:&quot;&lt;&lt;point&lt;&lt;endl;</span><br>            <span class="hljs-comment">// 坐标系转换 - 视图 -&gt; 场景</span><br>            QPointF scenePoint = view-&gt;<span class="hljs-built_in">mapToScene</span>(point);<br>            <span class="hljs-comment">//qDebug()&lt;&lt;&quot;scenePoint:&quot;&lt;&lt;scenePoint&lt;&lt;endl;</span><br>            <span class="hljs-comment">// 坐标系转换 - 场景 -&gt; 图元</span><br>            QPointF itempoint = pixmapItem-&gt;<span class="hljs-built_in">mapFromScene</span>(scenePoint);<br>           <span class="hljs-comment">// qDebug()&lt;&lt;&quot;itempoint:&quot;&lt;&lt;itempoint&lt;&lt;endl;</span><br>            QString str;<br>            <span class="hljs-comment">// 判断所选点是否在图像范围内</span><br>            <span class="hljs-keyword">if</span>(itempoint.<span class="hljs-built_in">x</span>()&gt;=<span class="hljs-number">0</span> &amp;&amp;itempoint.<span class="hljs-built_in">x</span>()&lt;=pix.<span class="hljs-built_in">width</span>() &amp;&amp; itempoint.<span class="hljs-built_in">y</span>()&gt;=<span class="hljs-number">0</span> &amp;&amp; itempoint.<span class="hljs-built_in">y</span>()&lt;= pix.<span class="hljs-built_in">height</span>())&#123;<br>                QRgb pixColor = img.<span class="hljs-built_in">pixel</span>(itempoint.<span class="hljs-built_in">x</span>(),itempoint.<span class="hljs-built_in">y</span>());<br>               <span class="hljs-comment">// qDebug()&lt;&lt;pixColor&lt;&lt;&quot; &quot;&lt;&lt;qRed(pixColor)&lt;&lt;&quot; &quot;&lt;&lt;qGreen(pixColor)&lt;&lt;&quot; &quot;&lt;&lt;qBlue(pixColor)&lt;&lt;endl;</span><br>                str = <span class="hljs-built_in">QString</span>(<span class="hljs-string">&quot;X:%1\nY:%2\nR:%3\nG:%4\nB:%5\n&quot;</span>).<span class="hljs-built_in">arg</span>(QString::<span class="hljs-built_in">number</span>(itempoint.<span class="hljs-built_in">x</span>(),<span class="hljs-string">&#x27;f&#x27;</span>,<span class="hljs-number">1</span>))<br>                                                                .<span class="hljs-built_in">arg</span>(QString::<span class="hljs-built_in">number</span>(itempoint.<span class="hljs-built_in">y</span>(),<span class="hljs-string">&#x27;f&#x27;</span>,<span class="hljs-number">1</span>))<br>                                                                .<span class="hljs-built_in">arg</span>(<span class="hljs-built_in">qRed</span>(pixColor))<br>                                                                .<span class="hljs-built_in">arg</span>(<span class="hljs-built_in">qGreen</span>(pixColor))<br>                                                                .<span class="hljs-built_in">arg</span>(<span class="hljs-built_in">qBlue</span>(pixColor)).<span class="hljs-built_in">toLocal8Bit</span>();<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                str = <span class="hljs-string">&quot;&quot;</span>;<br>            &#125;<br>            img_xy_pix-&gt;<span class="hljs-built_in">setText</span>(str);<br>            img_xy_pix-&gt;<span class="hljs-built_in">setStyleSheet</span>(<span class="hljs-string">&quot;color:red;&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">// 鼠标点击事件</span><br>        <span class="hljs-keyword">case</span> QEvent::MouseButtonPress:<br>        &#123;<br>            <span class="hljs-keyword">if</span>(pixmapItem == <span class="hljs-literal">NULL</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            QMouseEvent *m_event = (QMouseEvent*)event;<br>            <span class="hljs-comment">// 左键点击确定起点</span><br>            <span class="hljs-keyword">if</span>(m_event-&gt;<span class="hljs-built_in">button</span>() == Qt::LeftButton )&#123;<br><br>             <span class="hljs-comment">//   QPixmap pix= pixmapItem-&gt;pixmap();</span><br>                <span class="hljs-function">QPainter <span class="hljs-title">painter</span><span class="hljs-params">(view-&gt;viewport())</span></span>;<br>                painter.<span class="hljs-built_in">setPen</span>(<span class="hljs-built_in">QPen</span>(Qt::blue,<span class="hljs-number">1</span>));<br>              <span class="hljs-comment">//  QImage img = pix.toImage();</span><br>              <span class="hljs-comment">//  QSize size = pixmapItem-&gt;pixmap().size();</span><br>               <span class="hljs-comment">// qDebug()&lt;&lt;&quot;size:&quot;&lt;&lt;size&lt;&lt;endl;</span><br>                QPoint point = m_event-&gt;<span class="hljs-built_in">pos</span>();<br>               <span class="hljs-comment">// qDebug()&lt;&lt;&quot;point:&quot;&lt;&lt;point&lt;&lt;endl;</span><br>                QPointF scenePoint = view-&gt;<span class="hljs-built_in">mapToScene</span>(point);<br>                <span class="hljs-comment">//qDebug()&lt;&lt;&quot;scenePoint:&quot;&lt;&lt;scenePoint&lt;&lt;endl;</span><br>                QPointF itempoint = pixmapItem-&gt;<span class="hljs-built_in">mapFromScene</span>(scenePoint);<br>                startPoint = itempoint;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">// 送开鼠标，确定终点</span><br>        <span class="hljs-keyword">case</span> QEvent::MouseButtonRelease:<br>        &#123;<br>            <span class="hljs-keyword">if</span>(pixmapItem == <span class="hljs-literal">NULL</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            QMouseEvent *m_event = (QMouseEvent*)event;<br>            <span class="hljs-keyword">if</span>(m_event-&gt;<span class="hljs-built_in">button</span>() == Qt::LeftButton )&#123;<br><br><span class="hljs-comment">//                QPixmap pix= pixmapItem-&gt;pixmap();</span><br>                <span class="hljs-function">QPainter <span class="hljs-title">painter</span><span class="hljs-params">(view-&gt;viewport())</span></span>;<br>                painter.<span class="hljs-built_in">setPen</span>(<span class="hljs-built_in">QPen</span>(Qt::blue,<span class="hljs-number">1</span>));<br>              <span class="hljs-comment">//  QImage img = pix.toImage();</span><br>              <span class="hljs-comment">//  QSize size = pixmapItem-&gt;pixmap().size();</span><br>               <span class="hljs-comment">// qDebug()&lt;&lt;&quot;size:&quot;&lt;&lt;size&lt;&lt;endl;</span><br>                QPoint point = m_event-&gt;<span class="hljs-built_in">pos</span>();<br>               <span class="hljs-comment">// qDebug()&lt;&lt;&quot;point:&quot;&lt;&lt;point&lt;&lt;endl;</span><br>                QPointF scenePoint = view-&gt;<span class="hljs-built_in">mapToScene</span>(point);<br>                <span class="hljs-comment">//qDebug()&lt;&lt;&quot;scenePoint:&quot;&lt;&lt;scenePoint&lt;&lt;endl;</span><br>                QPointF itempoint = pixmapItem-&gt;<span class="hljs-built_in">mapFromScene</span>(scenePoint);<br>                QPointF endPoint = itempoint;<br>                <span class="hljs-keyword">if</span>(startPoint.<span class="hljs-built_in">x</span>() != <span class="hljs-number">0</span> &amp;&amp; startPoint.<span class="hljs-built_in">y</span>() != <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-function">QRectF <span class="hljs-title">rectangle</span><span class="hljs-params">(startPoint.x(),startPoint.y(),endPoint.x()-startPoint.x(),endPoint.y()-startPoint.y())</span></span>;<br>                    painter.<span class="hljs-built_in">drawRect</span>(rectangle);<br>                    painter.<span class="hljs-built_in">setPen</span>(<span class="hljs-built_in">QPen</span>(Qt::red,<span class="hljs-number">1</span>));<br>                    rects = scene-&gt;<span class="hljs-built_in">addRect</span>(rectangle,rectPen);<br><span class="hljs-comment">//                    float rectInfo[8];</span><br><span class="hljs-comment">//                    rectcounts++;</span><br><span class="hljs-comment">//                    rectInfo[0] = rectcounts;</span><br><span class="hljs-comment">//                    float x = (endPoint.x()-startPoint.x()) / 2 + startPoint.x();</span><br><span class="hljs-comment">//                    float y = (endPoint.y()-startPoint.y()) / 2 + startPoint.y();</span><br><span class="hljs-comment">//                    float height;</span><br><span class="hljs-comment">//                    float width;</span><br><span class="hljs-comment">//                    if(endPoint.x()-startPoint.x() &gt; endPoint.y()-startPoint.y())&#123;</span><br><span class="hljs-comment">//                       height = endPoint.x()-startPoint.x();</span><br><span class="hljs-comment">//                       width = endPoint.y()-startPoint.y();</span><br><span class="hljs-comment">//                    &#125;else&#123;</span><br><span class="hljs-comment">//                        width = endPoint.x()-startPoint.x();</span><br><span class="hljs-comment">//                        height = endPoint.y()-startPoint.y();</span><br><span class="hljs-comment">//                    &#125;</span><br>                 <span class="hljs-comment">//   rectInfo[1] = x;</span><br>                 <span class="hljs-comment">//   rectInfo[2] = y;</span><br>                 <span class="hljs-comment">//   rectInfo[3] = height;</span><br>                 <span class="hljs-comment">//      rectInfo[4] = width;</span><br>                  <span class="hljs-comment">//  float angle = -90;</span><br>                 <span class="hljs-comment">//   rectInfo[5] = angle;</span><br><span class="hljs-comment">//                    CassUdpHelper* udpClient = new CassUdpHelper(localPort, this);</span><br>                    <br><span class="hljs-comment">//                     bool flag = false;</span><br>  <br><span class="hljs-comment">//                    int rectCountsAddr = 353345520;</span><br><span class="hljs-comment">//                    flag = udpClient-&gt;writeBytesByModbus(rectCountsAddr, (char*)&amp;rectcounts, sizeof(short), hostIpAddr, hostPort);</span><br><span class="hljs-comment">//                    if(!flag) &#123;</span><br><span class="hljs-comment">//                        delete udpClient;</span><br><span class="hljs-comment">//                         break;</span><br><span class="hljs-comment">//                    &#125;</span><br><span class="hljs-comment">//                    int startAddr = 427778712;</span><br><span class="hljs-comment">//                    flag = udpClient-&gt;writeBytesByModbus(startAddr + sizeof(float)*8 *(rectcounts - 1), (char*)rectInfo, sizeof(float)*8, hostIpAddr, hostPort);</span><br><span class="hljs-comment">//                    if(!flag) &#123;</span><br><span class="hljs-comment">//                        delete udpClient;</span><br><span class="hljs-comment">//                         break;</span><br><span class="hljs-comment">//                    &#125;</span><br><span class="hljs-comment">//                    delete udpClient;</span><br>                    <br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>    &#125;<br><br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="功能2：Qt拖动鼠标画一个矩形"><a href="#功能2：Qt拖动鼠标画一个矩形" class="headerlink" title="功能2：Qt拖动鼠标画一个矩形"></a>功能2：Qt拖动鼠标画一个矩形</h3><p>想要画一个矩形就需要过滤鼠标点击事件，鼠标按下时确定矩形的起点，然后拖动一段距离，松开确定终点。</p><!-- more --><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 鼠标点击事件</span><br>        <span class="hljs-keyword">case</span> QEvent::MouseButtonPress:<br>        &#123;<br>            <span class="hljs-keyword">if</span>(pixmapItem == <span class="hljs-literal">NULL</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            QMouseEvent *m_event = (QMouseEvent*)event;<br>            <span class="hljs-comment">// 左键点击确定起点</span><br>            <span class="hljs-keyword">if</span>(m_event-&gt;<span class="hljs-built_in">button</span>() == Qt::LeftButton )&#123;<br><br>             <span class="hljs-comment">//   QPixmap pix= pixmapItem-&gt;pixmap();</span><br>                <span class="hljs-function">QPainter <span class="hljs-title">painter</span><span class="hljs-params">(view-&gt;viewport())</span></span>;<br>                painter.<span class="hljs-built_in">setPen</span>(<span class="hljs-built_in">QPen</span>(Qt::blue,<span class="hljs-number">1</span>));<br>              <span class="hljs-comment">//  QImage img = pix.toImage();</span><br>              <span class="hljs-comment">//  QSize size = pixmapItem-&gt;pixmap().size();</span><br>               <span class="hljs-comment">// qDebug()&lt;&lt;&quot;size:&quot;&lt;&lt;size&lt;&lt;endl;</span><br>                QPoint point = m_event-&gt;<span class="hljs-built_in">pos</span>();<br>               <span class="hljs-comment">// qDebug()&lt;&lt;&quot;point:&quot;&lt;&lt;point&lt;&lt;endl;</span><br>                QPointF scenePoint = view-&gt;<span class="hljs-built_in">mapToScene</span>(point);<br>                <span class="hljs-comment">//qDebug()&lt;&lt;&quot;scenePoint:&quot;&lt;&lt;scenePoint&lt;&lt;endl;</span><br>                QPointF itempoint = pixmapItem-&gt;<span class="hljs-built_in">mapFromScene</span>(scenePoint);<br>                startPoint = itempoint;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">// 送开鼠标，确定终点</span><br>        <span class="hljs-keyword">case</span> QEvent::MouseButtonRelease:<br>        &#123;<br>            <span class="hljs-keyword">if</span>(pixmapItem == <span class="hljs-literal">NULL</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            QMouseEvent *m_event = (QMouseEvent*)event;<br>            <span class="hljs-keyword">if</span>(m_event-&gt;<span class="hljs-built_in">button</span>() == Qt::LeftButton )&#123;<br><br><span class="hljs-comment">//                QPixmap pix= pixmapItem-&gt;pixmap();</span><br>                <span class="hljs-function">QPainter <span class="hljs-title">painter</span><span class="hljs-params">(view-&gt;viewport())</span></span>;<br>                painter.<span class="hljs-built_in">setPen</span>(<span class="hljs-built_in">QPen</span>(Qt::blue,<span class="hljs-number">1</span>));<br>              <span class="hljs-comment">//  QImage img = pix.toImage();</span><br>              <span class="hljs-comment">//  QSize size = pixmapItem-&gt;pixmap().size();</span><br>               <span class="hljs-comment">// qDebug()&lt;&lt;&quot;size:&quot;&lt;&lt;size&lt;&lt;endl;</span><br>                QPoint point = m_event-&gt;<span class="hljs-built_in">pos</span>();<br>               <span class="hljs-comment">// qDebug()&lt;&lt;&quot;point:&quot;&lt;&lt;point&lt;&lt;endl;</span><br>                QPointF scenePoint = view-&gt;<span class="hljs-built_in">mapToScene</span>(point);<br>                <span class="hljs-comment">//qDebug()&lt;&lt;&quot;scenePoint:&quot;&lt;&lt;scenePoint&lt;&lt;endl;</span><br>                QPointF itempoint = pixmapItem-&gt;<span class="hljs-built_in">mapFromScene</span>(scenePoint);<br>                QPointF endPoint = itempoint;<br>                <span class="hljs-keyword">if</span>(startPoint.<span class="hljs-built_in">x</span>() != <span class="hljs-number">0</span> &amp;&amp; startPoint.<span class="hljs-built_in">y</span>() != <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-function">QRectF <span class="hljs-title">rectangle</span><span class="hljs-params">(startPoint.x(),startPoint.y(),endPoint.x()-startPoint.x(),endPoint.y()-startPoint.y())</span></span>;<br>                    painter.<span class="hljs-built_in">drawRect</span>(rectangle);<br>                    painter.<span class="hljs-built_in">setPen</span>(<span class="hljs-built_in">QPen</span>(Qt::red,<span class="hljs-number">1</span>));<br>                    rects = scene-&gt;<span class="hljs-built_in">addRect</span>(rectangle,rectPen);<br></code></pre></td></tr></table></figure><p>这是在网上看到其他人重写的一个<code>QGraphicsRectItem</code>类，画出来的矩形可以拖动，变形，旋转，使用时只需要导入这个类</p><ul><li><p>mygraphicrectitem.h</p><!-- more --><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> MYGRAPHICRECTITEM_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MYGRAPHICRECTITEM_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QObject&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QWidget&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QMouseEvent&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QGraphicsScene&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QGraphicsRectItem&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QGraphicsSceneMouseEvent&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QRect&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QPainter&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QPolygon&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QList&gt;</span></span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">STATE_FLAG</span>&#123;<br>    DEFAULT_FLAG=<span class="hljs-number">0</span>,<br>    MOV_LEFT_LINE,<span class="hljs-comment">//标记当前为用户按下矩形的左边界区域</span><br>    MOV_TOP_LINE,<span class="hljs-comment">//标记当前为用户按下矩形的上边界区域</span><br>    MOV_RIGHT_LINE,<span class="hljs-comment">//标记当前为用户按下矩形的右边界区域</span><br>    MOV_BOTTOM_LINE,<span class="hljs-comment">//标记当前为用户按下矩形的下边界区域</span><br>    MOV_RIGHTBOTTOM_RECT,<span class="hljs-comment">//标记当前为用户按下矩形的右下角</span><br>    MOV_RECT,<span class="hljs-comment">//标记当前为鼠标拖动图片移动状态</span><br>    ROTATE<span class="hljs-comment">//标记当前为旋转状态</span><br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">myGraphicRectItem</span>:<span class="hljs-keyword">public</span> QObject,<span class="hljs-keyword">public</span> QGraphicsItem<br>&#123;<br>    Q_OBJECT<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">myGraphicRectItem</span>(QGraphicsItem *parent = <span class="hljs-literal">nullptr</span>);<br>    <span class="hljs-comment">//myGraphicRectItem(QRectF m_OriginRect = QRectF(0,0,100,100));</span><br>    <span class="hljs-function">QRectF  <span class="hljs-title">boundingRect</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br>    ~<span class="hljs-built_in">myGraphicRectItem</span>();<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setRectSize</span><span class="hljs-params">(QRectF mrect,<span class="hljs-type">bool</span> bResetRotateCenter = <span class="hljs-literal">true</span>)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">paint</span><span class="hljs-params">(QPainter *painter, <span class="hljs-type">const</span> QStyleOptionGraphicsItem *option, QWidget *widget)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mousePressEvent</span><span class="hljs-params">(QGraphicsSceneMouseEvent *event)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mouseMoveEvent</span><span class="hljs-params">(QGraphicsSceneMouseEvent *event)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mouseReleaseEvent</span><span class="hljs-params">(QGraphicsSceneMouseEvent *event)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetRotate</span><span class="hljs-params">(qreal RotateAngle,QPointF ptCenter=QPointF(<span class="hljs-number">-999</span>,<span class="hljs-number">-999</span>))</span></span>;<br>    <span class="hljs-function">QPointF <span class="hljs-title">getRotatePoint</span><span class="hljs-params">(QPointF ptCenter, QPointF ptIn, qreal angle)</span></span>;<span class="hljs-comment">//获取旋转后的点</span><br>    <span class="hljs-function">QList&lt;QPointF&gt; <span class="hljs-title">getRotatePoints</span><span class="hljs-params">(QPointF ptCenter,QList&lt;QPointF&gt; ptIns,qreal angle)</span></span>;<span class="hljs-comment">//获取多个旋转后的点</span><br>    <span class="hljs-function">QPolygonF <span class="hljs-title">getRotatePolygonFromRect</span><span class="hljs-params">(QPointF ptCenter,QRectF rectIn,qreal angle)</span></span>;<span class="hljs-comment">//将矩形旋转之后返回多边形</span><br>    <span class="hljs-function">QRectF <span class="hljs-title">getCrtPosRectToSceen</span><span class="hljs-params">()</span></span>;<br>    QRectF m_SmallRotateRect;<span class="hljs-comment">//矩形顶部用来表示旋转的标记的矩形</span><br>    QPolygonF m_SmallRotatePolygon;<span class="hljs-comment">//矩形顶部用来表示旋转的标记的矩形旋转后形成的多边形</span><br>    <span class="hljs-function">QPointF <span class="hljs-title">getSmallRotateRectCenter</span><span class="hljs-params">(QPointF ptA,QPointF ptB)</span></span>;<span class="hljs-comment">//获取旋转时候矩形正上方的旋转标记矩形</span><br>    <span class="hljs-function">QRectF  <span class="hljs-title">getSmallRotateRect</span><span class="hljs-params">(QPointF ptA,QPointF ptB)</span></span>;<br>    <span class="hljs-type">bool</span>    m_bRotate;<br>    qreal   m_RotateAngle;<br>    QPointF m_RotateCenter;<br><br><span class="hljs-keyword">private</span>:<br>    QRectF  m_oldRect;<br>    QPolygonF m_oldRectPolygon;<br>    QRectF  m_RotateAreaRect;<br>    <span class="hljs-type">bool</span>    m_bResize;<br>    QPolygonF m_insicedPolygon;<br>    QRectF  m_insicedRectf;<br>    QPolygonF m_leftPolygon;<br>    QRectF  m_leftRectf;<br>    QPolygonF m_topPolygon;<br>    QRectF  m_topRectf;<br>    QPolygonF m_rightPolygon;<br>    QRectF  m_rightRectf;<br>    QPolygonF m_bottomPolygon;<br>    QRectF  m_bottomRectf;<br><span class="hljs-comment">//    QPolygonF m_rbPolygon;</span><br><span class="hljs-comment">//    QRectF  m_rbRectf;</span><br>    QPointF m_startPos;<br>    STATE_FLAG m_StateFlag;<br>    QPointF *pPointFofSmallRotateRect;<br><span class="hljs-keyword">protected</span>:<br><br>&#125;;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// MYGRAPHICRECTITEM_H</span></span><br><br></code></pre></td></tr></table></figure></li><li><p>mygraphicrectitem.cpp</p><!-- more --><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mygraphicrectitem.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QtMath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QDebug&gt;</span></span><br><br>myGraphicRectItem::<span class="hljs-built_in">myGraphicRectItem</span>(QGraphicsItem *parent):<br>    <span class="hljs-built_in">m_bResize</span>(<span class="hljs-literal">false</span>),<br>    <span class="hljs-built_in">m_oldRect</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">100</span>,<span class="hljs-number">100</span>),<br>    <span class="hljs-built_in">m_bRotate</span>(<span class="hljs-literal">false</span>),<br>    <span class="hljs-built_in">m_RotateAngle</span>(<span class="hljs-number">0</span>),<br>    <span class="hljs-built_in">m_StateFlag</span>(DEFAULT_FLAG)<br>&#123;<br>    <span class="hljs-comment">//setParent(parent);</span><br>    <span class="hljs-built_in">setRectSize</span>(m_oldRect);<br>    <span class="hljs-built_in">setToolTip</span>(<span class="hljs-string">&quot;Click and drag me!&quot;</span>);  <span class="hljs-comment">//提示</span><br>    <span class="hljs-built_in">setCursor</span>(Qt::ArrowCursor);   <span class="hljs-comment">//改变光标形状,手的形状</span><br>    <span class="hljs-built_in">setFlag</span>(QGraphicsItem::ItemIsMovable);<br>    <span class="hljs-comment">//    setAcceptDrops(true);</span><br>    pPointFofSmallRotateRect = <span class="hljs-keyword">new</span> QPointF[<span class="hljs-number">4</span>];<br>    <span class="hljs-built_in">SetRotate</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">setFlag</span>(QGraphicsItem::ItemIsSelectable);<span class="hljs-comment">//</span><br>&#125;<br><br><span class="hljs-function">QRectF <span class="hljs-title">myGraphicRectItem::boundingRect</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//return m_oldRectPolygon.boundingRect();</span><br>    QRectF boundingRectF = m_oldRectPolygon.<span class="hljs-built_in">boundingRect</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">QRectF</span>(boundingRectF.<span class="hljs-built_in">x</span>()<span class="hljs-number">-40</span>,boundingRectF.<span class="hljs-built_in">y</span>()<span class="hljs-number">-40</span>,boundingRectF.<span class="hljs-built_in">width</span>()+<span class="hljs-number">80</span>,boundingRectF.<span class="hljs-built_in">height</span>()+<span class="hljs-number">80</span>);<br>&#125;<br><br>myGraphicRectItem::~<span class="hljs-built_in">myGraphicRectItem</span>()<br>&#123;<br>    <span class="hljs-keyword">delete</span> []pPointFofSmallRotateRect;<br>    pPointFofSmallRotateRect = <span class="hljs-literal">nullptr</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">myGraphicRectItem::setRectSize</span><span class="hljs-params">(QRectF mrect, <span class="hljs-type">bool</span> bResetRotateCenter)</span></span><br><span class="hljs-function"></span>&#123;<br>    m_oldRect = mrect;<br>    <span class="hljs-keyword">if</span>(bResetRotateCenter)<br>    &#123;<br>        m_RotateCenter.<span class="hljs-built_in">setX</span>(m_oldRect.<span class="hljs-built_in">x</span>()+m_oldRect.<span class="hljs-built_in">width</span>()/<span class="hljs-number">2</span>);<br>        m_RotateCenter.<span class="hljs-built_in">setY</span>(m_oldRect.<span class="hljs-built_in">y</span>()+m_oldRect.<span class="hljs-built_in">height</span>()/<span class="hljs-number">2</span>);<br>    &#125;<br>    m_oldRectPolygon = <span class="hljs-built_in">getRotatePolygonFromRect</span>(m_RotateCenter,m_oldRect,m_RotateAngle);<br><br>    m_insicedRectf = <span class="hljs-built_in">QRectF</span>(m_oldRect.<span class="hljs-built_in">x</span>()+<span class="hljs-number">8</span>,m_oldRect.<span class="hljs-built_in">y</span>()+<span class="hljs-number">8</span>,m_oldRect.<span class="hljs-built_in">width</span>()<span class="hljs-number">-16</span>,m_oldRect.<span class="hljs-built_in">height</span>()<span class="hljs-number">-16</span>);<br>    m_insicedPolygon =<span class="hljs-built_in">getRotatePolygonFromRect</span>(m_RotateCenter,m_insicedRectf,m_RotateAngle);<br><br>    m_leftRectf = <span class="hljs-built_in">QRectF</span>(m_oldRect.<span class="hljs-built_in">x</span>(),m_oldRect.<span class="hljs-built_in">y</span>(),<span class="hljs-number">8</span>,m_oldRect.<span class="hljs-built_in">height</span>()<span class="hljs-number">-8</span>);<br>    m_leftPolygon = <span class="hljs-built_in">getRotatePolygonFromRect</span>(m_RotateCenter,m_leftRectf,m_RotateAngle);<br><br>    m_topRectf = <span class="hljs-built_in">QRectF</span>(m_oldRect.<span class="hljs-built_in">x</span>()+<span class="hljs-number">8</span>,m_oldRect.<span class="hljs-built_in">y</span>(),m_oldRect.<span class="hljs-built_in">width</span>()<span class="hljs-number">-8</span>,<span class="hljs-number">8</span>);<br>    m_topPolygon = <span class="hljs-built_in">getRotatePolygonFromRect</span>(m_RotateCenter,m_topRectf,m_RotateAngle);<br><br>    m_rightRectf = <span class="hljs-built_in">QRectF</span>(m_oldRect.<span class="hljs-built_in">right</span>()<span class="hljs-number">-8</span>,m_oldRect.<span class="hljs-built_in">y</span>()+<span class="hljs-number">8</span>,<span class="hljs-number">8</span>,m_oldRect.<span class="hljs-built_in">height</span>()<span class="hljs-number">-16</span>);<br>    m_rightPolygon = <span class="hljs-built_in">getRotatePolygonFromRect</span>(m_RotateCenter,m_rightRectf,m_RotateAngle);<br><br>    m_bottomRectf = <span class="hljs-built_in">QRectF</span>(m_oldRect.<span class="hljs-built_in">x</span>(),m_oldRect.<span class="hljs-built_in">bottom</span>()<span class="hljs-number">-8</span>,m_oldRect.<span class="hljs-built_in">width</span>()<span class="hljs-number">-8</span>,<span class="hljs-number">8</span>);<br>    m_bottomPolygon = <span class="hljs-built_in">getRotatePolygonFromRect</span>(m_RotateCenter,m_bottomRectf,m_RotateAngle);<br><br><span class="hljs-comment">//    m_rbRectf = QRectF(m_oldRect.right()-8,m_oldRect.bottom()-8,8,8);</span><br><span class="hljs-comment">//    m_rbPolygon = getRotatePolygonFromRect(m_RotateCenter,m_rbRectf,m_RotateAngle);</span><br><br>    m_SmallRotateRect = <span class="hljs-built_in">getSmallRotateRect</span>(mrect.<span class="hljs-built_in">topLeft</span>(),mrect.<span class="hljs-built_in">topRight</span>());<span class="hljs-comment">//矩形正上方的旋转标记矩形</span><br>    m_SmallRotatePolygon = <span class="hljs-built_in">getRotatePolygonFromRect</span>(m_RotateCenter,m_SmallRotateRect,m_RotateAngle);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">myGraphicRectItem::paint</span><span class="hljs-params">(QPainter *painter, <span class="hljs-type">const</span> QStyleOptionGraphicsItem *option, QWidget *widget)</span></span><br><span class="hljs-function"></span>&#123;<br>    QPen mPen = <span class="hljs-built_in">QPen</span>(Qt::yellow);<br>    painter-&gt;<span class="hljs-built_in">setPen</span>(mPen);<br>    <span class="hljs-comment">//绘制旋转后的矩形</span><br>    painter-&gt;<span class="hljs-built_in">drawPolygon</span>(m_oldRectPolygon);<br>    <span class="hljs-comment">//绘制旋转圆形</span><br>    mPen.<span class="hljs-built_in">setWidth</span>(<span class="hljs-number">2</span>);<br>    mPen.<span class="hljs-built_in">setColor</span>(Qt::green);<br>    painter-&gt;<span class="hljs-built_in">setPen</span>(mPen);<br>    QPointF pf = <span class="hljs-built_in">getSmallRotateRectCenter</span>(m_oldRectPolygon[<span class="hljs-number">0</span>],m_oldRectPolygon[<span class="hljs-number">1</span>]);<br>    QRectF rect = <span class="hljs-built_in">QRectF</span>(pf.<span class="hljs-built_in">x</span>()<span class="hljs-number">-10</span>,pf.<span class="hljs-built_in">y</span>()<span class="hljs-number">-10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">20</span>);<br>    painter-&gt;<span class="hljs-built_in">drawEllipse</span>(rect);<span class="hljs-comment">//绘制圆形</span><br>    painter-&gt;<span class="hljs-built_in">drawPoint</span>(pf);<span class="hljs-comment">//绘制点</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">myGraphicRectItem::mousePressEvent</span><span class="hljs-params">(QGraphicsSceneMouseEvent *event)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(event-&gt;<span class="hljs-built_in">button</span>()== Qt::LeftButton)<br>    &#123;<br>        m_startPos = event-&gt;<span class="hljs-built_in">pos</span>();<span class="hljs-comment">//鼠标左击时，获取当前鼠标在图片中的坐标，</span><br>        <span class="hljs-keyword">if</span>(m_SmallRotatePolygon.<span class="hljs-built_in">containsPoint</span>(m_startPos,Qt::WindingFill))<span class="hljs-comment">//旋转矩形</span><br>        &#123;<br>            <span class="hljs-built_in">setCursor</span>(Qt::PointingHandCursor);<br>            m_StateFlag = ROTATE;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(m_insicedPolygon.<span class="hljs-built_in">containsPoint</span>(m_startPos,Qt::WindingFill))<span class="hljs-comment">//在矩形内框区域时按下鼠标，则可拖动图片</span><br>        &#123;<br>            <span class="hljs-built_in">setCursor</span>(Qt::ClosedHandCursor);   <span class="hljs-comment">//改变光标形状,手的形状</span><br>            m_StateFlag = MOV_RECT;<span class="hljs-comment">//标记当前为鼠标拖动图片移动状态</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(m_leftPolygon.<span class="hljs-built_in">containsPoint</span>(m_startPos,Qt::WindingFill))<br>        &#123;<br>            <span class="hljs-built_in">setCursor</span>(Qt::SizeHorCursor);<br>            m_StateFlag = MOV_LEFT_LINE;<span class="hljs-comment">//标记当前为用户按下矩形的左边界区域</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(m_rightPolygon.<span class="hljs-built_in">containsPoint</span>(m_startPos,Qt::WindingFill))<br>        &#123;<br>            <span class="hljs-built_in">setCursor</span>(Qt::SizeHorCursor);<br>            m_StateFlag = MOV_RIGHT_LINE;<span class="hljs-comment">//标记当前为用户按下矩形的右边界区域</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(m_topPolygon.<span class="hljs-built_in">containsPoint</span>(m_startPos,Qt::WindingFill))<br>        &#123;<br>            <span class="hljs-built_in">setCursor</span>(Qt::SizeVerCursor);<br>            m_StateFlag = MOV_TOP_LINE;<span class="hljs-comment">//标记当前为用户按下矩形的上边界区域</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(m_bottomPolygon.<span class="hljs-built_in">containsPoint</span>(m_startPos,Qt::WindingFill))<br>        &#123;<br>            <span class="hljs-built_in">setCursor</span>(Qt::SizeVerCursor);<br>            m_StateFlag = MOV_BOTTOM_LINE;<span class="hljs-comment">//标记当前为用户按下矩形的下边界区域</span><br>        &#125;<br><span class="hljs-comment">//        else if(m_rbPolygon.containsPoint(m_startPos,Qt::WindingFill))</span><br><span class="hljs-comment">//        &#123;</span><br><span class="hljs-comment">//            setCursor(Qt::SizeFDiagCursor);</span><br><span class="hljs-comment">//            m_StateFlag = MOV_RIGHTBOTTOM_RECT;//标记当前为用户按下矩形的右下角</span><br><span class="hljs-comment">//        &#125;</span><br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            m_StateFlag = DEFAULT_FLAG;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        QGraphicsItem::<span class="hljs-built_in">mousePressEvent</span>(event);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">myGraphicRectItem::mouseMoveEvent</span><span class="hljs-params">(QGraphicsSceneMouseEvent *event)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(m_StateFlag == ROTATE)<br>    &#123;<br>       <span class="hljs-type">int</span> nRotateAngle = <span class="hljs-built_in">atan2</span>((event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">x</span>()-m_RotateCenter.<span class="hljs-built_in">x</span>()),(event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">y</span>()-m_RotateCenter.<span class="hljs-built_in">y</span>()))*<span class="hljs-number">180</span>/M_PI;<br>       <span class="hljs-built_in">SetRotate</span>(<span class="hljs-number">180</span>-nRotateAngle);<br>       <span class="hljs-built_in">setRectSize</span>(m_oldRect);<br>       <span class="hljs-comment">//qDebug()&lt;&lt;nRotateAngle;</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(m_StateFlag == MOV_RECT)<br>    &#123;<br>        QPointF point = (event-&gt;<span class="hljs-built_in">pos</span>() - m_startPos);<br>        <span class="hljs-built_in">moveBy</span>(point.<span class="hljs-built_in">x</span>(), point.<span class="hljs-built_in">y</span>());<br>        <span class="hljs-built_in">setRectSize</span>(m_oldRect);<br>        <span class="hljs-built_in">scene</span>()-&gt;<span class="hljs-built_in">update</span>();<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(m_StateFlag == MOV_LEFT_LINE)<br>    &#123;<br>        QPointF pf = <span class="hljs-built_in">QPointF</span>((m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">1</span>).<span class="hljs-built_in">x</span>()+m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">2</span>).<span class="hljs-built_in">x</span>())/<span class="hljs-number">2</span>,((m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">1</span>).<span class="hljs-built_in">y</span>()+m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">2</span>).<span class="hljs-built_in">y</span>())/<span class="hljs-number">2</span>));<br>        <span class="hljs-comment">//计算到右侧边中点的距离</span><br>        qreal dis = <span class="hljs-built_in">sqrt</span>((event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">x</span>()-pf.<span class="hljs-built_in">x</span>())*(event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">x</span>()-pf.<span class="hljs-built_in">x</span>()) +(event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">y</span>()-pf.<span class="hljs-built_in">y</span>())*(event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">y</span>()-pf.<span class="hljs-built_in">y</span>()));<br>        qreal dis2LT = <span class="hljs-built_in">sqrt</span>((event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">x</span>()-m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">x</span>())*(event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">x</span>()-m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">x</span>()) +(event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">y</span>()-m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">y</span>())*(event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">y</span>()-m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">y</span>()));<br>        qreal dis2RT = <span class="hljs-built_in">sqrt</span>((event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">x</span>()-m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">1</span>).<span class="hljs-built_in">x</span>())*(event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">x</span>()-m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">1</span>).<span class="hljs-built_in">x</span>()) +(event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">y</span>()-m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">1</span>).<span class="hljs-built_in">y</span>())*(event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">y</span>()-m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">1</span>).<span class="hljs-built_in">y</span>()));<br>        <span class="hljs-keyword">if</span>(dis&lt;<span class="hljs-number">16</span>||dis2LT&gt;dis2RT)<br>        &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            QRectF <span class="hljs-built_in">newRect</span>(m_oldRect);<br>            newRect.<span class="hljs-built_in">setLeft</span>(m_oldRect.<span class="hljs-built_in">right</span>()-dis);<br>            newRect.<span class="hljs-built_in">setRight</span>(m_oldRect.<span class="hljs-built_in">right</span>());<br>            <span class="hljs-built_in">setRectSize</span>(newRect,<span class="hljs-literal">false</span>);<br>            m_RotateCenter=<span class="hljs-built_in">QPointF</span>((m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">x</span>()+m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">2</span>).<span class="hljs-built_in">x</span>())/<span class="hljs-number">2</span>,(m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">y</span>()+m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">2</span>).<span class="hljs-built_in">y</span>())/<span class="hljs-number">2</span>);<br>            m_oldRect.<span class="hljs-built_in">moveCenter</span>(m_RotateCenter);<br>            <span class="hljs-built_in">setRectSize</span>(m_oldRect);<br>            <span class="hljs-built_in">scene</span>()-&gt;<span class="hljs-built_in">update</span>();<span class="hljs-comment">//必须要用scene()-&gt;update()，不能用update();否则会出现重影</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(m_StateFlag == MOV_TOP_LINE)<br>    &#123;<br>        <span class="hljs-comment">//底边中点</span><br>        QPointF pf = <span class="hljs-built_in">QPointF</span>((m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">2</span>).<span class="hljs-built_in">x</span>()+m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">3</span>).<span class="hljs-built_in">x</span>())/<span class="hljs-number">2</span>,((m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">2</span>).<span class="hljs-built_in">y</span>()+m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">3</span>).<span class="hljs-built_in">y</span>())/<span class="hljs-number">2</span>));<br>        <span class="hljs-comment">//计算到底边中点的距离</span><br>        qreal dis = <span class="hljs-built_in">sqrt</span>((event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">x</span>()-pf.<span class="hljs-built_in">x</span>())*(event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">x</span>()-pf.<span class="hljs-built_in">x</span>()) +(event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">y</span>()-pf.<span class="hljs-built_in">y</span>())*(event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">y</span>()-pf.<span class="hljs-built_in">y</span>()));<br>        qreal dis2LT = <span class="hljs-built_in">sqrt</span>((event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">x</span>()-m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">x</span>())*(event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">x</span>()-m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">x</span>()) +(event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">y</span>()-m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">y</span>())*(event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">y</span>()-m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">y</span>()));<br>        qreal dis2LB = <span class="hljs-built_in">sqrt</span>((event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">x</span>()-m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">3</span>).<span class="hljs-built_in">x</span>())*(event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">x</span>()-m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">3</span>).<span class="hljs-built_in">x</span>()) +(event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">y</span>()-m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">3</span>).<span class="hljs-built_in">y</span>())*(event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">y</span>()-m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">3</span>).<span class="hljs-built_in">y</span>()));<br>        <span class="hljs-keyword">if</span>(dis&lt;<span class="hljs-number">16</span>||dis2LT&gt;dis2LB)<br>        &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            QRectF <span class="hljs-built_in">newRect</span>(m_oldRect);<br>            newRect.<span class="hljs-built_in">setTop</span>(m_oldRect.<span class="hljs-built_in">bottom</span>()-dis);<br>            newRect.<span class="hljs-built_in">setBottom</span>(m_oldRect.<span class="hljs-built_in">bottom</span>());<br>            <span class="hljs-built_in">setRectSize</span>(newRect,<span class="hljs-literal">false</span>);<br>            m_RotateCenter=<span class="hljs-built_in">QPointF</span>((m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">x</span>()+m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">2</span>).<span class="hljs-built_in">x</span>())/<span class="hljs-number">2</span>,(m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">y</span>()+m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">2</span>).<span class="hljs-built_in">y</span>())/<span class="hljs-number">2</span>);<br>            m_oldRect.<span class="hljs-built_in">moveCenter</span>(m_RotateCenter);<br>            <span class="hljs-built_in">setRectSize</span>(m_oldRect);<br>            <span class="hljs-built_in">scene</span>()-&gt;<span class="hljs-built_in">update</span>();<span class="hljs-comment">//必须要用scene()-&gt;update()，不能用update();否则会出现重影</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(m_StateFlag == MOV_RIGHT_LINE)<br>    &#123;<br>        QPointF pf = <span class="hljs-built_in">QPointF</span>((m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">x</span>()+m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">3</span>).<span class="hljs-built_in">x</span>())/<span class="hljs-number">2</span>,((m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">y</span>()+m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">3</span>).<span class="hljs-built_in">y</span>())/<span class="hljs-number">2</span>));<br>        <span class="hljs-comment">//计算到左侧边中点的距离</span><br>        qreal dis = <span class="hljs-built_in">sqrt</span>((event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">x</span>()-pf.<span class="hljs-built_in">x</span>())*(event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">x</span>()-pf.<span class="hljs-built_in">x</span>()) +(event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">y</span>()-pf.<span class="hljs-built_in">y</span>())*(event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">y</span>()-pf.<span class="hljs-built_in">y</span>()));<br>        qreal dis2LT = <span class="hljs-built_in">sqrt</span>((event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">x</span>()-m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">x</span>())*(event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">x</span>()-m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">x</span>()) +(event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">y</span>()-m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">y</span>())*(event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">y</span>()-m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">y</span>()));<br>        qreal dis2RT = <span class="hljs-built_in">sqrt</span>((event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">x</span>()-m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">1</span>).<span class="hljs-built_in">x</span>())*(event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">x</span>()-m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">1</span>).<span class="hljs-built_in">x</span>()) +(event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">y</span>()-m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">1</span>).<span class="hljs-built_in">y</span>())*(event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">y</span>()-m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">1</span>).<span class="hljs-built_in">y</span>()));<br>        <span class="hljs-keyword">if</span>(dis&lt;<span class="hljs-number">16</span>||dis2LT&lt;dis2RT)<br>        &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            QRectF <span class="hljs-built_in">newRect</span>(m_oldRect);<br>            newRect.<span class="hljs-built_in">setLeft</span>(m_oldRect.<span class="hljs-built_in">left</span>());<br>            newRect.<span class="hljs-built_in">setRight</span>(m_oldRect.<span class="hljs-built_in">left</span>()+dis);<br>            <span class="hljs-built_in">setRectSize</span>(newRect,<span class="hljs-literal">false</span>);<br>            m_RotateCenter=<span class="hljs-built_in">QPointF</span>((m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">x</span>()+m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">2</span>).<span class="hljs-built_in">x</span>())/<span class="hljs-number">2</span>,(m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">y</span>()+m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">2</span>).<span class="hljs-built_in">y</span>())/<span class="hljs-number">2</span>);<br>            m_oldRect.<span class="hljs-built_in">moveCenter</span>(m_RotateCenter);<br>            <span class="hljs-built_in">setRectSize</span>(m_oldRect);<br>            <span class="hljs-built_in">scene</span>()-&gt;<span class="hljs-built_in">update</span>();<span class="hljs-comment">//必须要用scene()-&gt;update()，不能用update();否则会出现重影</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(m_StateFlag == MOV_BOTTOM_LINE)<br>    &#123;<br>        <span class="hljs-comment">//顶边中点</span><br>        QPointF pf = <span class="hljs-built_in">QPointF</span>((m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">x</span>()+m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">1</span>).<span class="hljs-built_in">x</span>())/<span class="hljs-number">2</span>,((m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">y</span>()+m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">1</span>).<span class="hljs-built_in">y</span>())/<span class="hljs-number">2</span>));<br>        <span class="hljs-comment">//计算到底边中点的距离</span><br>        qreal dis = <span class="hljs-built_in">sqrt</span>((event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">x</span>()-pf.<span class="hljs-built_in">x</span>())*(event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">x</span>()-pf.<span class="hljs-built_in">x</span>()) +(event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">y</span>()-pf.<span class="hljs-built_in">y</span>())*(event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">y</span>()-pf.<span class="hljs-built_in">y</span>()));<br>        qreal dis2LT = <span class="hljs-built_in">sqrt</span>((event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">x</span>()-m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">x</span>())*(event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">x</span>()-m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">x</span>()) +(event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">y</span>()-m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">y</span>())*(event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">y</span>()-m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">y</span>()));<br>        qreal dis2LB = <span class="hljs-built_in">sqrt</span>((event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">x</span>()-m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">3</span>).<span class="hljs-built_in">x</span>())*(event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">x</span>()-m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">3</span>).<span class="hljs-built_in">x</span>()) +(event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">y</span>()-m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">3</span>).<span class="hljs-built_in">y</span>())*(event-&gt;<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">y</span>()-m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">3</span>).<span class="hljs-built_in">y</span>()));<br>        <span class="hljs-keyword">if</span>(dis&lt;<span class="hljs-number">16</span>||dis2LT&lt;dis2LB)<br>        &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            QRectF <span class="hljs-built_in">newRect</span>(m_oldRect);<br>            newRect.<span class="hljs-built_in">setTop</span>(m_oldRect.<span class="hljs-built_in">top</span>());<br>            newRect.<span class="hljs-built_in">setBottom</span>(m_oldRect.<span class="hljs-built_in">top</span>()+dis);<br>            <span class="hljs-built_in">setRectSize</span>(newRect,<span class="hljs-literal">false</span>);<br>            m_RotateCenter=<span class="hljs-built_in">QPointF</span>((m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">x</span>()+m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">2</span>).<span class="hljs-built_in">x</span>())/<span class="hljs-number">2</span>,(m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">y</span>()+m_oldRectPolygon.<span class="hljs-built_in">at</span>(<span class="hljs-number">2</span>).<span class="hljs-built_in">y</span>())/<span class="hljs-number">2</span>);<br>            m_oldRect.<span class="hljs-built_in">moveCenter</span>(m_RotateCenter);<br>            <span class="hljs-built_in">setRectSize</span>(m_oldRect);<br>            <span class="hljs-built_in">scene</span>()-&gt;<span class="hljs-built_in">update</span>();<span class="hljs-comment">//必须要用scene()-&gt;update()，不能用update();否则会出现重影</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">myGraphicRectItem::mouseReleaseEvent</span><span class="hljs-params">(QGraphicsSceneMouseEvent *event)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">setCursor</span>(Qt::ArrowCursor);<br>    <span class="hljs-keyword">if</span>(m_StateFlag == MOV_RECT)<br>    &#123;<br>        m_StateFlag = DEFAULT_FLAG;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        QGraphicsItem::<span class="hljs-built_in">mouseReleaseEvent</span>(event);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">myGraphicRectItem::SetRotate</span><span class="hljs-params">(qreal RotateAngle, QPointF ptCenter)</span></span><br><span class="hljs-function"></span>&#123;<br>    m_bRotate = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">if</span>(ptCenter.<span class="hljs-built_in">x</span>()==<span class="hljs-number">-999</span> &amp;&amp; ptCenter.<span class="hljs-built_in">y</span>()==<span class="hljs-number">-999</span>)<br>    &#123;<br>        m_RotateCenter = <span class="hljs-built_in">QPointF</span>(m_oldRect.<span class="hljs-built_in">x</span>()+m_oldRect.<span class="hljs-built_in">width</span>()/<span class="hljs-number">2</span>,m_oldRect.<span class="hljs-built_in">y</span>()+m_oldRect.<span class="hljs-built_in">height</span>()/<span class="hljs-number">2</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        m_RotateCenter = ptCenter;<br>    &#125;<br>    m_RotateAngle = RotateAngle;<br>    <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">update</span>();<br>&#125;<br><br><span class="hljs-function">QPointF <span class="hljs-title">myGraphicRectItem::getRotatePoint</span><span class="hljs-params">(QPointF ptCenter, QPointF ptIn, qreal angle)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">double</span> dx = ptCenter.<span class="hljs-built_in">x</span>();<br>    <span class="hljs-type">double</span> dy = ptCenter.<span class="hljs-built_in">y</span>();<br>    <span class="hljs-type">double</span> x = ptIn.<span class="hljs-built_in">x</span>();<br>    <span class="hljs-type">double</span> y = ptIn.<span class="hljs-built_in">y</span>();<br>    <span class="hljs-type">double</span> xx,yy;<br>    xx = (x-dx)*<span class="hljs-built_in">cos</span>(angle*M_PI/<span class="hljs-number">180</span>)-(y-dy)*<span class="hljs-built_in">sin</span>(angle*M_PI/<span class="hljs-number">180</span>)+dx;<br>    yy = (x-dx)*<span class="hljs-built_in">sin</span>(angle*M_PI/<span class="hljs-number">180</span>)+(y-dy)*<span class="hljs-built_in">cos</span>(angle*M_PI/<span class="hljs-number">180</span>)+dy;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">QPointF</span>(xx,yy);<br>&#125;<br><br><span class="hljs-function">QList&lt;QPointF&gt; <span class="hljs-title">myGraphicRectItem::getRotatePoints</span><span class="hljs-params">(QPointF ptCenter, QList&lt;QPointF&gt; ptIns, qreal angle)</span></span><br><span class="hljs-function"></span>&#123;<br>    QList&lt;QPointF&gt; lstPt;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;ptIns.<span class="hljs-built_in">count</span>();i++)<br>    &#123;<br>        lstPt.<span class="hljs-built_in">append</span>(<span class="hljs-built_in">getRotatePoint</span>(ptCenter,ptIns.<span class="hljs-built_in">at</span>(i),angle));<br>    &#125;<br>    <span class="hljs-keyword">return</span> lstPt;<br>&#125;<br><br><span class="hljs-function">QPolygonF <span class="hljs-title">myGraphicRectItem::getRotatePolygonFromRect</span><span class="hljs-params">(QPointF ptCenter, QRectF rectIn, qreal angle)</span></span><br><span class="hljs-function"></span>&#123;<br>    QVector&lt;QPointF&gt; vpt;<br>    QPointF pf = <span class="hljs-built_in">getRotatePoint</span>(ptCenter,rectIn.<span class="hljs-built_in">topLeft</span>(),angle);<br>    vpt.<span class="hljs-built_in">append</span>(pf);<br>    pf = <span class="hljs-built_in">getRotatePoint</span>(ptCenter,rectIn.<span class="hljs-built_in">topRight</span>(),angle);<br>    vpt.<span class="hljs-built_in">append</span>(pf);<br>    pf = <span class="hljs-built_in">getRotatePoint</span>(ptCenter,rectIn.<span class="hljs-built_in">bottomRight</span>(),angle);<br>    vpt.<span class="hljs-built_in">append</span>(pf);<br>    pf = <span class="hljs-built_in">getRotatePoint</span>(ptCenter,rectIn.<span class="hljs-built_in">bottomLeft</span>(),angle);<br>    vpt.<span class="hljs-built_in">append</span>(pf);<br>    pf = <span class="hljs-built_in">getRotatePoint</span>(ptCenter,rectIn.<span class="hljs-built_in">topLeft</span>(),angle);<br>    vpt.<span class="hljs-built_in">append</span>(pf);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">QPolygonF</span>(vpt);<br>&#125;<br><br><span class="hljs-function">QRectF <span class="hljs-title">myGraphicRectItem::getCrtPosRectToSceen</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    QRectF retRect = <span class="hljs-built_in">QRectF</span>(m_oldRect.<span class="hljs-built_in">x</span>()+<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">x</span>(),m_oldRect.<span class="hljs-built_in">y</span>()+<span class="hljs-built_in">pos</span>().<span class="hljs-built_in">y</span>(),m_oldRect.<span class="hljs-built_in">width</span>(),m_oldRect.<span class="hljs-built_in">height</span>());<br>    <span class="hljs-keyword">return</span> retRect;<br>&#125;<br><span class="hljs-function">QRectF <span class="hljs-title">myGraphicRectItem::getSmallRotateRect</span><span class="hljs-params">(QPointF ptA,QPointF ptB)</span></span><br><span class="hljs-function"></span>&#123;<br>    QPointF pt = <span class="hljs-built_in">getSmallRotateRectCenter</span>(ptA,ptB);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">QRectF</span>(pt.<span class="hljs-built_in">x</span>()<span class="hljs-number">-10</span>,pt.<span class="hljs-built_in">y</span>()<span class="hljs-number">-10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">20</span>);<br>&#125;<br><span class="hljs-function">QPointF <span class="hljs-title">myGraphicRectItem::getSmallRotateRectCenter</span><span class="hljs-params">(QPointF ptA,QPointF ptB)</span></span><br><span class="hljs-function"></span>&#123;<br>    QPointF ptCenter = <span class="hljs-built_in">QPointF</span>((ptA.<span class="hljs-built_in">x</span>()+ptB.<span class="hljs-built_in">x</span>())/<span class="hljs-number">2</span>,(ptA.<span class="hljs-built_in">y</span>()+ptB.<span class="hljs-built_in">y</span>())/<span class="hljs-number">2</span>);<span class="hljs-comment">//A,B点的中点C</span><br>    <span class="hljs-comment">//中垂线方程式为 y=x*k + b;</span><br>    qreal x,y;<span class="hljs-comment">//旋转图标矩形的中心</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(ptB.<span class="hljs-built_in">y</span>()-ptA.<span class="hljs-built_in">y</span>())&lt;<span class="hljs-number">0.1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(ptA.<span class="hljs-built_in">x</span>()&lt;ptB.<span class="hljs-built_in">x</span>())<span class="hljs-comment">//矩形左上角在上方</span><br>        &#123;<br>            x = ptCenter.<span class="hljs-built_in">x</span>();<br>            y = ptCenter.<span class="hljs-built_in">y</span>()<span class="hljs-number">-20</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><span class="hljs-comment">//矩形左上角在下方</span><br>        &#123;<br>            x = ptCenter.<span class="hljs-built_in">x</span>();<br>            y = ptCenter.<span class="hljs-built_in">y</span>()+<span class="hljs-number">20</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ptB.<span class="hljs-built_in">y</span>()&gt;ptA.<span class="hljs-built_in">y</span>())<span class="hljs-comment">//顺时针旋转0-180</span><br>    &#123;<br>        qreal k = (ptA.<span class="hljs-built_in">x</span>()-ptB.<span class="hljs-built_in">x</span>())/(ptB.<span class="hljs-built_in">y</span>()-ptA.<span class="hljs-built_in">y</span>());<span class="hljs-comment">//中垂线斜率</span><br>        qreal b = (ptA.<span class="hljs-built_in">y</span>()+ptB.<span class="hljs-built_in">y</span>())/<span class="hljs-number">2</span>-k*(ptA.<span class="hljs-built_in">x</span>()+ptB.<span class="hljs-built_in">x</span>())/<span class="hljs-number">2</span>;<br>        <span class="hljs-comment">//求AB线中垂线上离AB中点20个像素的点C的坐标</span><br>        x = <span class="hljs-number">20</span>*<span class="hljs-built_in">cos</span>(<span class="hljs-built_in">atan</span>(k))+ptCenter.<span class="hljs-built_in">x</span>();<br>        y = k*x+b;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ptB.<span class="hljs-built_in">y</span>()&lt;ptA.<span class="hljs-built_in">y</span>())<span class="hljs-comment">//顺时针旋转180-360</span><br>    &#123;<br>        qreal k = (ptA.<span class="hljs-built_in">x</span>()-ptB.<span class="hljs-built_in">x</span>())/(ptB.<span class="hljs-built_in">y</span>()-ptA.<span class="hljs-built_in">y</span>());<span class="hljs-comment">//中垂线斜率</span><br>        qreal b = (ptA.<span class="hljs-built_in">y</span>()+ptB.<span class="hljs-built_in">y</span>())/<span class="hljs-number">2</span>-k*(ptA.<span class="hljs-built_in">x</span>()+ptB.<span class="hljs-built_in">x</span>())/<span class="hljs-number">2</span>;<br>        <span class="hljs-comment">//求AB线中垂线上离AB中点20个像素的点C的坐标</span><br>        x = <span class="hljs-number">-20</span>*<span class="hljs-built_in">cos</span>(<span class="hljs-built_in">atan</span>(k))+ptCenter.<span class="hljs-built_in">x</span>();<br>        y = k*x+b;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">QPointF</span>(x,y);<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h3 id="功能3：Qt中设置QGraphicsView的背景色为透明且无边框"><a href="#功能3：Qt中设置QGraphicsView的背景色为透明且无边框" class="headerlink" title="功能3：Qt中设置QGraphicsView的背景色为透明且无边框"></a>功能3：Qt中设置<code>QGraphicsView</code>的背景色为透明且无边框</h3><ol><li>设置背景色为透明：在<code>QGraphicsView</code>上调用<code>setStyleSheet()</code>方法，并将背景色样式设置为透明。示例代码如下：</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">QGraphicsView* view = <span class="hljs-keyword">new</span> QGraphicsView;<br>view-&gt;<span class="hljs-built_in">setStyleSheet</span>(<span class="hljs-string">&quot;background-color: transparent;&quot;</span>);<br></code></pre></td></tr></table></figure><ol start="2"><li>设置边框：在<code>QGraphicsView</code>上调用<code>setFrameStyle()</code>方法，并将边框样式设置为无边框。示例代码如下：</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">QGraphicsView* view = <span class="hljs-keyword">new</span> QGraphicsView;<br>view-&gt;<span class="hljs-built_in">setFrameStyle</span>(QFrame::NoFrame);<br></code></pre></td></tr></table></figure><p>在Qt中使用一个按钮清除<code>QGraphicsView</code>上监控的图片<code>QGraphicsPixmapItem</code>上画出来不需要的矩形<code>QGraphicsRectItem</code></p><ol><li><p>首先，在<code>QGraphicsView</code>上绑定一个按钮<code>QPushButton</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">QPushButton* clearBtn = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QPushButton</span>(view);<br># 将按钮放置在view的左下角<br>btn.<span class="hljs-built_in">setGeometry</span>(<span class="hljs-number">0</span>,view.<span class="hljs-built_in">geometry</span>().<span class="hljs-built_in">height</span>()<span class="hljs-number">-40</span>,<span class="hljs-number">40</span>,<span class="hljs-number">20</span>);<br>btn.<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;clear&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>给按钮绑定槽函数，用于清除矩形</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">#在.h文件中定义槽函数<br><span class="hljs-keyword">private</span> slots:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_btn_clicked</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"># 在构造函数中绑定槽函数<br><span class="hljs-built_in">connect</span>(clearBtn,<span class="hljs-built_in">SIGNAL</span>(<span class="hljs-built_in">clicked</span>()),<span class="hljs-keyword">this</span>,<span class="hljs-built_in">SLOT</span>(<span class="hljs-built_in">on_btn_clicked</span>()));<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"># 槽函数的具体实现<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ImgHelper::on_btn_clicked</span><span class="hljs-params">()</span></span>&#123;<br>rectcounts = <span class="hljs-number">0</span>;#设矩形个数为<span class="hljs-number">0</span><br>scene-&gt;<span class="hljs-built_in">clear</span>();# 清空<span class="hljs-function">scene</span><br><span class="hljs-function"><span class="hljs-title">imgUpdated</span><span class="hljs-params">(cloneImage)</span></span>;# 将直接保存的监控图片重新添加进scene<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="功能4：保存错误图片"><a href="#功能4：保存错误图片" class="headerlink" title="功能4：保存错误图片"></a>功能4：保存错误图片</h3><p>当发现监控的图片有问题时，就可以一键保存监控的图片，按日期创建文件夹，方便查看问题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ImgHelper::onSaveErrorImage</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//20230908</span><br>    QString currentPath = QDir::<span class="hljs-built_in">currentPath</span>();<br><br>    QString filedir = currentPath + QDir::<span class="hljs-built_in">separator</span>() + <span class="hljs-string">&quot;errorImg&quot;</span>;<br>    <span class="hljs-function">QDir <span class="hljs-title">dir</span><span class="hljs-params">(filedir)</span></span>;<br>    <span class="hljs-keyword">if</span>(!dir.<span class="hljs-built_in">exists</span>())&#123;<br>       <span class="hljs-keyword">if</span>(dir.<span class="hljs-built_in">mkdir</span>(filedir))&#123;<br><br>       &#125;<span class="hljs-keyword">else</span>&#123;<br>           <span class="hljs-built_in">qDebug</span>()&lt;&lt;<span class="hljs-string">&quot;创建目录失败&quot;</span>;<br>       &#125;<br>    &#125;<br>    QString nowDate = QDateTime::QDateTime::<span class="hljs-built_in">currentDateTime</span>().<span class="hljs-built_in">toString</span>(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>) ;<br>    QString filedirdate = filedir + QDir::<span class="hljs-built_in">separator</span>() + nowDate;<br>    <span class="hljs-function">QDir <span class="hljs-title">dirdate</span><span class="hljs-params">(filedirdate)</span></span>;<br>    <span class="hljs-keyword">if</span>(!dirdate.<span class="hljs-built_in">exists</span>())&#123;<br>       <span class="hljs-keyword">if</span>(dirdate.<span class="hljs-built_in">mkdir</span>(filedirdate))&#123;<br><br>       &#125;<span class="hljs-keyword">else</span>&#123;<br>           <span class="hljs-built_in">qDebug</span>()&lt;&lt;<span class="hljs-string">&quot;创建目录失败&quot;</span>;<br>       &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">8</span>; i++)&#123;<br>        QString imgpath = filedirdate + QDir::<span class="hljs-built_in">separator</span>() + <span class="hljs-string">&quot;tt&quot;</span> + QString::<span class="hljs-built_in">number</span>(i) +<span class="hljs-string">&quot;.bmp&quot;</span>;<br>        <span class="hljs-function">QFile <span class="hljs-title">file</span><span class="hljs-params">(imgpath)</span></span>;<br>        <span class="hljs-comment">//判断文件是否存在</span><br>        <span class="hljs-keyword">if</span>(file.<span class="hljs-built_in">exists</span>())&#123;<br>           <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(pixmapItem != <span class="hljs-literal">NULL</span>)&#123;<br>            pixmapItem-&gt;<span class="hljs-built_in">pixmap</span>().<span class="hljs-built_in">save</span>(imgpath);<br>        &#125;<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="功能5：修复图片通道异常"><a href="#功能5：修复图片通道异常" class="headerlink" title="功能5：修复图片通道异常"></a>功能5：修复图片通道异常</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//2023926加  修复PLC查看图片出现的通道异常</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> x = <span class="hljs-number">0</span> ; x &lt; image.<span class="hljs-built_in">height</span>(); x++)&#123;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> y = <span class="hljs-number">0</span> ; y &lt; image.<span class="hljs-built_in">width</span>(); y++)&#123;<br>                        QRgb pixel = image.<span class="hljs-built_in">pixel</span>(x,y);<br>                        <span class="hljs-type">int</span> red = <span class="hljs-built_in">qBlue</span>(pixel);<br>                        <span class="hljs-type">int</span> green =<span class="hljs-built_in">qRed</span>(pixel);<br>                        <span class="hljs-type">int</span> blue = <span class="hljs-built_in">qGreen</span>(pixel);<br>                        QRgb newpixel = <span class="hljs-built_in">qRgb</span>(red,green,blue);<br>                        image.<span class="hljs-built_in">setPixel</span>(x,y,newpixel);<br><br>                    &#125;<br>                &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
      <tag>Qt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解析Http协议</title>
    <link href="/2023/10/20/%E8%A7%A3%E6%9E%90Http%E5%8D%8F%E8%AE%AE/"/>
    <url>/2023/10/20/%E8%A7%A3%E6%9E%90Http%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<p>在写webSever时了解了一点关于http协议的内容，更方便后面的学习</p><span id="more"></span><p><strong>HTTP</strong>(hypertext transport protocol 超文本传输协议）：一种无状态的，以请求&#x2F;应答方式运行的协议，它使用可扩展的语义和自描述消息格式，与基于网络的超文本信息系统灵活的互动。</p><h2 id="1-http请求"><a href="#1-http请求" class="headerlink" title="1. http请求"></a>1. http请求</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs txt">http请求消息分为四部分<br>1. 请求行<br>不管是get请求还是post请求，请求行分为三部分<br>2. 请求头<br>3. 空行<br>4. 客户端想服务器提交的数据<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs txt">GET /doing HTTP/1.1<br>Host: 10.1.18.4<br>User-Agent: Mozilla/5.0 (Windows NT 6.2; rv:40.0) Gecko/20100101 Firefox/40.0<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<br>Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3<br>Accept-Encoding: gzip, deflate<br>Referer: http://10.1.18.4/<br>Connection: keep-alive<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs txt">1. 请求行GET /doing HTTP/1.1<br>三部分：请求方式请求的资源（/不代表服务器根目录，是服务器给客户端提供的资源目录）<br>        HTTP协议版本还有看不见的\r\n<br>2. 请求头若干个键值对<br>Host: 10.1.18.4<br>User-Agent: Mozilla/5.0 (Windows NT 6.2; rv:40.0) Gecko/20100101 Firefox/40.0<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<br>Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3<br>Accept-Encoding: gzip, deflate<br>Referer: http://10.1.18.4/<br>Connection: keep-alive<br></code></pre></td></tr></table></figure><ul><li><p>get</p><ul><li>提交的数据,不安全,提交的数据会显示到地址栏中，被别人看到之后，数据就泄露了</li><li>图中的<code> userid</code>和<code>roomid </code>就是浏览器向服务器提交的数据地址栏中的数据会放到某块缓冲中，地址栏对应的缓存是有上限的,在几k左右</li></ul></li><li><p>post</p><ul><li>提交的数据并不会显示到地址栏中,完全不可见的，因此更安全</li></ul></li></ul><ol><li><p>请求行，用来说明请求类型，要访问的资源以及所使用的<code>http</code>版本。get说明请求类型为get，该行的最后一部分说明使用的是<code>http 1.1</code>版本</p></li><li><p>请求头，紧接着请求行（即第一行）之后的部分，用来说明服务器要使用的附加信息。从第二行起为请求头部，<code>host</code>将指出请求的目的地。<code>User-Agent</code>，服务器端和客户端脚本都能访问它，它是客户端类型检测逻辑的重要基础。该信息由你的客户端来定义，并且在每个请求中自动发送等。</p></li><li><p>空行，请求头部后面的空行是必须的。即使第四部分的请求数据为空，也必须有空行。</p></li><li><p>请求数据也叫主体，可以添加任意的其他数据，上面的请求数据为空。</p></li></ol><h2 id="1-2-http响应"><a href="#1-2-http响应" class="headerlink" title="1.2 http响应"></a>1.2 http响应</h2><ol><li>状态行，由<code>http</code>协议版本号， 状态码， 状态消息三部分组成。上面<code>http</code>版本号为<code>http/1.1</code>，状态码为200，状态消息为”OK”。</li><li>消息报头，用来说明客户端要使用的一些附加信息。<code>Date</code>：生成响应的日期和时间；<code>Content-Type</code>：指定了MIME类型的<code>html(text/html)</code>，编码类型是<code>UTF-8</code>。</li><li>空行，消息报头后面的空行是必须的。</li><li>响应正文，服务器返回给客户端的文本信息，空行后面的<code>html</code>部分为响应正文。</li></ol><h2 id="1-3-http状态码"><a href="#1-3-http状态码" class="headerlink" title="1.3 http状态码"></a>1.3 http状态码</h2><p>状态代码有三位数字组成，第一个数字定义了响应的类别，共分五种类别:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs txt">1xx:指示信息--表示请求已接收，继续处理<br><br>2xx:成功--表示请求已被成功接收、理解、接受<br><br>3xx:重定向--要完成请求必须进行更进—步的操作(网络地址的重新访问)<br><br>4xx:客户端错误--请求有语法错误或请求无法实现<br><br>5xx:服务器端错误--服务器未能实现合法的请求<br></code></pre></td></tr></table></figure><p>常见状态码</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs txt">200 OK客户端请求成功<br>400 Bad Request客户端请求有语法错误，不能被服务器所理解<br>401 Unauthorized请求未经授权，这个状态代码必须和Www-Authenticate报头域一起使用<br>403 Forbidden 服务器收到请求，但是拒绝提供服务<br>404 Not Found 请求资源不存在，eg:输入了错误的URL<br>500 Internal Server Error服务器发生不可预期的错误<br>503 Server Unavailable 服务器当前不能处理客户端的请求，一段时间后可能恢复正常<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>http</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux下git使用</title>
    <link href="/2023/10/09/Linux%E4%B8%8Bgit%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/10/09/Linux%E4%B8%8Bgit%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>简单介绍git的基本命令</p><span id="more"></span><h1 id="Linux下Git使用"><a href="#Linux下Git使用" class="headerlink" title="Linux下Git使用"></a>Linux下Git使用</h1><h3 id="1-git的安装"><a href="#1-git的安装" class="headerlink" title="1. git的安装"></a>1. git的安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install git<br></code></pre></td></tr></table></figure><p>安装完，使用<code>git --version</code>查看git版本</p><h3 id="2-配置git"><a href="#2-配置git" class="headerlink" title="2. 配置git"></a>2. 配置git</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global user.name &quot;Your Name“##配置用户 <br>git config --global user.email email@example.com##配置邮箱<br>git config --global --list##查看配置信息<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># --global 全局配置，所有仓库生效，不加就只对当前用户有效</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># --system 系统配置，对所有用户生效</span></span><br></code></pre></td></tr></table></figure><h3 id="3-新建版本库"><a href="#3-新建版本库" class="headerlink" title="3. 新建版本库"></a>3. 新建版本库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git init<br></code></pre></td></tr></table></figure><h3 id="4-工作区域与文件状态"><a href="#4-工作区域与文件状态" class="headerlink" title="4. 工作区域与文件状态"></a>4. 工作区域与文件状态</h3><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230920204530239.png" alt="image-20230920204530239"></p><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230920204638439.png" alt="image-20230920204638439"></p><h3 id="5-添加和提交文件"><a href="#5-添加和提交文件" class="headerlink" title="5. 添加和提交文件"></a>5. 添加和提交文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">git init##创建仓库<br>git status##查看仓库的状态<br>git add##添加到暂存库<br>git commit ##提交<br>git rm --cached &lt;file&gt;...##将文件从暂存区中去除<br>git log##查看提交记录<br>git ls-files##查看暂存区的文件<br>git commit -a -m &quot; &quot; #实现添加和提交两个步骤<br></code></pre></td></tr></table></figure><h3 id="3-回退版本"><a href="#3-回退版本" class="headerlink" title="3. 回退版本"></a>3. 回退版本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git reset --soft<br>git reset --hard<br>git reset --mixed<br></code></pre></td></tr></table></figure><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230921085607903.png" alt="image-20230921085607903"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git reset HEAD^##默认为mixed,回退一个版本<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs txt">HEAD 表示当前版本<br>HEAD^ 上一个版本<br>HEAD^^ 上上一个版本<br>HEAD^^^ 上上上一个版本<br>HEAD~0 表示当前版本<br>HEAD~1 上一个版本<br>HEAD^2 上上一个版本<br>HEAD^3 上上上一个版本<br>执行 git reset HEAD 以取消之前 git add 添加，但不希望包含在下一提交快照中的缓存<br></code></pre></td></tr></table></figure><p>误操作之后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git reflog##回溯日志<br>git reset --hard 版本号##回退<br></code></pre></td></tr></table></figure><h3 id="6-查看差异"><a href="#6-查看差异" class="headerlink" title="6. 查看差异"></a>6. 查看差异</h3><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230921091532989.png" alt="image-20230921091532989"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">git diff#默认比较工作区和暂存区之间的差异<br>git diff HEAD#比较工作区和版本库之间的差异<br>git diff --cached#比较暂存区和版本库之间的区别<br>git diff 版本号版本号#比较两个版本之间的差异<br>git diff HEAD~ HEAD#如回退版本<br></code></pre></td></tr></table></figure><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230921092511736.png" alt="image-20230921092511736"></p><h3 id="7-删除文件"><a href="#7-删除文件" class="headerlink" title="7. 删除文件"></a>7. 删除文件</h3><p>方法1：先删除本地文件，再提交</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm -rf 3.txt##删除本地中的文件<br>git add .##删除暂存区中的文件<br>git commit -m &#x27;deleted 3.txt&#x27;##删除工作区文件<br></code></pre></td></tr></table></figure><p>方法2</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git rm 2.txt##删除本地和暂存区中文件<br>git commit -m &#x27;deleted 2.txt&#x27;##删除工作区文件<br></code></pre></td></tr></table></figure><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230921093523261.png" alt="image-20230921093523261"></p><h3 id="8-忽略文件"><a href="#8-忽略文件" class="headerlink" title="8. 忽略文件"></a>8. 忽略文件</h3><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230921093644360.png" alt="image-20230921093644360"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;*.log&quot; &gt; .gitignore##表示忽略所有日志文件<br></code></pre></td></tr></table></figure><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230921094538072.png" alt="image-20230921094538072"></p><h3 id="9-远程仓库github"><a href="#9-远程仓库github" class="headerlink" title="9. 远程仓库github"></a>9. 远程仓库github</h3><p>注册github账号，创建仓库</p><h3 id="10-ssh配置和克隆仓库"><a href="#10-ssh配置和克隆仓库" class="headerlink" title="10. ssh配置和克隆仓库"></a>10. ssh配置和克隆仓库</h3><p>创建ssh密钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ~<br>cd .ssh#如果显示文件不存在，就之间执行以下命令<br>ssh-keygen -t rsa -b 4096 -C &quot;xxx@email.com&quot;#直接enter,如果是第二次执行，记得更改文件名，不然会覆盖之前的id_rsa文件，且不可逆<br></code></pre></td></tr></table></figure><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230921101312117.png" alt="image-20230921101312117"></p><p>执行之前的命令会生成以下两个文件，有.pub的是公钥文件，没有的是私钥文件，复制公钥文件到github的Settings里的ssh配置</p><p>如果是第一次配置就配置完了，如果是第二次，更改了文件名的，就需要新建一个config文件，内容为</p><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230921101639858.png" alt="image-20230921101639858"></p><p>意思是：当我们在访问github.com这个网站的时候。使用的是test这个文件里的密钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone git@github.com:xxx.git##克隆新建的远程仓库<br></code></pre></td></tr></table></figure><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230921102254407.png" alt="image-20230921102254407"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push##将本地文件推送到远程仓库<br></code></pre></td></tr></table></figure><h3 id="11-关联本地仓库和远程仓库"><a href="#11-关联本地仓库和远程仓库" class="headerlink" title="11. 关联本地仓库和远程仓库"></a>11. 关联本地仓库和远程仓库</h3><ol><li>本地无仓库</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;# fist-repo&quot; &gt;&gt; README.md<br>git init<br>git add README.md<br>git commit -m &quot;first commit&quot;<br>git branch -M main<br>git remote add origin git@github.com:xxx.git<br>git push -u origin main<br></code></pre></td></tr></table></figure><ol start="2"><li>本地已经有仓库</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git remote add origin git@github.com:xxx.git##添加一个远程仓库<br>git branch -M main##指定分支的名称为main<br>git push -u origin main##把本地的main分支与远程的orgin main分支关联<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git remote -v##查看本地仓库对应的远程仓库别名<br></code></pre></td></tr></table></figure><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230921103436235.png" alt="image-20230921103436235"></p><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230921103522078.png" alt="image-20230921103522078"></p><h3 id="12-分支"><a href="#12-分支" class="headerlink" title="12. 分支"></a>12. 分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">git branch#查看分支<br>git branchdev#新建分支dev<br>git checkout dev#切换到分支dev(有风险，有时会用来恢复文件)<br>git switch main#切换到分支main<br>git merge dev#将要被合并的分支(dev)合并到当前分支(main)<br>git log --graph --oneline --decorate --all##查看分支情况<br>git branch -d dev#删除分支(已经合并)<br>git branch -D dev#删除分支(未合并，强行删除)<br></code></pre></td></tr></table></figure><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230921140159925.png" alt="image-20230921140159925"></p><h3 id="13-回退和rebase"><a href="#13-回退和rebase" class="headerlink" title="13. 回退和rebase"></a>13. 回退和rebase</h3><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230921140826350.png" alt="image-20230921140826350"></p><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230921141221770.png" alt="image-20230921141221770"></p><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230921141308973.png" alt="image-20230921141308973"></p><h3 id="14-分支管理和工作流模型"><a href="#14-分支管理和工作流模型" class="headerlink" title="14. 分支管理和工作流模型"></a>14. 分支管理和工作流模型</h3><ol><li><strong>git flow模型</strong></li></ol><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/v2-04b62035a49e04e997d3cb05e22970a9_r.jpg" alt="img"></p><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/v2-f20d5d1eab3704639fe64531776b4bac_720w.webp" alt="img"></p><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/v2-c7b37d13cfb22d77c840bac3cceee6a7_r.jpg" alt="img"></p><ol start="2"><li><strong>github flow模型</strong></li></ol><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230921141728150.png" alt="image-20230921141728150"></p><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230921141750346.png" alt="image-20230921141750346"></p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux高性能服务器编程I</title>
    <link href="/2023/09/25/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8BI/"/>
    <url>/2023/09/25/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8BI/</url>
    
    <content type="html"><![CDATA[<p>今天的内容包括一些linux网络编程基本api和实现了TCP协议的服务端以及客户端。</p><span id="more"></span><h1 id="Linux高性能服务器编程笔记"><a href="#Linux高性能服务器编程笔记" class="headerlink" title="Linux高性能服务器编程笔记"></a>Linux高性能服务器编程笔记</h1><h3 id="主机字节序和网络字节序"><a href="#主机字节序和网络字节序" class="headerlink" title="主机字节序和网络字节序"></a>主机字节序和网络字节序</h3><p>大端字节序（网络字节序，数据传输，JAVA虚拟机）：高位字节存储在内存的低地址处</p><p>小端字节序（主机字节序，现代PC机）：低位字节存储在内存的低地址处</p><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230925111901112.png" alt="image-20230925111901112"></p><p>地址族类型通常与协议族类型相对应</p><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230925112244293.png" alt="image-20230925112244293"></p><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230925141532173.png" alt="image-20230925141532173"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc ,<span class="hljs-type">char</span> *argv[])</span>&#123;<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">192</span>,<span class="hljs-number">168</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;;<br>    <span class="hljs-type">int</span> num = *(<span class="hljs-type">int</span> *)buf;<br>    <span class="hljs-type">int</span> sum = htonl(num);<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *p = &amp;sum;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d %d\n&quot;</span>,*p,*(p+<span class="hljs-number">1</span>),*(p+<span class="hljs-number">2</span>),*(p+<span class="hljs-number">3</span>));<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span> </span>&#123;<br>   <span class="hljs-comment">//unsigned char buf[4] = &#123;192, 168, 1, 2&#125;;</span><br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">4</span>] = &#123;<span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">char</span>&gt;(<span class="hljs-number">192</span>), <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">char</span>&gt;(<span class="hljs-number">168</span>), <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">char</span>&gt;(<span class="hljs-number">1</span>), <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">char</span>&gt;(<span class="hljs-number">2</span>)&#125;;<br>    <br>    <span class="hljs-type">int</span> num = *(<span class="hljs-type">int</span> *)buf;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-built_in">htonl</span>(num);<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *p = <span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *&gt;(&amp;sum);<br><br>    std::cout &lt;&lt; <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(*p) &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(*(p + <span class="hljs-number">1</span>)) &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(*(p + <span class="hljs-number">2</span>)) &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(*(p + <span class="hljs-number">3</span>)) &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">2 </span><span class="hljs-number">1</span> <span class="hljs-number">168</span> <span class="hljs-number">192</span><br></code></pre></td></tr></table></figure><p>c语言代码转c++时，在初始化<code>buf</code>数组时，对于大于一个字节的整数，需要将其强制转换为<code>char</code>类型，使用<code>static_cast&lt;char&gt;(value)</code>进行转换即可。这样做可以避免<code>narrowing conversion</code>错误。</p><p><strong>网络里面的数据类型定义都应该用无符号，更加保险</strong></p><h3 id="点分十进制转换"><a href="#点分十进制转换" class="headerlink" title="点分十进制转换"></a>点分十进制转换</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">// src为 点分十进制字符串的IPv4地址 或 十六进制字符串表示的IPv6地址 存入dst的内存中 af指定地址族<br>// 可以为 AF_INET AF_INET6 成功返回1 失败返回-1<br>int inet_pton(int af, const char * src, void* dst);<br>// 协议名, 需要转换的ip, 存储地址, 长度(有两个常量 INET_ADDRSTRLEN, INET6_ADDRSTRLEN)<br>const char* inet_ntop(int af, const void*  src, char* dst, socklen_t cnt);<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs txt">// 创建 命名 监听 socket<br># include &lt;sys/types.h&gt;<br># include &lt;sys/socket.h&gt;<br>// domain指定使用那个协议族 PF_INET PF_INET6<br>// type指定服务类型 SOCK_STREAM (TCP协议) SOCK_DGRAM(UDP协议)<br>// protocol设置为默认的0<br>// 成功返回socket文件描述符(linux一切皆文件), 失败返回-1<br>int socket(int domain, int type, int protocol);<br><br>// socket为socket文件描述符<br>// my_addr 为地址信息<br>// addrlen为socket地址长度<br>// 成功返回0 失败返回 -1<br>int bind(int socket, const struct sockaddr* my_addr, socklen_t addrlen);<br><br>// backlog表示队列最大的长度<br>int listen(int socket, int backlog);<br>// 接受连接 失败返回-1 成功时返回socket<br>int accept(int sockfd, struct sockaddr* addr, socklen_t* addrlen)<br></code></pre></td></tr></table></figure><p>在Linux内核2.2之后，<code>socket backlog</code>参数的形为改变了，<strong>现在它指等待<code>accept</code>的<code>完全建立</code>的套接字的队列长度</strong>，而不是不完全连接请求的数量。 <strong>不完全连接</strong>的长度可以使用<code>/proc/sys/net/ipv4/tcp_max_syn_backlog</code>设置。这意味着当前Linux版本使用上面第二种说法，有两个队列：具有由系统范围设置指定的大小的<code>SYN队列</code> 和 应用程序（也就是backlog参数）指定的<code>accept</code>队列。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /proc/sys/net/ipv4/tcp_max_syn_backlog<br>512<br></code></pre></td></tr></table></figure><h3 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a><strong>TCP协议</strong></h3><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230926154633974.png" alt="image-20230926154633974"></p><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230927104224676.png" alt="TCP协议流程"></p><h4 id="TCP三次握手"><a href="#TCP三次握手" class="headerlink" title="TCP三次握手"></a>TCP三次握手</h4><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/20170305084830550" alt="这里写图片描述"></p><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">// 1. 创建套接字</span><br>    <span class="hljs-type">int</span> socket_fd;<br>    socket_fd = <span class="hljs-built_in">socket</span>(AF_INET,SOCK_STREAM,<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">// 2. 连接服务器</span><br>    <span class="hljs-keyword">struct</span>  <span class="hljs-title class_">sockaddr_in</span> addr;<br>    addr.sin_family = AF_INET;<br>    addr.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">8080</span>);<br>    <span class="hljs-built_in">inet_pton</span>(AF_INET,<span class="hljs-string">&quot;172.18.192.1&quot;</span>,&amp;addr.sin_addr.s_addr);<br>    <br>    <span class="hljs-built_in">connect</span>(socket_fd,(<span class="hljs-keyword">struct</span> sockaddr*)&amp;addr,<span class="hljs-built_in">sizeof</span>(addr));<br>    <span class="hljs-comment">// 3. 读写数据</span><br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">1024</span>] = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-type">int</span> n = <span class="hljs-built_in">read</span>(STDIN_FILENO,buf,<span class="hljs-built_in">sizeof</span>(buf));<br>        <span class="hljs-built_in">write</span>(socket_fd,buf,n);     <span class="hljs-comment">//发送数据给服务器</span><br>        n = <span class="hljs-built_in">read</span>(socket_fd,buf,<span class="hljs-built_in">sizeof</span>(buf));<br>        <span class="hljs-built_in">write</span>(STDOUT_FILENO,buf,<span class="hljs-built_in">sizeof</span>(buf));<br>    &#125;<br>    <span class="hljs-comment">// 4. 关闭链接</span><br>    <span class="hljs-built_in">close</span>(socket_fd);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br>    <span class="hljs-comment">// 1. 创建套接字</span><br>    <span class="hljs-type">int</span> socket_fd;<br>    socket_fd = <span class="hljs-built_in">socket</span>(AF_INET,SOCK_STREAM,<span class="hljs-number">0</span>);<br>    cout&lt;&lt;socket_fd&lt;&lt;endl;<br>    <span class="hljs-comment">// 2. 绑定 bind</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> addr;<br>    addr.sin_family = AF_INET;<br>    addr.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">8010</span>);<br>    addr.sin_addr.s_addr = <span class="hljs-number">0</span>;   <span class="hljs-comment">//如果是0，绑定的是通配地址</span><br>   <span class="hljs-comment">// inet_pton(AF_INET,&quot;192.168.0.102&quot;,&amp;addr.sin_addr.s_addr);</span><br>    <span class="hljs-type">int</span> ret = <span class="hljs-built_in">bind</span>(socket_fd,(<span class="hljs-keyword">struct</span> sockaddr *)&amp;addr,<span class="hljs-built_in">sizeof</span>(addr));<br>    <span class="hljs-keyword">if</span>(ret &lt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-comment">// 3. 监听 listen</span><br>    <span class="hljs-built_in">listen</span>(socket_fd,<span class="hljs-number">128</span>);  <span class="hljs-comment">//参数128是等待监听队列和已连接监听队列之和的最大值（linux2.2后，只表示已连接</span><br>队列）<br>    <span class="hljs-comment">// 4. 提取 accept</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> cliaddr; <span class="hljs-comment">//已建立连接</span><br>    <span class="hljs-type">socklen_t</span> len = <span class="hljs-built_in">sizeof</span>(cliaddr);<br>    <span class="hljs-type">int</span> Con_fd = <span class="hljs-built_in">accept</span>(socket_fd,(<span class="hljs-keyword">struct</span> sockaddr *)&amp;cliaddr,&amp;len);  <span class="hljs-comment">//已连接套接字</span><br>    <span class="hljs-type">char</span> ip[<span class="hljs-number">16</span>]=<span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;new client ip=%s port=%d\n&quot;</span>,<span class="hljs-built_in">inet_ntop</span>(AF_INET, &amp;cliaddr.sin_addr.s_addr,ip,<span class="hljs-number">16</span>),<span class="hljs-built_in">ntohs</span>(cliaddr.sin_port));<br>    <span class="hljs-comment">// 5. 读写</span><br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">1024</span>] = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">bzero</span>(buf,<span class="hljs-built_in">sizeof</span>(buf));     <span class="hljs-comment">//清空buff</span><br>        <span class="hljs-type">int</span> n = <span class="hljs-built_in">read</span>(STDIN_FILENO,buf,<span class="hljs-built_in">sizeof</span>(buf));<br>        <span class="hljs-built_in">write</span>(Con_fd,buf,n);<br>        n = <span class="hljs-built_in">read</span>(Con_fd,buf,<span class="hljs-built_in">sizeof</span>(buf));<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,buf);<br>        <br>    &#125;<br>    <span class="hljs-comment">// 6. 关闭</span><br>    <span class="hljs-built_in">close</span>(socket_fd);<br>    <span class="hljs-built_in">close</span>(Con_fd);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以使用命令<code> nc 127.0.0.1 8008</code>连接服务器</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">new client ip=127.0.0.1 port=56918<br></code></pre></td></tr></table></figure><h4 id="出错处理封装函数"><a href="#出错处理封装函数" class="headerlink" title="出错处理封装函数"></a>出错处理封装函数</h4><h5 id="warp-c"><a href="#warp-c" class="headerlink" title="warp.c"></a>warp.c</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">perr_exit</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *s)</span><br>&#123;<br>perror(s);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">Accept</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-keyword">struct</span> sockaddr *sa, <span class="hljs-type">socklen_t</span> *salenptr)</span><br>&#123;<br><span class="hljs-type">int</span> n;<br>again:<br><span class="hljs-keyword">if</span> ( (n = accept(fd, sa, salenptr)) &lt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">if</span> ((errno == ECONNABORTED) || (errno == EINTR))<br><span class="hljs-keyword">goto</span> again;<br><span class="hljs-keyword">else</span><br>perr_exit(<span class="hljs-string">&quot;accept error&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> n;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">Bind</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> sockaddr *sa, <span class="hljs-type">socklen_t</span> salen)</span><br>&#123;<br><span class="hljs-type">int</span> n;<br><span class="hljs-keyword">if</span> ((n = bind(fd, sa, salen)) &lt; <span class="hljs-number">0</span>)<br>perr_exit(<span class="hljs-string">&quot;bind error&quot;</span>);<br><span class="hljs-keyword">return</span> n;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">Connect</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> sockaddr *sa, <span class="hljs-type">socklen_t</span> salen)</span><br>&#123;<br><span class="hljs-type">int</span> n;<br><span class="hljs-keyword">if</span> ((n = connect(fd, sa, salen)) &lt; <span class="hljs-number">0</span>)<br>perr_exit(<span class="hljs-string">&quot;connect error&quot;</span>);<br><span class="hljs-keyword">return</span> n;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">Listen</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">int</span> backlog)</span><br>&#123;<br><span class="hljs-type">int</span> n;<br><span class="hljs-keyword">if</span> ((n = listen(fd, backlog)) &lt; <span class="hljs-number">0</span>)<br>perr_exit(<span class="hljs-string">&quot;listen error&quot;</span>);<br><span class="hljs-keyword">return</span> n;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">Socket</span><span class="hljs-params">(<span class="hljs-type">int</span> family, <span class="hljs-type">int</span> type, <span class="hljs-type">int</span> protocol)</span><br>&#123;<br><span class="hljs-type">int</span> n;<br><span class="hljs-keyword">if</span> ( (n = socket(family, type, protocol)) &lt; <span class="hljs-number">0</span>)<br>perr_exit(<span class="hljs-string">&quot;socket error&quot;</span>);<br><span class="hljs-keyword">return</span> n;<br>&#125;<br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">Read</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">void</span> *ptr, <span class="hljs-type">size_t</span> nbytes)</span><br>&#123;<br><span class="hljs-type">ssize_t</span> n;<br>again:<br><span class="hljs-keyword">if</span> ( (n = read(fd, ptr, nbytes)) == <span class="hljs-number">-1</span>) &#123;<br><span class="hljs-keyword">if</span> (errno == EINTR)<br><span class="hljs-keyword">goto</span> again;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> n;<br>&#125;<br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">Write</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *ptr, <span class="hljs-type">size_t</span> nbytes)</span><br>&#123;<br><span class="hljs-type">ssize_t</span> n;<br>again:<br><span class="hljs-keyword">if</span> ( (n = write(fd, ptr, nbytes)) == <span class="hljs-number">-1</span>) &#123;<br><span class="hljs-keyword">if</span> (errno == EINTR)<br><span class="hljs-keyword">goto</span> again;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> n;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">Close</span><span class="hljs-params">(<span class="hljs-type">int</span> fd)</span><br>&#123;<br><span class="hljs-type">int</span> n;<br><span class="hljs-keyword">if</span> ((n = close(fd)) == <span class="hljs-number">-1</span>)<br>perr_exit(<span class="hljs-string">&quot;close error&quot;</span>);<br><span class="hljs-keyword">return</span> n;<br>&#125;<br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">Readn</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">void</span> *vptr, <span class="hljs-type">size_t</span> n)</span><br>&#123;<br><span class="hljs-type">size_t</span> nleft;<br><span class="hljs-type">ssize_t</span> nread;<br><span class="hljs-type">char</span> *ptr;<br><br>ptr = vptr;<br>nleft = n;<br><br><span class="hljs-keyword">while</span> (nleft &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">if</span> ( (nread = read(fd, ptr, nleft)) &lt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">if</span> (errno == EINTR)<br>nread = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nread == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">break</span>;<br>nleft -= nread;<br>ptr += nread;<br>&#125;<br><span class="hljs-keyword">return</span> n - nleft;<br>&#125;<br><br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">Writen</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *vptr, <span class="hljs-type">size_t</span> n)</span><br>&#123;<br><span class="hljs-type">size_t</span> nleft;<br><span class="hljs-type">ssize_t</span> nwritten;<br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *ptr;<br><br>ptr = vptr;<br>nleft = n;<br><br><span class="hljs-keyword">while</span> (nleft &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">if</span> ( (nwritten = write(fd, ptr, nleft)) &lt;= <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">if</span> (nwritten &lt; <span class="hljs-number">0</span> &amp;&amp; errno == EINTR)<br>nwritten = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>nleft -= nwritten;<br>ptr += nwritten;<br>&#125;<br><span class="hljs-keyword">return</span> n;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">ssize_t</span> <span class="hljs-title function_">my_read</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">char</span> *ptr)</span><br>&#123;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> read_cnt;<br><span class="hljs-type">static</span> <span class="hljs-type">char</span> *read_ptr;<br><span class="hljs-type">static</span> <span class="hljs-type">char</span> read_buf[<span class="hljs-number">100</span>];<br><br><span class="hljs-keyword">if</span> (read_cnt &lt;= <span class="hljs-number">0</span>) &#123;<br>again:<br><span class="hljs-keyword">if</span> ((read_cnt = read(fd, read_buf, <span class="hljs-keyword">sizeof</span>(read_buf))) &lt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">if</span> (errno == EINTR)<br><span class="hljs-keyword">goto</span> again;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (read_cnt == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>read_ptr = read_buf;<br>&#125;<br>read_cnt--;<br>*ptr = *read_ptr++;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">Readline</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">void</span> *vptr, <span class="hljs-type">size_t</span> maxlen)</span><br>&#123;<br><span class="hljs-type">ssize_t</span> n, rc;<br><span class="hljs-type">char</span> c, *ptr;<br>ptr = vptr;<br><br><span class="hljs-keyword">for</span> (n = <span class="hljs-number">1</span>; n &lt; maxlen; n++) &#123;<br><span class="hljs-keyword">if</span> ( (rc = my_read(fd, &amp;c)) == <span class="hljs-number">1</span>) &#123;<br>*ptr++ = c;<br><span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;\n&#x27;</span>)<br><span class="hljs-keyword">break</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rc == <span class="hljs-number">0</span>) &#123;<br>*ptr = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> n - <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>*ptr = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> n;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="warp-h"><a href="#warp-h" class="headerlink" title="warp.h"></a>warp.h</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __WRAP_H_</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __WRAP_H_</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">perr_exit</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *s)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Accept</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-keyword">struct</span> sockaddr *sa, <span class="hljs-type">socklen_t</span> *salenptr)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Bind</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> sockaddr *sa, <span class="hljs-type">socklen_t</span> salen)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Connect</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> sockaddr *sa, <span class="hljs-type">socklen_t</span> salen)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Listen</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">int</span> backlog)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Socket</span><span class="hljs-params">(<span class="hljs-type">int</span> family, <span class="hljs-type">int</span> type, <span class="hljs-type">int</span> protocol)</span></span>;<br><span class="hljs-function"><span class="hljs-type">ssize_t</span> <span class="hljs-title">Read</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">void</span> *ptr, <span class="hljs-type">size_t</span> nbytes)</span></span>;<br><span class="hljs-function"><span class="hljs-type">ssize_t</span> <span class="hljs-title">Write</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *ptr, <span class="hljs-type">size_t</span> nbytes)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Close</span><span class="hljs-params">(<span class="hljs-type">int</span> fd)</span></span>;<br><span class="hljs-function"><span class="hljs-type">ssize_t</span> <span class="hljs-title">Readn</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">void</span> *vptr, <span class="hljs-type">size_t</span> n)</span></span>;<br><span class="hljs-function"><span class="hljs-type">ssize_t</span> <span class="hljs-title">Writen</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *vptr, <span class="hljs-type">size_t</span> n)</span></span>;<br><span class="hljs-function"><span class="hljs-type">ssize_t</span> <span class="hljs-title">my_read</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">char</span> *ptr)</span></span>;<br><span class="hljs-function"><span class="hljs-type">ssize_t</span> <span class="hljs-title">Readline</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">void</span> *vptr, <span class="hljs-type">size_t</span> maxlen)</span></span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br></code></pre></td></tr></table></figure><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230927104030417.png" alt="image-20230927104030417"></p><h3 id="多进程服务端"><a href="#多进程服务端" class="headerlink" title="多进程服务端"></a>多进程服务端</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br> <br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BUF_SIZE 256</span><br> <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">do_sigchld</span><span class="hljs-params">(<span class="hljs-type">int</span> signo, <span class="hljs-type">siginfo_t</span> *siginfo, <span class="hljs-type">void</span> *p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> status;<br>    <span class="hljs-type">pid_t</span> pid;<br>    <span class="hljs-keyword">while</span>((pid = <span class="hljs-built_in">waitpid</span>(<span class="hljs-number">0</span>, &amp;status, WNOHANG)) &gt; <span class="hljs-number">0</span>) <span class="hljs-comment">//0:回收跟调用进程同组的子进程的资源，WNOHANG:不阻塞</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">WIFEXITED</span>(status))<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;pid = %d, parent pid = %d, child pid = %d, exit status %d\n&quot;</span>, pid, <span class="hljs-built_in">getpid</span>(), siginfo-&gt;si_pid, <span class="hljs-built_in">WEXITSTATUS</span>(status));<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">WEXITSTATUS</span>(status))<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;pid = %d, parent pid = %d, child pid = %d, exit by signal %d\n &quot;</span>, pid, <span class="hljs-built_in">getpid</span>(), siginfo-&gt;si_pid, <span class="hljs-built_in">WIFSIGNALED</span>(status));<br>    &#125;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sys_err</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *str, <span class="hljs-type">int</span> err)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">perror</span>(str);<br>    <span class="hljs-built_in">exit</span>(err);<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (argc &lt; <span class="hljs-number">2</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s port\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-comment">//创建流式套接字</span><br>    <span class="hljs-type">int</span> lfd = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (lfd &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">sys_err</span>(<span class="hljs-string">&quot;socket&quot;</span>, <span class="hljs-number">1</span>);<br> <br>    <span class="hljs-comment">//绑定ip端口    </span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> server_addr;<br>    server_addr.sin_family = AF_INET;<br>    server_addr.sin_port = <span class="hljs-built_in">htons</span>((<span class="hljs-type">unsigned</span> <span class="hljs-type">short</span>)<span class="hljs-built_in">atoi</span>(argv[<span class="hljs-number">1</span>]));<br>    server_addr.sin_addr.s_addr = <span class="hljs-number">0</span>; <span class="hljs-comment">//0表示将本机所有ip都绑定上</span><br>    <span class="hljs-type">int</span> ret = <span class="hljs-built_in">bind</span>(lfd, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;server_addr, <span class="hljs-built_in">sizeof</span>(server_addr));<br>    <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">sys_err</span>(<span class="hljs-string">&quot;bind&quot;</span>, <span class="hljs-number">1</span>);<br>    <br>    <span class="hljs-comment">//监听</span><br>    ret = <span class="hljs-built_in">listen</span>(lfd, <span class="hljs-number">128</span>);<br>    <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">sys_err</span>(<span class="hljs-string">&quot;listen&quot;</span>, <span class="hljs-number">1</span>);<br>    <br>    <span class="hljs-comment">//阻塞SIGCHLD信号</span><br>    <span class="hljs-type">sigset_t</span> set;<br>    <span class="hljs-built_in">sigemptyset</span>(&amp;set);<br>    <span class="hljs-built_in">sigaddset</span>(&amp;set, SIGCHLD);<br>    <span class="hljs-built_in">sigprocmask</span>(SIG_BLOCK, &amp;set, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-type">int</span> block = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//循环提取</span><br>    <span class="hljs-type">int</span> cfd;<br>    <span class="hljs-type">pid_t</span> pid;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> client_addr; <br>    <span class="hljs-type">socklen_t</span> len = <span class="hljs-built_in">sizeof</span>(client_addr);<br>    <span class="hljs-type">char</span> buf[BUF_SIZE];<br>    <span class="hljs-type">ssize_t</span> size;<br>    <span class="hljs-type">char</span> ip[INET_ADDRSTRLEN] = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>    &#123;<br>        cfd = <span class="hljs-built_in">accept</span>(lfd, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;client_addr, &amp;len);<br>        <span class="hljs-keyword">if</span> (cfd &lt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (errno == EINTR)<br>                <span class="hljs-keyword">continue</span>;<br> <br>            <span class="hljs-built_in">sys_err</span>(<span class="hljs-string">&quot;accept&quot;</span>, <span class="hljs-number">1</span>);<br>        &#125;<br> <br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;client ip = %s, port = %d connect success\n&quot;</span>, <span class="hljs-built_in">inet_ntop</span>(AF_INET, &amp;client_addr.sin_addr.s_addr, ip, <span class="hljs-built_in">sizeof</span>(ip)), <span class="hljs-built_in">ntohs</span>(client_addr.sin_port));<br>        pid = fork();<br>        <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-comment">//in child</span><br>            <span class="hljs-built_in">close</span>(lfd); <span class="hljs-comment">//关闭不用了的监听套接字</span><br>            <span class="hljs-comment">//解除阻塞SIGCHLD信号</span><br>            <span class="hljs-built_in">sigprocmask</span>(SIG_UNBLOCK, &amp;set, <span class="hljs-literal">NULL</span>);<br>            block = <span class="hljs-number">0</span>;<br> <br>            <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>            &#123;<br>                <span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(buf));<br>                size = <span class="hljs-built_in">read</span>(cfd, buf, <span class="hljs-built_in">sizeof</span>(buf));<br>                <span class="hljs-keyword">if</span> (size == <span class="hljs-number">0</span>) <span class="hljs-comment">//客户端断开连接</span><br>                &#123;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;client close\n&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br> <br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, buf);<br>                <span class="hljs-built_in">write</span>(cfd, buf, size);<br>            &#125;<br> <br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid &gt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-comment">//in parent</span><br>            <span class="hljs-built_in">close</span>(cfd); <span class="hljs-comment">//关闭不用了的跟客户端通讯的套接字</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-number">1</span> == block)<br>            &#123;<br>                <span class="hljs-comment">//先捕捉</span><br>                <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sigaction</span> sa;<br>                sa.sa_sigaction = do_sigchld;<br>                <span class="hljs-built_in">sigemptyset</span>(&amp;sa.sa_mask);<br>                sa.sa_flags = SA_SIGINFO;<br>                <span class="hljs-built_in">sigaction</span>(SIGCHLD, &amp;sa, <span class="hljs-literal">NULL</span>);<br>                <span class="hljs-comment">//后解除阻塞</span><br>                <span class="hljs-built_in">sigprocmask</span>(SIG_UNBLOCK, &amp;set, <span class="hljs-literal">NULL</span>);<br>                block = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">sys_err</span>(<span class="hljs-string">&quot;fork&quot;</span>, <span class="hljs-number">1</span>);<br>    &#125;<br>    <br>    <span class="hljs-comment">//关闭套接字</span><br>    <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">close</span>(cfd);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid &gt; <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">close</span>(lfd);<br> <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs h">new client ip=<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> port=<span class="hljs-number">53766</span><br>w<br><br>new client ip=<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> port=<span class="hljs-number">53768</span><br>q<br></code></pre></td></tr></table></figure><p><code>free_process</code> 函数是用于处理子进程的结束的信号处理函数。当子进程结束时，父进程会收到 <code>SIGCHLD</code> 信号，该信号会触发 <code>free_process</code> 函数。这个函数使用 <code>waitpid</code> 函数来回收子进程，避免它们成为僵尸进程。</p><h4 id="多线程服务端"><a href="#多线程服务端" class="headerlink" title="多线程服务端"></a>多线程服务端</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;wrap.h&quot;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">c_info</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span> cfd;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">cliaddr</span>;</span><br>&#125;CINFO;<br><br><span class="hljs-type">void</span>* <span class="hljs-title function_">client_fun</span><span class="hljs-params">(<span class="hljs-type">void</span> *arg)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span>&#123;<br><br>    <span class="hljs-keyword">if</span>(argc &lt; <span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;argc &lt; 2  \n ./test 8000\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">pthread_attr_t</span> attr;<br>    pthread_attr_init(&amp;attr);<br>    pthread_attr_setdetachstate(&amp;attr,PTHREAD_CREATE_DETACHED); <span class="hljs-comment">//设置线程的分离状态为分离态,线程在退出后会自动释放其资源，而不需要其他线程等待它结束。</span><br>    <span class="hljs-type">short</span> port = atoi(argv[<span class="hljs-number">1</span>]);<br>    <span class="hljs-type">int</span> lfd = tcp4bind(port,<span class="hljs-literal">NULL</span>);  <span class="hljs-comment">//创建套接字，绑定</span><br>    Listen(lfd,<span class="hljs-number">5</span>);<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">cliaddr</span>;</span><br>    <span class="hljs-type">socklen_t</span> len = <span class="hljs-keyword">sizeof</span>(cliaddr);<br>    CINFO *info;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-type">int</span> cfd = Accept(lfd,(<span class="hljs-keyword">struct</span> sockaddr *)&amp;cliaddr,&amp;len);<br>        <span class="hljs-type">char</span> ip[<span class="hljs-number">16</span>]=<span class="hljs-string">&quot;&quot;</span>;<br>       <span class="hljs-comment">// printf(&quot;new client ip=%s port=%d\n&quot;,inet_ntop(AF_INET,&amp;cliaddr.sin_addr.s_addr,ip,16),ntohs(cliaddr.sin_port));</span><br><br>        <span class="hljs-type">pthread_t</span> pthid;<br>        info = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(CINFO));<br>        info-&gt;cfd = cfd;<br>        info-&gt;cliaddr = cliaddr;<br>       <span class="hljs-comment">// pthread_create(&amp;pthid,NULL,client_fun,info);</span><br>         pthread_create(&amp;pthid,&amp;attr,client_fun,info);<br>    &#125;<br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">void</span>* <span class="hljs-title function_">client_fun</span><span class="hljs-params">(<span class="hljs-type">void</span> *arg)</span>&#123;<br>    CINFO *info = (CINFO *)arg;<br>    <span class="hljs-type">char</span> ip[<span class="hljs-number">16</span>];<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;new client ip=%s port=%d\n&quot;</span>,inet_ntop(AF_INET,&amp;info-&gt;cliaddr.sin_addr.s_addr,ip,<span class="hljs-number">16</span>),ntohs(info-&gt;cliaddr.sin_port));<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-type">char</span> buf[<span class="hljs-number">1024</span>]=<span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-type">int</span> n = read(info-&gt;cfd,buf,<span class="hljs-keyword">sizeof</span>(buf));<br>        <span class="hljs-keyword">if</span>(n &lt; <span class="hljs-number">0</span>)&#123;<br>            perror(<span class="hljs-string">&quot;&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(n == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;client close\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,buf);<br>            write(info-&gt;cfd,buf,n);<br>        &#125;<br>    &#125;<br>    close(info-&gt;cfd);<br>    <span class="hljs-built_in">free</span>(info);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="端口复用"><a href="#端口复用" class="headerlink" title="端口复用"></a>端口复用</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> opt = <span class="hljs-number">1</span>;<br>setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, &amp;opt, <span class="hljs-keyword">sizeof</span>(opt));<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
      <tag>linux</tag>
      
      <tag>c</tag>
      
      <tag>网络编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++核心编程I</title>
    <link href="/2023/09/18/C-%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8BI/"/>
    <url>/2023/09/18/C-%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8BI/</url>
    
    <content type="html"><![CDATA[<p>今天的内容包括内存分区模型、内联函数和拷贝构造函数。</p><span id="more"></span><h1 id="C-核心编程"><a href="#C-核心编程" class="headerlink" title="C++核心编程"></a>C++核心编程</h1><h3 id="1-内存分区模型"><a href="#1-内存分区模型" class="headerlink" title="1. 内存分区模型"></a>1. 内存分区模型</h3><ul><li>代码区：存放函数的二进制代码，由操作系统进行管理</li><li>全局区：存放全局变量和静态变量以及常量</li><li>栈区：由编译器自动分配释放，存放函数的参数值，局部变量等</li><li>堆区：由程序员分配和释放，若程序员不释放，程序结束由操作系统释放</li></ul><h3 id="2-内联函数"><a href="#2-内联函数" class="headerlink" title="2. 内联函数"></a>2. 内联函数</h3><p>在C++中，使用关键字 <code>inline</code> 可以将函数定义为内联函数。内联函数的特点是它们的定义必须在每个调用它们的源文件中可见，通常这意味着函数的定义通常会写在头文件（.h）中。</p><p>目的：在编译时将函数的代码嵌入到调用它们的地方，而不是像普通函数一样在链接时进行函数调用。因此，如果函数定义不在可见范围内，编译器无法将其内联到调用点。</p><p><strong>在头文件中声明内联函数的原型（函数声明），并在同一头文件中定义函数的具体实现。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">#构造函数可以直接赋初值，构造函数特性<br><span class="hljs-built_in">complex</span> (<span class="hljs-type">double</span> r = <span class="hljs-number">0</span>, <span class="hljs-type">double</span> i = <span class="hljs-number">0</span>) : <span class="hljs-built_in">re</span>(r),<span class="hljs-built_in">im</span>(i)&#123;&#125;<br></code></pre></td></tr></table></figure><p><em><strong>1. 不带指针的构造函数多半不需要写析构函数</strong></em>     <strong>如果class里面带指针，就必须有拷贝构造和拷贝复制</strong></p><p><strong>2. 写在class里面的方法是内联函数（建议编译器内联，最后还是看编译器）</strong></p><p><em><strong>3. 数据一定要放在private里面，构造函数可以放在private里面，详情见后</strong></em></p><p>以下的常成员函数在常量对象调用时起作用，若没加 <code>const</code>常量对象调用时会报错 ,所以该加<code>const</code>的地方一定要加</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">real</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> re; &#125;  #常成员函数<br><br></code></pre></td></tr></table></figure><ul><li><p><em><strong>参数传递尽量用引用，返回也是</strong></em></p></li><li><p><em><strong>同一个class的不同object之间互为友元（firend)</strong></em></p></li><li><p><em><strong>临时对象  typename ()</strong></em></p></li><li><p><strong>如果class里面带指针，就必须有拷贝构造和拷贝复制</strong></p></li></ul><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230920163619993.png" alt="image-20230920163619993" style="zoom:50%;" /><p>​浅拷贝：只拷贝指针</p><p>b &#x3D; a,如果使用编译器默认的函数，是浅拷贝，有可能导致内存泄漏</p><h3 id="3-拷贝构造函数"><a href="#3-拷贝构造函数" class="headerlink" title="3. 拷贝构造函数"></a>3. <strong>拷贝构造函数</strong></h3><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230920163938278.png" alt="image-20230920163938278"></p><pre><code class="hljs">                                                深拷贝:复制内存</code></pre><p><strong>拷贝赋值函数</strong>：把左边拷贝的右边分三步：1. 先把右边清空，2. 重新分配右边跟左边一样大的内存，3. 拷贝</p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230920164727873.png" alt="image-20230920164727873" style="zoom:50%;" /><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230920200351109.png" alt="12"></p><p>变量可以声明多次，但只能定义一次</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> a;#声明<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;   #定义<br></code></pre></td></tr></table></figure><p><strong>静态函数属于类，而不属于对象</strong></p><p><strong>模板类在编译时要把.h文件和.cpp文件都要添加</strong></p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
