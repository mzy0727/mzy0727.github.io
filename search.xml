<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>sprintf与snprintf区别</title>
      <link href="/2023/11/21/sprintf%E4%B8%8Esnprintf%E5%8C%BA%E5%88%AB/"/>
      <url>/2023/11/21/sprintf%E4%B8%8Esnprintf%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="sprintf与snprintf区别"><a href="#sprintf与snprintf区别" class="headerlink" title="sprintf与snprintf区别"></a>sprintf与snprintf区别</h2><pre class="line-numbers language-c++"><code class="language-c++">  int sprintf(char *str, const char &format, ...);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>sprintf</code>是字符串格式化命令，主要功能是把<strong>格式化的数据写入字符串</strong><code>str</code>中，返回值为写入<code>str</code>的字节数，<strong>结束字符<code>\0</code>不计入内</strong>。其中， <code>str</code>是指要写入的缓冲区，<code>format</code>控制要写入<code>str</code>中数据的格式，例如<code>%s、%d、%x</code>等。</p><pre class="line-numbers language-c++"><code class="language-c++">int snprintf(char *str, size_t size, const char *format, ...);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>snprintf</code>是字符串格式化命令，主要功能是把<strong>格式化的数据写入字符串</strong><code>str</code>中，最多写<code>size</code>个字节，包括自动添加在字符串末尾处的结束字符<code>\0</code>;返回值为写入<code>str</code>的字节数，**包括结束字符<code>\0</code>**。</p><p><strong><code>sprintf</code>函数返回的是实际输出到字符串缓冲中的字符个数,而<code>snprintf</code>函数返回的是应该输出到字符串缓冲的字符个数</strong></p><pre class="line-numbers language-c++"><code class="language-c++">#define snprintf_nowarn(...) (snprintf(__VA_ARGS__) < 0 ? abort() : (void)0)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该宏用于调用 <code>snprintf</code> 函数，并检查其返回值是否小于 0。<code>snprintf</code> 函数是一个安全的字符串格式化函数，用于将格式化的数据写入字符串。这里的目的是在调用 <code>snprintf</code> 时，如果返回值小于 0，就调用 <code>abort()</code> 函数，中止程序运行，以防止潜在的错误。</p>]]></content>
      
      
      <categories>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言中&quot;#&quot;和&quot;##&quot;的用法</title>
      <link href="/2023/11/21/C%E8%AF%AD%E8%A8%80%E4%B8%AD-%E5%92%8C-%E7%9A%84%E7%94%A8%E6%B3%95/"/>
      <url>/2023/11/21/C%E8%AF%AD%E8%A8%80%E4%B8%AD-%E5%92%8C-%E7%9A%84%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="C语言中”-”和”-”的用法"><a href="#C语言中”-”和”-”的用法" class="headerlink" title="C语言中”#”和”##”的用法"></a>C语言中”#”和”##”的用法</h2><p>#把宏参数变为一个字符串</p><p>##把两个宏参数贴合在一起</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;climits></span></span>using namespace std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> STR(s)     #s</span><span class="token macro property">#<span class="token directive keyword">define</span> CONS(a,b)  int(a##e##b)</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token function">STR</span><span class="token punctuation">(</span>abc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 输出字符串"abc"</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">CONS</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 2e3 输出:2000</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-txt"><code class="language-txt">abc2000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div class="note success"><p>当宏参数是另一个宏的时候，需要注意的是凡宏定义里有用<code>#</code>或<code>##</code>的地方宏参数是不会再展开。 <strong>只有当前宏生效, 参数里的宏不会生效</strong> ！！！</p></div><p>举例</p><pre class="line-numbers language-c++"><code class="language-c++">#define A          (2)#define STR(s)     #s#define CONS(a,b)  int(a##e##b)printf("int max: %s\n",  STR(INT_MAX));    // INT_MAX ＃include<climits>printf("%s\n", CONS(A, A));                // compile error --- int(AeA)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两句<code>printf</code>会被展开为：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"int max: %s\n"</span><span class="token punctuation">,</span><span class="token string">"INT_MAX"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">(</span>AeA<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div class="note success"><p>分析</p><p>由于<code>A</code>和<code>INT_MAX</code>均是宏，且作为宏<code>CONS</code>和<code>STR</code>的参数，并且宏<code>CONS</code>和<code>STR</code>中均含有#或者##符号，所以<code>A</code>和<code>INT_MAX</code>均不能被解引用。导致不符合预期的情况出现。</p></div><p class="note note-primary">解决这个问题的方法很简单。 加多一层中间转换宏。 加这层宏的用意是把所有宏的参数在这层里全部展开,那么在转换宏里的那一个宏(_STR)就能得到正确的宏参数。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> A           (2)</span><span class="token macro property">#<span class="token directive keyword">define</span> _STR(s)     #s</span><span class="token macro property">#<span class="token directive keyword">define</span> STR(s)      _STR(s)          </span><span class="token comment" spellcheck="true">// 转换宏</span><span class="token macro property">#<span class="token directive keyword">define</span> _CONS(a,b)  int(a##e##b)</span><span class="token macro property">#<span class="token directive keyword">define</span> CONS(a,b)   _CONS(a,b)       </span><span class="token comment" spellcheck="true">// 转换宏</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++"><code class="language-c++">#include<cstdio>#include<climits>using namespace std;#define A           2#define _STR(s)     #s#define STR(s)      _STR(s)          // 转换宏#define _CONS(a,b)  int(a##e##b)#define CONS(a,b)   _CONS(a,b)       // 转换宏int main()&#123;   printf(STR(INT_MAX));           // 输出字符串"abc"   printf("\n");   printf("%d\n", CONS(A,A));  // 2e3 输出:2000   return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-txt"><code class="language-txt">0x7fffffff200<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux中最大socket数量</title>
      <link href="/2023/11/20/Linux%E4%B8%AD%E6%9C%80%E5%A4%A7socket%E6%95%B0%E9%87%8F/"/>
      <url>/2023/11/20/Linux%E4%B8%AD%E6%9C%80%E5%A4%A7socket%E6%95%B0%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux中最大socket数量"><a href="#Linux中最大socket数量" class="headerlink" title="Linux中最大socket数量"></a>Linux中最大socket数量</h2><p><strong>linux系统默认<code>ulimit</code>为<code>1024</code>个访问，用户最多可开启的程序数目。一般一个端口的最高连接为2的16次方<code>65535</code>。</strong></p><p>查看全局文件句柄数限制(系统支持的最大值)</p><pre class="line-numbers language-shell"><code class="language-shell">cat /proc/sys/fs/file-max<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看每个进程文件句柄数限制</p><pre class="line-numbers language-shell"><code class="language-shell">ulimit -n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如何修改最大连接数量<a href="https://blog.csdn.net/LINZEYU666/article/details/121548591">870-Linux下解决高并发socket最大连接数限制_socket 连接数_林林林ZEYU的博客-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux中kill、kill -15、kill -9的区别</title>
      <link href="/2023/11/19/Linux%E4%B8%ADkill%E3%80%81kill-15%E3%80%81kill-9%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2023/11/19/Linux%E4%B8%ADkill%E3%80%81kill-15%E3%80%81kill-9%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux中kill-、kill-15、kill-9-的区别"><a href="#Linux中kill-、kill-15、kill-9-的区别" class="headerlink" title="Linux中kill 、kill -15、kill -9 的区别"></a>Linux中<code>kill</code> 、<code>kill -15</code>、<code>kill -9</code> 的区别</h2><p><code>kill（不加 -* 默认kill -15）</code>命令</p><p>系统会发送一个<code>SIGTERM</code>信号给对应的程序。当程序接收到该<code>signal</code>信号后，将会发生以下事情：</p><ul><li>程序立刻停止</li><li>当程序释放相应资源后再停止</li><li>程序可能仍然继续运行</li></ul><p>大部分程序接收到<code>SIGTERM</code>信号后，会先释放自己的资源，然后再停止。但是也有程序可能接收信号后，做一些其他的事情（如果程序正在等待IO，可能就不会立马做出响应），也就是说，**<code>SIGTERM</code>有可能是会被阻塞的**。</p><p><code>kill -9</code>命令</p><p><strong>系统给对应程序发送的信号是<code>SIGKILL</code>，即<code>exit</code>。<code>exit</code>信号不会被系统阻塞，所以<code>kill -9</code>能顺利杀掉进程。</strong></p><ul><li><strong>在使用<code>kill -9</code> 前，应该先使用<code> kill -15</code>，给目标进程一个清理善后工作的机会。如果没有，可能会留下一些不完整的文件或状态，从而影响服务的再次启动。</strong></li></ul><h3 id="kill-9这个信号可以捕获吗"><a href="#kill-9这个信号可以捕获吗" class="headerlink" title="kill -9这个信号可以捕获吗"></a><code>kill -9</code>这个信号可以捕获吗</h3><p><code>kill -9</code>命令用于发送<code>SIGKILL</code>信号给指定的进程，强制终止该进程。<code>SIGKILL</code>是一个无法捕获或阻止的信号，它会立即终止目标进程，不给进程做清理或善后工作的机会。</p>]]></content>
      
      
      <categories>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>strlen和sizeof的区别</title>
      <link href="/2023/11/18/strlen%E5%92%8Csizeof%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2023/11/18/strlen%E5%92%8Csizeof%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="strlen-和-sizeof的区别"><a href="#strlen-和-sizeof的区别" class="headerlink" title="strlen 和 sizeof的区别"></a><code>strlen</code> 和 <code>sizeof</code>的区别</h2><p><code>sizeof</code>是C语言中的一个单目运算符，用来计算数据类型所占空间的大小，单位为字节；而<code>strlen</code>是一个函数，用来计算字符串长度。简单来说，就是<code>sizeof</code>不包含<code>\0</code>,而<code>strlen</code>包含<code>\0</code>。</p><pre class="line-numbers language-c++"><code class="language-c++">#include <stdio.h>#include <string.h>int main()&#123;    char arr1[]="abcd";//d的后面自动补上\0;    char arr2[]=&#123;'a','b','c','d'&#125;;//以单个元素赋值，没有\0的结束符    printf("strlen1=%d\n",strlen(arr1));//strlen()计算\0之前的字符长度    printf("strlen2=%d\n",strlen(arr2));//该处计算结果应为随机值，因为arr2[]没定义元素个数，就无法知道在哪能遇到\0;    printf("sizeof1=%d\n",sizeof(arr1));//计算了包含\0的数据空间大小    printf("sizeof2=%d\n",sizeof(arr2));    return 0; &#125; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-txt"><code class="language-txt">strlen1=4strlen2=8sizeof1=5sizeof2=4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++迭代器和指针的区别</title>
      <link href="/2023/11/17/C-%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E6%8C%87%E9%92%88%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2023/11/17/C-%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E6%8C%87%E9%92%88%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="C-迭代器和指针的区别"><a href="#C-迭代器和指针的区别" class="headerlink" title="C++迭代器和指针的区别"></a>C++迭代器和指针的区别</h2><ul><li><strong>范围</strong>：指针属于迭代器的一种（指针可以用来遍历容器[数组]），<strong>迭代器使用后就释放了，不能再继续使用，指针能</strong>；<strong>指针能指向函数，迭代器不行，只能指向容器</strong></li><li><strong>功能</strong>：迭代器有着比指针更细的划分并对应能力不同的功能（<strong>重载不同的运算符</strong>）</li><li><strong>行为</strong>：迭代器比指针更统一和良好的用法（<strong>更轻易使用begin()和end()，不用担心越界</strong>）。</li></ul><h3 id="为什么需要迭代器"><a href="#为什么需要迭代器" class="headerlink" title="为什么需要迭代器"></a>为什么需要迭代器</h3><ul><li><strong>抽象层次：</strong> <strong>迭代器提供了对容器元素的高层次抽象</strong>，允许使用一致的方式遍历不同类型的容器，而不用关心底层实现。</li><li><strong>安全性：</strong> 使用迭代器可以减少指针错误的可能性，因为迭代器受到容器的保护，<strong>不容易越界访问或访问非法内存</strong>。</li><li><strong>容器封装：</strong> 迭代器为容器提供了一种封装，<strong>允许容器实现者更灵活地改变底层数据结构</strong>，而不会对使用容器的代码产生影响。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内存对齐</title>
      <link href="/2023/11/16/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/"/>
      <url>/2023/11/16/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/</url>
      
        <content type="html"><![CDATA[<h2 id="内存对齐"><a href="#内存对齐" class="headerlink" title="内存对齐"></a>内存对齐</h2><h3 id="什么是内存对齐"><a href="#什么是内存对齐" class="headerlink" title="什么是内存对齐"></a>什么是内存对齐</h3><p>内存对齐是指在分配内存时，数据存储在<strong>内存中的起始地址</strong>是按照一定的规则对齐的。</p><p>假设现在CPU是按照每4个字节来访问内存，有地址0、和地址1，现在要存1个char变量（假设char变量占1字节）和1个int变量（假设int变量占4字节），那么可以有内存对齐和内存不对齐的存储方式，如下图：</p><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20231116194307036.png" alt="image-20231116194307036"></p><p>假如不采用内存对齐的方式存储数据，那么CPU需要访问地址0和地址1，再进行合并，才能得到最终的结果；采用内存对齐的方式进行存储数据的话，则只需访问地址1就可以得到最终的结果。因此，<strong>采用内存对齐的存储方式可以减少CPU的访问运行时间</strong>，缺点是<strong>没有充分利用存储空间</strong>。</p><h3 id="对齐规则"><a href="#对齐规则" class="headerlink" title="对齐规则"></a><strong>对齐规则</strong></h3><p>数据是根据初始化的顺序存储的，先定义的先储存，存储地址需要是<code>sizeof</code>(数据变量)的整数倍。</p><p>例如，假设<code>sizeof(char) = 1，sizeof(int) = 4，sizeof(int) = 4，sizeof(double) = 8</code>。结构的对齐规则是要先确定对齐字节数（<strong>对齐字节数&#x3D;结构体中的变量占用空间最大的那个字节数</strong>，下面的结构体<code>t3、t4</code>就是<code>sizeof(double) = 8</code>），然后再保证存储地址是<code>sizeof</code>(数据变量)的整数倍。</p><pre class="line-numbers language-c++"><code class="language-c++">#include <iostream>using namespace std;struct t1&#123;    char a;    short c;    int x;    char b;&#125;;struct t2&#123;    int x;    char b;    char c;    short a;&#125;;struct t3&#123;    short a;    double c;    int x;    char b;&#125;;struct t4&#123;    char a, b;    int x;    double c;&#125;;int main()&#123;        cout << sizeof(t1) << endl; //12    cout << sizeof(t2) << endl; //8    cout << sizeof(t3) << endl; //24    cout << sizeof(t4) << endl; //16    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20231116194937640.png" alt="image-20231116194937640"></p><p>在C&#x2F;C++中，内存对齐是由编译器负责的。编译器会按照平台的要求为数据进行对齐，通常会将数据按照其自身大小对齐到特定字节的倍数。这个特定字节的倍数通常由平台决定，例如，在32位系统中可能是4字节，而在64位系统中可能是8字节。</p><p>C&#x2F;C++中可以使用一些特殊的关键字或编译器指令来控制内存对齐，例如：<code>alignas</code>关键字：C++11引入了<code>alignas</code>关键字，用于指定对齐方式。</p><pre class="line-numbers language-c++"><code class="language-c++">alignas(16) struct MyStruct &#123;    // 结构体成员&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a><strong>作用</strong></h3><ol><li>提高访问速度：许多计算机体系结构要求数据按照特定的边界地址存储，而不是任意地址。当数据被按照这些边界对齐时，处理器能够更快地访问这些数据，提高数据存取速度。</li><li>硬件要求：一些硬件平台对于特定类型的数据要求按照一定的对齐方式存储，不遵循这个规则可能导致硬件异常或性能下降。</li><li>减少浪费：内存对齐可以减少内存碎片，提高内存利用率。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚函数</title>
      <link href="/2023/11/15/%E8%99%9A%E5%87%BD%E6%95%B0/"/>
      <url>/2023/11/15/%E8%99%9A%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-虚函数"><a href="#1-虚函数" class="headerlink" title="1. 虚函数"></a>1. 虚函数</h2><h3 id="1-1-什么是虚函数"><a href="#1-1-什么是虚函数" class="headerlink" title="1.1 什么是虚函数"></a>1.1 什么是虚函数</h3><p>虚函数是在基类中声明的，而在派生类中进行重写的函数。通过使用virtual关键字声明一个函数为虚函数，它使得在运行时能够动态地确定调用的是哪个版本的函数。</p><pre class="line-numbers language-c++"><code class="language-c++">class Base &#123;public:    virtual void show() &#123;        std::cout << "Base class\n";    &#125;&#125;;class Derived : public Base &#123;public:    void show() override &#123;        std::cout << "Derived class\n";    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-虚函数的作用"><a href="#1-2-虚函数的作用" class="headerlink" title="1.2 虚函数的作用"></a>1.2 <strong>虚函数的作用</strong></h3><ul><li>实现多态性（Polymorphism）：允许通过基类指针或引用调用派生类对象的函数，根据实际对象的类型选择相应的函数实现。</li><li>运行时绑定（Runtime Binding）：虚函数通过表格（虚函数表）的方式实现，使得在运行时动态地绑定函数调用。</li></ul><h3 id="1-3-虚函数表（vtable）"><a href="#1-3-虚函数表（vtable）" class="headerlink" title="1.3 虚函数表（vtable）"></a>1.3 <strong>虚函数表（vtable）</strong></h3><p>每个含有虚函数的类都有一个虚函数表，其中<strong>存储了虚函数的地址</strong>。对象的内存布局中包含一个指向虚函数表的指针。派生类的虚函数表包含基类的虚函数表，并在适当的位置添加或替换新的虚函数地址。</p><h3 id="1-4-纯虚函数"><a href="#1-4-纯虚函数" class="headerlink" title="1.4 纯虚函数"></a>1.4 <strong>纯虚函数</strong></h3><p><strong>纯虚函数是一个在基类中声明但没有提供实现的虚函数</strong>，它通过在声明中使用 &#x3D; 0 来标识。类含有纯虚函数的类被称为<strong>抽象类</strong>，不能被实例化。派生类必须实现纯虚函数，否则也会变为抽象类。</p><pre class="line-numbers language-c++"><code class="language-c++">class AbstractBase &#123;public:    virtual void pureVirtualFunction() = 0;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-5-虚析构函数"><a href="#1-5-虚析构函数" class="headerlink" title="1.5 虚析构函数"></a>1.5 <strong>虚析构函数</strong></h3><p>如果基类的析构函数是虚函数，当通过基类指针删除派生类对象时，会调用派生类的析构函数。这是为了确保正确的对象销毁。</p><pre class="line-numbers language-c++"><code class="language-c++">class Base &#123;public:    virtual ~Base() &#123;        std::cout << "Base destructor\n";    &#125;&#125;;class Derived : public Base &#123;public:    ~Derived() override &#123;        std::cout << "Derived destructor\n";    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++使用MYSQL API 操作数据库</title>
      <link href="/2023/11/14/C-%E4%BD%BF%E7%94%A8MYSQL-API-%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2023/11/14/C-%E4%BD%BF%E7%94%A8MYSQL-API-%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="C-使用MYSQL-API-操作数据库"><a href="#C-使用MYSQL-API-操作数据库" class="headerlink" title="C++使用MYSQL API 操作数据库"></a>C++使用MYSQL API 操作数据库</h1><p>在程序中连接数据库服务器，主要包含以下步骤：</p><ol><li>初始化连接环境</li><li>连接<code>mysql</code>的服务器需要提供：<ul><li>服务器<code>IP</code></li><li>服务器监听的端口（默认<code>3306</code>）</li><li>服务器的用户名（默认<code>root</code>）和对应的密码</li><li>服务器要操作的具体数据库名</li></ul></li><li>对数据库中的数据进行增删改查</li><li>事物处理<ul><li>成功：提交事务</li><li>失败：数据回滚</li></ul></li><li>数据库的读数据操作-&gt;查询-&gt;得到结果集</li><li>遍历结果集-&gt;获得自己需要的数据</li><li>释放资源</li></ol><h2 id="API介绍"><a href="#API介绍" class="headerlink" title="API介绍"></a>API介绍</h2><h3 id="初始化连接环境"><a href="#初始化连接环境" class="headerlink" title="初始化连接环境"></a>初始化连接环境</h3><pre class="line-numbers language-c++"><code class="language-c++">// 返回值: 该函数将分配、初始化、并返回新对象// 通过返回的这个对象去连接MySQL的服务器MYSQL *mysql_init(MYSQL *mysql) ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="连接mysql服务器"><a href="#连接mysql服务器" class="headerlink" title="连接mysql服务器"></a>连接<code>mysql</code>服务器</h3><pre class="line-numbers language-c++"><code class="language-c++">/*返回值:     成功: 返回MYSQL*连接句柄, 对于成功的连接，返回值与第1个参数的值相同。返回值指向的内存和第一个参数指针指向的内存一样    失败，返回NULL。    句柄: 是windows中的一个概念, 句柄可以理解为一个实例(或者对象)*/ MYSQL *mysql_real_connect(    MYSQL *mysql,           // mysql_init() 函数的返回值    const char *host,       // mysql服务器的主机地址, 写IP地址即可                            // localhost, null -> 代表本地连接    const char *user,       // 连接mysql服务器的用户名, 默认: root     const char *passwd,     // 连接mysql服务器用户对应的密码, root用户的密码    const char *db,         // 要使用的数据库的名字    unsigned int port,      // 连接的mysql服务器监听的端口                            // 如果==0, 使用mysql的默认端口3306, !=0, 使用指定的这个端口    const char *unix_socket,// 本地套接字, 不使用指定为 NULL    unsigned long client_flag); // 通常指定为0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="执行sql语句"><a href="#执行sql语句" class="headerlink" title="执行sql语句"></a>执行<code>sql</code>语句</h3><pre class="line-numbers language-c++"><code class="language-c++">// 执行一个sql语句, 添删查改的sql语句都可以int mysql_query(MYSQL *mysql, const char *query);参数:    - mysql: mysql_real_connect() 的返回值    - query: 一个可以执行的sql语句, 结尾的位置不需要加 ;返回值:     - 如果查询成功，返回0。如果是查询, 结果集在mysql 对象中    - 如果出现错误，返回非0值。 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获得结果集"><a href="#获得结果集" class="headerlink" title="获得结果集"></a>获得结果集</h3><pre class="line-numbers language-c++"><code class="language-c++">// 将结果集从 mysql(参数) 对象中取出// MYSQL_RES 对应一块内存, 里边保存着这个查询之后得到的结果集// 如何将行和列的数据从结果集中取出, 需要使用其他函数// 返回值: 具有多个结果的MYSQL_RES结果集合。如果出现错误，返回NULL。 MYSQL_RES *mysql_store_result(MYSQL *mysql);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="得到结果集的列数"><a href="#得到结果集的列数" class="headerlink" title="得到结果集的列数"></a>得到结果集的列数</h3><pre class="line-numbers language-c++"><code class="language-c++">// 从结果集中列的个数// 参数: 调用 mysql_store_result() 得到的返回值// 返回值: 结果集中的列数unsigned int mysql_num_fields(MYSQL_RES *result)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取表头-字段名"><a href="#获取表头-字段名" class="headerlink" title="获取表头 -&gt; 字段名"></a>获取表头 -&gt; 字段名</h3><pre class="line-numbers language-c++"><code class="language-c++">// 参数: 调用 mysql_store_result() 得到的返回值// 返回值: MYSQL_FIELD* 指向一个结构体// 通过查询官方文档, 返回是一个结构体的数组// 通过这个函数得到结果集中所有列的名字MYSQL_FIELD *mysql_fetch_fields(MYSQL_RES *result);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>返回值 <code>MYSQL_FIELD</code> 对应的是一个结构体，在 <code>mysql.h</code> 中定义如下:</p><pre class="line-numbers language-c++"><code class="language-c++">// mysql.h// 结果集中的每一个列对应一个 MYSQL_FIELDtypedef struct st_mysql_field &#123;  char *name;                 /* 列名-> 字段的名字 */  char *org_name;             /* Original column name, if an alias */  char *table;                /* Table of column if column was a field */  char *org_table;            /* Org table name, if table was an alias */  char *db;                   /* Database for table */  char *catalog;              /* Catalog for table */  char *def;                  /* Default value (set by mysql_list_fields) */  unsigned long length;       /* Width of column (create length) */  unsigned long max_length;   /* Max width for selected set */  unsigned int name_length;  unsigned int org_name_length;                                                                                          unsigned int table_length;  unsigned int org_table_length;  unsigned int db_length;  unsigned int catalog_length;  unsigned int def_length;  unsigned int flags;         /* Div flags */  unsigned int decimals;      /* Number of decimals in field */  unsigned int charsetnr;     /* Character set */  enum enum_field_types type; /* Type of field. See mysql_com.h for types */  void *extension;&#125; MYSQL_FIELD;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用示例</strong></p><pre class="line-numbers language-c++"><code class="language-c++">// 得到存储头信息的数组的地址MYSQL_FIELD* fields = mysql_fetch_fields(res);// 得到列数int num = mysql_num_fields(res);// 遍历得到每一列的列名for(int i=0; i<num; ++i)&#123;    printf("当前列的名字: %s\n", fields[i].name);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="得到结果集中字段的长度"><a href="#得到结果集中字段的长度" class="headerlink" title="得到结果集中字段的长度"></a>得到结果集中字段的长度</h3><pre class="line-numbers language-txt"><code class="language-txt">/* 返回结果集内当前行的列的长度:    1. 如果打算复制字段值，使用该函数能避免调用strlen()。    2. 如果结果集包含二进制数据，必须使用该函数来确定数据的大小，原因在于，对于包含Null字符的任何字段，strlen()将返回错误的结果。*/unsigned long *mysql_fetch_lengths(MYSQL_RES *result);参数:     - result: 通过查询得到的结果集返回值:    - 无符号长整数的数组表示各列的大小。如果出现错误，返回NULL。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="遍历结果集"><a href="#遍历结果集" class="headerlink" title="遍历结果集"></a>遍历结果集</h3><pre class="line-numbers language-txt"><code class="language-txt">typedef char** MYSQL_ROW;// 遍历结果集的下一行 // 如果想遍历整个结果集, 需要对该函数进行循环调用// 返回值是二级指针, char** 指向一个什么类型的内存呢?//    -- 指向一个指针数组, 类型是数组,里边的每个元素都是指针, char* 类型//    -- char* []; 数组中的字符串对应的一列数据// 需要对 MYSQL_ROW 遍历就可以得到每一列的值// 如果要遍历整个结果集, 需要循环调用这个函数MYSQL_ROW mysql_fetch_row(MYSQL_RES *result);参数:     - result: 通过查询得到的结果集返回值:     - 成功: 得到了当前记录中每个字段的值    - 失败: NULL, 说明数据已经读完了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="资源回收"><a href="#资源回收" class="headerlink" title="资源回收"></a>资源回收</h3><pre class="line-numbers language-c++"><code class="language-c++">// 释放结果集void mysql_free_result(MYSQL_RES *result);// 关闭mysql实例void mysql_close(MYSQL *mysql);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事物操作"><a href="#事物操作" class="headerlink" title="事物操作"></a>事物操作</h3><pre class="line-numbers language-c++"><code class="language-c++">// mysql中默认会进行事务的提交// 因为自动提交事务, 会对我们的操作造成影响// 如果我们操作的步骤比较多, 集合的开始和结束需要用户自己去设置, //需要改为手动方式提交事务my_bool mysql_autocommit(MYSQL *mysql, my_bool mode) /*参数:    如果模式为“1”，启用autocommit模式；如果模式为“0”，禁止autocommit模式。返回值   如果成功，返回0，如果出现错误，返回非0值。 事务提交 */my_bool mysql_commit(MYSQL *mysql);//返回值: 成功: 0, 失败: 非0    // 数据回滚my_bool mysql_rollback(MYSQL *mysql) //返回值: 成功: 0, 失败: 非0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="打印错误日志"><a href="#打印错误日志" class="headerlink" title="打印错误日志"></a>打印错误日志</h3><pre class="line-numbers language-c++"><code class="language-c++">// 返回错误的描述const char *mysql_error(MYSQL *mysql);// 返回错误的编号unsigned int mysql_errno(MYSQL *mysql);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++11新特性（II)</title>
      <link href="/2023/11/10/C-11%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%88II%EF%BC%89/"/>
      <url>/2023/11/10/C-11%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%88II%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="C-11新特性（II）"><a href="#C-11新特性（II）" class="headerlink" title="C++11新特性（II）"></a>C++11新特性（II）</h1><h2 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a><code>lambda</code>表达式</h2><pre class="line-numbers language-txt"><code class="language-txt">auto func = [capture] (params) opt -> ret &#123; func_body; &#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中<code>func</code>是可以当作<code>lambda</code>表达式的名字，作为一个函数使用，<code>capture</code>是捕获列表，<code>params</code>是参数表，<code>opt</code>是函数选项(mutable之类)， ret是返回值类型，func_body是函数体。</p><pre class="line-numbers language-c++"><code class="language-c++">auto func1 = [](int a) -> int &#123; return a + 1; &#125;;auto func2 = [](int a) &#123; return a + 2; &#125;;cout << func1(1) << " " << func2(2) << endl;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>lambda</code>表达式允许捕获一定范围内的变量：</p><ul><li><code>[]</code>不捕获任何变量</li><li><code>[&amp;]</code>引用捕获，捕获外部作用域所有变量，在函数体内当作引用使用</li><li><code>[=]</code>值捕获，捕获外部作用域所有变量，在函数内内有个副本使用</li><li><code>[=, &amp;a]</code>值捕获外部作用域所有变量，按引用捕获a变量</li><li><code>[a]</code>只值捕获a变量，不捕获其它变量</li><li><code>[this]</code>捕获当前类中的this指针</li></ul><h2 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h2><h2 id="shared-ptr"><a href="#shared-ptr" class="headerlink" title="shared_ptr"></a>shared_ptr</h2><p><code>shared_ptr</code>使用了引用计数，每一个<code>shared_ptr</code>的拷贝都指向相同的内存，每次拷贝都会触发引用计数+1，每次生命周期结束析构的时候引用计数-1，在最后一个<code>shared_ptr</code>析构的时候，内存才会释放。</p><p>关于<code>shared_ptr</code>有几点需要注意：</p><p>• 不要用一个裸指针初始化多个<code>shared_ptr</code>，会出现<code>double_free</code>导致程序崩溃</p><p>• 通过<code>shared_from_this()</code>返回<code>this</code>指针，不要把<code>this</code>指针作为<code>shared_ptr</code>返回出来，因为<code>this</code>指针本质就是裸指针，通过<code>this</code>返回可能会导致重复析构，不能把<code>this</code>指针交给智能指针管理。</p><pre class="line-numbers language-c++"><code class="language-c++">class A &#123;    shared_ptr<A> GetSelf() &#123;        return shared_from_this();        // return shared_ptr<A>(this); 错误，会导致double free    &#125;  &#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>尽量使用<code>make_shared</code>，少用<code>new</code>。</li><li>不要<code>delete get()</code>返回来的裸指针。</li><li>不是<code>new</code>出来的空间要自定义删除器。</li><li>要避免循环引用，循环引用导致内存永远不会被释放，造成内存泄漏。</li></ul><h3 id="weak-ptr"><a href="#weak-ptr" class="headerlink" title="weak_ptr"></a>weak_ptr</h3><p><code>weak_ptr</code>是用来监视<code>shared_ptr</code>的生命周期，它不管理<code>shared_ptr</code>内部的指针，它的拷贝的析构都不会影响引用计数，纯粹是作为一个旁观者监视<code>shared_ptr</code>中管理的资源是否存在，可以用来返回<code>this</code>指针和解决循环引用问题。</p><ul><li>作用1：返回<code>this</code>指针，上面介绍的<code>shared_from_this()</code>其实就是通过<code>weak_ptr</code>返回的<code>this</code>指针。</li><li>作用2：解决循环引用问题。</li></ul><h3 id="unique-ptr"><a href="#unique-ptr" class="headerlink" title="unique_ptr"></a>unique_ptr</h3><p><code>std::unique_ptr</code>是一个独占型的智能指针，它不允许其它智能指针共享其内部指针，也不允许<code>unique_ptr</code>的拷贝和赋值。使用方法和<code>shared_ptr</code>类似，区别是不可以拷贝</p><h2 id="std-array"><a href="#std-array" class="headerlink" title="std::array"></a>std::array</h2><p><code>std::array </code>保存在栈内存中，相比堆内存中的 <code>std::vector</code>，我们能够灵活的访问这里面的元素，从而获得更高的性能。</p><p><code>std::array </code>会在编译时创建一个固定大小的数组，<code>std::array </code>不能够被隐式的转换成指针，使用 <code>std::array</code>只需指定其类型和大小即可：</p><pre class="line-numbers language-c++"><code class="language-c++">std::array<int, 4> arr= &#123;1,2,3,4&#125;;int len = 4;std::array<int, len> arr = &#123;1,2,3,4&#125;; // 非法, 数组大小参数必须是常量表达式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to be a leader</title>
      <link href="/2023/11/09/How-to-be-a-leader/"/>
      <url>/2023/11/09/How-to-be-a-leader/</url>
      
        <content type="html"><![CDATA[<h2 id="1-大事情变小事情，要分的细"><a href="#1-大事情变小事情，要分的细" class="headerlink" title="1.  大事情变小事情，要分的细"></a>1.  大事情变小事情，要分的细</h2><h2 id="2-不要分配任务，要分配作业"><a href="#2-不要分配任务，要分配作业" class="headerlink" title="2.  不要分配任务，要分配作业"></a>2.  不要分配任务，要分配作业</h2><h2 id="3-要详细不要模糊"><a href="#3-要详细不要模糊" class="headerlink" title="3.  要详细不要模糊"></a>3.  要详细不要模糊</h2>]]></content>
      
      
      <categories>
          
          <category> 语录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写线程池</title>
      <link href="/2023/11/08/%E6%89%8B%E5%86%99%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
      <url>/2023/11/08/%E6%89%8B%E5%86%99%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="手写线程池"><a href="#手写线程池" class="headerlink" title="手写线程池"></a>手写线程池</h1><h2 id="线程池原理"><a href="#线程池原理" class="headerlink" title="线程池原理"></a>线程池原理</h2><p>线程池的组成主要分为3个部分，这三部分配合工作就可以得到一个完整的线程池：</p><ol><li>任务队列，存储需要处理的任务，由工作的线程来处理这些任务<br>通过线程池提供的API函数，将一个待处理的任务添加到任务队列，或者从任务队列中删除<br>已处理的任务会被从任务队列中删除<br>线程池的使用者，也就是调用线程池函数往任务队列中添加任务的线程就是生产者线程</li><li>工作的线程（任务队列任务的消费者） ，N个<br>线程池中维护了一定数量的工作线程, 他们的作用是是不停的读任务队列, 从里边取出任务并处理<br>工作的线程相当于是任务队列的消费者角色，<br>如果任务队列为空, 工作的线程将会被阻塞 (使用条件变量&#x2F;信号量阻塞)<br>如果阻塞之后有了新的任务, 由生产者将阻塞解除, 工作线程开始工作</li><li>管理者线程（不处理任务队列中的任务），1个<br>它的任务是周期性的对任务队列中的任务数量以及处于忙状态的工作线程个数进行检测<br>当任务过多的时候, 可以适当的创建一些新的工作线程<br>当任务过少的时候, 可以适当的销毁一些工作的线程</li></ol><p><img src="https://subingwen.cn/linux/threadpool/R9c00030b842edb1ae3d6a2b286e53916" alt="查看源图像"></p><h2 id="1-c语言版"><a href="#1-c语言版" class="headerlink" title="1. c语言版"></a>1. c语言版</h2><h3 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"threadpool.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">void</span> <span class="token function">taskFunc</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"thread is working, number = %d, tid = %ld\n"</span><span class="token punctuation">,</span>num<span class="token punctuation">,</span><span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建线程池</span>    ThreadPool<span class="token operator">*</span> pool <span class="token operator">=</span> <span class="token function">threadPoolCreate</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// threadPoolAdd(pool,taskFunc,&amp;i);</span>        <span class="token keyword">int</span><span class="token operator">*</span> num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">*</span>num <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token function">threadPoolAdd</span><span class="token punctuation">(</span>pool<span class="token punctuation">,</span> taskFunc<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">threadPoolDestory</span><span class="token punctuation">(</span>pool<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="threadpool-c"><a href="#threadpool-c" class="headerlink" title="threadpool.c"></a>threadpool.c</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"threadpool.h"</span></span><span class="token keyword">const</span> <span class="token keyword">int</span> NUMBER <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  任务结构体</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span>  Task<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>function<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//函数指针</span>    <span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Task<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//线程池结构体</span><span class="token keyword">struct</span> ThreadPool<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//任务队列</span>    Task<span class="token operator">*</span> taskQ<span class="token punctuation">;</span>    <span class="token keyword">int</span> queueCapacity<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 容量 </span>    <span class="token keyword">int</span> queueSize<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//当前任务个数</span>    <span class="token keyword">int</span> queueFront<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//队头  ->取数据</span>    <span class="token keyword">int</span> queueRear<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//队尾  &lt;-存数据</span>    <span class="token comment" spellcheck="true">//管理者线程</span>    pthread_t   managerID<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//管理者线程ID</span>    <span class="token comment" spellcheck="true">//工作线程</span>    pthread_t   <span class="token operator">*</span>threadIDs<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//工作的线程ID</span>        <span class="token keyword">int</span> minNum<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//最小线程数量</span>    <span class="token keyword">int</span> maxNum<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//最大线程数量</span>    <span class="token keyword">int</span> busyNum<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//忙的线程个数</span>    <span class="token keyword">int</span> liveNum<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//存活的线程个数</span>    <span class="token keyword">int</span> exitNum<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//要销毁的线程个数</span>    <span class="token comment" spellcheck="true">//互斥锁</span>    pthread_mutex_t mutexPool<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//锁整个的线程池</span>    pthread_mutex_t mutexBusy<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//锁busyNum变量</span>    <span class="token comment" spellcheck="true">//条件变量</span>    pthread_cond_t notFull<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//任务队列是不是满了</span>    pthread_cond_t notEmpty<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//任务队列是不是空了</span>    <span class="token keyword">int</span> shutdown<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//是不是要销毁线程池，销毁为1，不销毁为0</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>ThreadPool<span class="token operator">*</span> <span class="token function">threadPoolCreate</span><span class="token punctuation">(</span><span class="token keyword">int</span> min<span class="token punctuation">,</span> <span class="token keyword">int</span> max<span class="token punctuation">,</span> <span class="token keyword">int</span> queueSize<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    ThreadPool<span class="token operator">*</span> pool <span class="token operator">=</span> <span class="token punctuation">(</span>ThreadPool<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ThreadPool<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">do</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pool <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"malloc threadpool fail...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        pool<span class="token operator">-></span>threadIDs <span class="token operator">=</span> <span class="token punctuation">(</span>pthread_t<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>pthread_t<span class="token punctuation">)</span> <span class="token operator">*</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pool<span class="token operator">-></span>threadIDs <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"malloc threadIDS fail...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>pool<span class="token operator">-></span>threadIDs<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>pthread_t<span class="token punctuation">)</span> <span class="token operator">*</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//bzero(&amp;pool->threadIDs,sizeof(pthread_t) * max);    //清0</span>        pool<span class="token operator">-></span>minNum <span class="token operator">=</span> min<span class="token punctuation">;</span>        pool<span class="token operator">-></span>maxNum <span class="token operator">=</span> max<span class="token punctuation">;</span>        pool<span class="token operator">-></span>busyNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        pool<span class="token operator">-></span>liveNum <span class="token operator">=</span> min<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//与最小个数相等</span>        pool<span class="token operator">-></span>exitNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pool<span class="token operator">-></span>mutexBusy<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span>        <span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pool<span class="token operator">-></span>mutexPool<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span>        <span class="token function">pthread_cond_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pool<span class="token operator">-></span>notEmpty<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span>  <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span>        <span class="token function">pthread_cond_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pool<span class="token operator">-></span>notFull<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"mutex or condition init fail...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//任务队列</span>        pool<span class="token operator">-></span>taskQ <span class="token operator">=</span> <span class="token punctuation">(</span>Task<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Task<span class="token punctuation">)</span> <span class="token operator">*</span> queueSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        pool<span class="token operator">-></span>queueCapacity <span class="token operator">=</span> queueSize<span class="token punctuation">;</span>        pool<span class="token operator">-></span>queueSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        pool<span class="token operator">-></span>queueFront <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        pool<span class="token operator">-></span>queueRear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        pool<span class="token operator">-></span>shutdown <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建线程</span>        <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pool<span class="token operator">-></span>managerID<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>manager<span class="token punctuation">,</span>pool<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> min<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pool<span class="token operator">-></span>threadIDs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>worker<span class="token punctuation">,</span>pool<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> pool<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//释放资源</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pool <span class="token operator">&amp;&amp;</span> pool<span class="token operator">-></span>threadIDs<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>pool<span class="token operator">-></span>threadIDs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pool <span class="token operator">&amp;&amp;</span> pool<span class="token operator">-></span>taskQ<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>pool<span class="token operator">-></span>taskQ<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pool<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>pool<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">threadPoolAdd</span><span class="token punctuation">(</span>ThreadPool<span class="token operator">*</span> pool<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token operator">*</span>func<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pool<span class="token operator">-></span>mutexPool<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>pool<span class="token operator">-></span>queueSize <span class="token operator">==</span> pool<span class="token operator">-></span>queueCapacity <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>pool<span class="token operator">-></span>shutdown<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//阻塞生产者线程（阻塞生产者）</span>        <span class="token function">pthread_cond_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pool<span class="token operator">-></span>notFull<span class="token punctuation">,</span><span class="token operator">&amp;</span>pool<span class="token operator">-></span>mutexPool<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pool<span class="token operator">-></span>shutdown<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pool<span class="token operator">-></span>mutexPool<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 添加任务</span>    pool<span class="token operator">-></span>taskQ<span class="token punctuation">[</span>pool<span class="token operator">-></span>queueRear<span class="token punctuation">]</span><span class="token punctuation">.</span>function <span class="token operator">=</span> func<span class="token punctuation">;</span>    pool<span class="token operator">-></span>taskQ<span class="token punctuation">[</span>pool<span class="token operator">-></span>queueRear<span class="token punctuation">]</span><span class="token punctuation">.</span>arg <span class="token operator">=</span> arg<span class="token punctuation">;</span>    pool<span class="token operator">-></span>queueRear <span class="token operator">=</span> <span class="token punctuation">(</span>pool<span class="token operator">-></span>queueRear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> pool<span class="token operator">-></span>queueCapacity<span class="token punctuation">;</span>    pool<span class="token operator">-></span>queueSize<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token function">pthread_cond_signal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pool<span class="token operator">-></span>notEmpty<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//唤醒消费者</span>           <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pool<span class="token operator">-></span>mutexPool<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span>  <span class="token function">threadPoolBusyNum</span><span class="token punctuation">(</span>ThreadPool<span class="token operator">*</span> pool<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pool<span class="token operator">-></span>mutexBusy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> busyNum <span class="token operator">=</span> pool<span class="token operator">-></span>busyNum<span class="token punctuation">;</span>    <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pool<span class="token operator">-></span>mutexBusy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> busyNum<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">threadPoolAliveNum</span><span class="token punctuation">(</span>ThreadPool<span class="token operator">*</span> pool<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pool<span class="token operator">-></span>mutexPool<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> liveNum <span class="token operator">=</span> pool<span class="token operator">-></span>liveNum<span class="token punctuation">;</span>    <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pool<span class="token operator">-></span>mutexPool<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> liveNum<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">threadPoolDestory</span><span class="token punctuation">(</span>ThreadPool<span class="token operator">*</span> pool<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pool <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 关闭线程池</span>    pool<span class="token operator">-></span>shutdown <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 阻塞回收管理者线程</span>    <span class="token function">pthread_join</span><span class="token punctuation">(</span>pool<span class="token operator">-></span>managerID<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 唤醒阻塞的消费者线程</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pool<span class="token operator">-></span>liveNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">pthread_cond_signal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pool<span class="token operator">-></span>notEmpty<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pool<span class="token operator">-></span>taskQ<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>pool<span class="token operator">-></span>taskQ<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pool<span class="token operator">-></span>threadIDs<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>pool<span class="token operator">-></span>threadIDs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 销毁锁和条件变量</span>    <span class="token function">pthread_mutex_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pool<span class="token operator">-></span>mutexBusy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_mutex_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pool<span class="token operator">-></span>mutexPool<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_cond_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pool<span class="token operator">-></span>notEmpty<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_cond_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pool<span class="token operator">-></span>notFull<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>pool<span class="token punctuation">)</span><span class="token punctuation">;</span>    pool <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 消费者线程</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">worker</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    ThreadPool<span class="token operator">*</span> pool <span class="token operator">=</span> <span class="token punctuation">(</span>ThreadPool<span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pool<span class="token operator">-></span>mutexPool<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 当前任务队列是否为空</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>pool<span class="token operator">-></span>queueSize <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>pool<span class="token operator">-></span>shutdown<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 阻塞工作线程（阻塞消费者）</span>            <span class="token function">pthread_cond_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pool<span class="token operator">-></span>notEmpty<span class="token punctuation">,</span><span class="token operator">&amp;</span>pool<span class="token operator">-></span>mutexPool<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 判断是不是要销毁线程</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>pool<span class="token operator">-></span>exitNum <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                pool<span class="token operator">-></span>exitNum<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>pool<span class="token operator">-></span>liveNum <span class="token operator">></span> pool<span class="token operator">-></span>minNum<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    pool<span class="token operator">-></span>liveNum<span class="token operator">--</span><span class="token punctuation">;</span>                    <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pool<span class="token operator">-></span>mutexPool<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 销毁前，先解锁，防止死锁</span>                    <span class="token function">threadExit</span><span class="token punctuation">(</span>pool<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">//pthread_exit(NULL);</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 判断线程池是否被关闭</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pool<span class="token operator">-></span>shutdown<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pool<span class="token operator">-></span>mutexPool<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//防止死锁</span>            <span class="token function">threadExit</span><span class="token punctuation">(</span>pool<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//pthread_exit(NULL);</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 从队列中取出一个任务</span>        Task task<span class="token punctuation">;</span>        task<span class="token punctuation">.</span>function <span class="token operator">=</span> pool<span class="token operator">-></span>taskQ<span class="token punctuation">[</span>pool<span class="token operator">-></span>queueFront<span class="token punctuation">]</span><span class="token punctuation">.</span>function<span class="token punctuation">;</span>        task<span class="token punctuation">.</span>arg <span class="token operator">=</span> pool<span class="token operator">-></span>taskQ<span class="token punctuation">[</span>pool<span class="token operator">-></span>queueFront<span class="token punctuation">]</span><span class="token punctuation">.</span>arg<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 移动头节点</span>        pool<span class="token operator">-></span>queueFront <span class="token operator">=</span> <span class="token punctuation">(</span>pool<span class="token operator">-></span>queueFront <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> pool<span class="token operator">-></span>queueCapacity<span class="token punctuation">;</span>        pool<span class="token operator">-></span>queueSize<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//解锁</span>        <span class="token function">pthread_cond_signal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pool<span class="token operator">-></span>notFull<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//唤醒生产者   </span>        <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pool<span class="token operator">-></span>mutexPool<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//开始工作</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"thread %ld  start working...\n"</span><span class="token punctuation">,</span><span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pool<span class="token operator">-></span>mutexBusy<span class="token punctuation">)</span><span class="token punctuation">;</span>        pool<span class="token operator">-></span>busyNum<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pool<span class="token operator">-></span>mutexBusy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用任务里的函数</span>        task<span class="token punctuation">.</span><span class="token function">function</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//参数建议传堆内存</span>        <span class="token comment" spellcheck="true">//(*task.function)(task.arg);   //另一种写法</span>        <span class="token function">free</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>        task<span class="token punctuation">.</span>arg <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"thread %ld  end working...\n"</span><span class="token punctuation">,</span><span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pool<span class="token operator">-></span>mutexBusy<span class="token punctuation">)</span><span class="token punctuation">;</span>        pool<span class="token operator">-></span>busyNum<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pool<span class="token operator">-></span>mutexBusy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">manager</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    ThreadPool<span class="token operator">*</span> pool <span class="token operator">=</span> <span class="token punctuation">(</span>ThreadPool<span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>pool<span class="token operator">-></span>shutdown<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 每3s检测一次</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 取出线程池中日任务的数量和当前线程的数量</span>        <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pool<span class="token operator">-></span>mutexPool<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> queueSize <span class="token operator">=</span> pool<span class="token operator">-></span>queueSize<span class="token punctuation">;</span>        <span class="token keyword">int</span> liveNum <span class="token operator">=</span> pool<span class="token operator">-></span>liveNum<span class="token punctuation">;</span>        <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pool<span class="token operator">-></span>mutexPool<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 取出忙的线程的数量</span>        <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pool<span class="token operator">-></span>mutexBusy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> busyNum <span class="token operator">=</span> pool<span class="token operator">-></span>busyNum<span class="token punctuation">;</span>        <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pool<span class="token operator">-></span>mutexBusy<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//添加线程</span>        <span class="token comment" spellcheck="true">//自定义规则：任务的个数>存活的线程个数 &amp;&amp; 存活的线程个数 &lt; 线程的最大个数</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>queueSize <span class="token operator">></span> liveNum <span class="token operator">&amp;&amp;</span> liveNum <span class="token operator">&lt;</span> pool<span class="token operator">-></span>maxNum<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pool<span class="token operator">-></span>mutexPool<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pool<span class="token operator">-></span>maxNum <span class="token operator">&amp;&amp;</span> count <span class="token operator">&lt;</span> NUMBER <span class="token operator">&amp;&amp;</span> pool<span class="token operator">-></span>liveNum <span class="token operator">&lt;</span> pool<span class="token operator">-></span>maxNum<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>pool<span class="token operator">-></span>threadIDs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pool<span class="token operator">-></span>threadIDs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>worker<span class="token punctuation">,</span>pool<span class="token punctuation">)</span><span class="token punctuation">;</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                    pool<span class="token operator">-></span>liveNum<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>             <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pool<span class="token operator">-></span>mutexPool<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//销毁线程</span>        <span class="token comment" spellcheck="true">//自定义规则：忙的线程*2 &lt; 存活的线程数 &amp;&amp; 存活的线程 > 最小线程数</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>busyNum <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">&lt;</span> liveNum <span class="token operator">&amp;&amp;</span> liveNum <span class="token operator">></span> pool<span class="token operator">-></span>minNum<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pool<span class="token operator">-></span>mutexPool<span class="token punctuation">)</span><span class="token punctuation">;</span>            pool<span class="token operator">-></span>exitNum <span class="token operator">=</span> NUMBER<span class="token punctuation">;</span>            <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pool<span class="token operator">-></span>mutexPool<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 让工作的线程自杀</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUMBER<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 唤醒工作线程</span>                <span class="token function">pthread_cond_signal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pool<span class="token operator">-></span>notEmpty<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">threadExit</span><span class="token punctuation">(</span>ThreadPool<span class="token operator">*</span> pool<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    pthread_t tid <span class="token operator">=</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pool<span class="token operator">-></span>maxNum<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pool<span class="token operator">-></span>threadIDs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> tid<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            pool<span class="token operator">-></span>threadIDs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"threadExit() called, %ld exiting...\n"</span><span class="token punctuation">,</span>tid<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="threadpool-h"><a href="#threadpool-h" class="headerlink" title="threadpool.h"></a>threadpool.h</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> _THREADPOOL_H</span><span class="token macro property">#<span class="token directive keyword">define</span> _THREADPOOL_H</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> ThreadPool ThreadPool<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  创建线程池并初始化</span>ThreadPool<span class="token operator">*</span> <span class="token function">threadPoolCreate</span><span class="token punctuation">(</span><span class="token keyword">int</span> min<span class="token punctuation">,</span><span class="token keyword">int</span> max<span class="token punctuation">,</span><span class="token keyword">int</span> queueSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  销毁线程池</span><span class="token keyword">int</span> <span class="token function">threadPoolDestory</span><span class="token punctuation">(</span>ThreadPool<span class="token operator">*</span> pool<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//int threadPoolDestroy(ThreadPool* pool);</span><span class="token comment" spellcheck="true">//  给线程池添加任务</span><span class="token keyword">void</span> <span class="token function">threadPoolAdd</span><span class="token punctuation">(</span>ThreadPool<span class="token operator">*</span> pool<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token operator">*</span>func<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  获取线程池中工作的线程的个数</span><span class="token keyword">int</span>  <span class="token function">threadPoolBusyNum</span><span class="token punctuation">(</span>ThreadPool<span class="token operator">*</span> pool<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  获取线程池中活着的线程的个数</span><span class="token keyword">int</span> <span class="token function">threadPoolAliveNum</span><span class="token punctuation">(</span>ThreadPool<span class="token operator">*</span> pool<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//////</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">worker</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">manager</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">threadExit</span><span class="token punctuation">(</span>ThreadPool<span class="token operator">*</span> pool<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//////</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-c-版"><a href="#2-c-版" class="headerlink" title="2. c++版"></a>2. c++版</h2><h3 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h3><pre class="line-numbers language-c++"><code class="language-c++">#include<iostream>#include<unistd.h>#include "ThreadPool.h"#include "ThreadPool.cpp"using namespace std;void taskFunc(void* arg)&#123;    int num = *(int*)arg;    printf("thread is working, number = %d, tid = %ld\n",num,pthread_self());    usleep(1000);&#125;int main()&#123;     // 创建线程池    ThreadPool<int> pool(3,10);    for(int i = 0; i < 100; i++)&#123;                // threadPoolAdd(pool,taskFunc,&i);        int* num = new int(i + 100);        pool.threadPoolAddTask(Task<int>(taskFunc,num));            &#125;    sleep(30);        return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="TaskQueue-cpp"><a href="#TaskQueue-cpp" class="headerlink" title="TaskQueue.cpp"></a>TaskQueue.cpp</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"TaskQueue.h"</span></span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span>TaskQueue<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">::</span><span class="token function">TaskQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m_mutex<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span>TaskQueue<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">::</span><span class="token operator">~</span><span class="token function">TaskQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">pthread_mutex_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span><span class="token keyword">void</span> TaskQueue<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">::</span><span class="token function">addTask</span><span class="token punctuation">(</span>Task<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span> task<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>    m_taskQ<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span><span class="token keyword">void</span> TaskQueue<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">::</span><span class="token function">addTask</span><span class="token punctuation">(</span>callback f<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>    m_taskQ<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Task<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>f<span class="token punctuation">,</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span>Task<span class="token operator">&lt;</span>T<span class="token operator">></span> TaskQueue<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">::</span><span class="token function">getTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     Task<span class="token operator">&lt;</span>T<span class="token operator">></span> task<span class="token punctuation">;</span>    <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>m_taskQ<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> task<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        task <span class="token operator">=</span> m_taskQ<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_taskQ<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> task<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="TaskQueue-h"><a href="#TaskQueue-h" class="headerlink" title="TaskQueue.h"></a>TaskQueue.h</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">pragma</span> once</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">using</span> callback <span class="token operator">=</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  任务结构体</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span><span class="token keyword">struct</span>  Task<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Task<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        function <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        arg <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    Task<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>callback f<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        function <span class="token operator">=</span> f<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>arg <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    callback function<span class="token punctuation">;</span>    T<span class="token operator">*</span> arg<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">TaskQueue</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">TaskQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">TaskQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 取出一个任务</span>    Task<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">getTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 添加一个任务</span>    <span class="token keyword">void</span> <span class="token function">addTask</span><span class="token punctuation">(</span>Task<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">addTask</span><span class="token punctuation">(</span>callback f<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//重载</span>    <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">taskNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> m_taskQ<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    pthread_mutex_t m_mutex<span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span>Task<span class="token operator">&lt;</span>T<span class="token operator">>></span> m_taskQ<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ThreadPool-cpp"><a href="#ThreadPool-cpp" class="headerlink" title="ThreadPool.cpp"></a>ThreadPool.cpp</h3><pre class="line-numbers language-c++"><code class="language-c++">#include "ThreadPool.h"#include <iostream>#include <string.h>#include <string>#include <pthread.h>#include <unistd.h>using namespace std;template <typename T>ThreadPool<T>::ThreadPool(int min, int max)&#123;       do&#123;        // 实例化任务对列        taskQ = new TaskQueue<T>;        if(taskQ == nullptr)&#123;            cout<<"malloc taskQ fail..."<<endl;            break;        &#125;        minNum = min;        maxNum = max;        busyNum = 0;        liveNum = min;    //与最小个数相等        exitNum = 0;        threadIDs = new pthread_t[max];        if(threadIDs == nullptr)&#123;            cout<<"malloc threadIDS  fail..."<<endl;            break;        &#125;        if(pthread_mutex_init(&mutexPool,NULL) != 0 || pthread_cond_init(&notEmpty,NULL)  != 0)&#123;            printf("mutex or condition init fail...\n");            break;        &#125;        shutdown = false;         //创建线程        pthread_create(&managerID,NULL,manager,this);        for(int i = 0; i < min; i++)&#123;            pthread_create(&threadIDs[i],NULL,worker,this);        &#125;    &#125;while(0);&#125;template <typename T>ThreadPool<T>::~ThreadPool()&#123;    // 关闭线程池    shutdown = 1;    // 阻塞回收管理者线程(销毁管理者线程)    pthread_join(managerID,NULL);    // 唤醒阻塞的消费者线程    for(int i = 0; i < liveNum; i++)&#123;        pthread_cond_signal(&notEmpty);    &#125;    if(taskQ)&#123;        delete taskQ;    &#125;    if(threadIDs)&#123;        delete[] threadIDs;    &#125;    // 销毁锁和条件变量    pthread_mutex_destroy(&mutexPool);    pthread_cond_destroy(&notEmpty);      &#125;template <typename T>void ThreadPool<T>::threadPoolAddTask(Task<T> task)&#123;    if(shutdown)&#123;        //pthread_mutex_unlock(&mutexPool);        return ;    &#125;    // 添加任务    taskQ->addTask(task);    // 唤醒工作的线程    pthread_cond_signal(&notEmpty);    &#125;template <typename T>int ThreadPool<T>::getBusyNum()&#123;    pthread_mutex_lock(&mutexPool);    int busyNum = this->busyNum;    pthread_mutex_unlock(&mutexPool);    return busyNum;&#125;template <typename T>int ThreadPool<T>::getAliveNum()&#123;    pthread_mutex_lock(&mutexPool);    int liveNum = this->liveNum;    pthread_mutex_unlock(&mutexPool);    return liveNum;&#125;template <typename T>// 消费者线程void* ThreadPool<T>::worker(void* arg)&#123;    ThreadPool* pool = (ThreadPool*)arg;    while(1)&#123;        pthread_mutex_lock(&pool->mutexPool);        // 当前任务队列是否为空        while (pool->taskQ->taskNumber() == 0 && !pool->shutdown)        &#123;            // 阻塞工作线程（阻塞消费者）            pthread_cond_wait(&pool->notEmpty,&pool->mutexPool);                    // 判断是不是要销毁线程            if(pool->exitNum > 0)&#123;                pool->exitNum--;                if(pool->liveNum > pool->minNum)&#123;                    pool->liveNum--;                    pthread_mutex_unlock(&pool->mutexPool);    // 销毁前，先解锁，防止死锁                    pool->threadExit();                &#125;                                //pthread_exit(NULL);            &#125;        &#125;                // 判断线程池是否被关闭        if(pool->shutdown)&#123;            pthread_mutex_unlock(&pool->mutexPool);     //防止死锁            pool->threadExit();            //pthread_exit(NULL);        &#125;        // 从队列中取出一个任务        Task<T> task = pool->taskQ->getTask();                //解锁       // pthread_cond_signal(&pool->notFull);    //唤醒生产者       //开始工作        printf("thread %ld  start working...\n",pthread_self());       // pthread_mutex_lock(&pool->mutexBusy);        pool->busyNum++;       // pthread_mutex_unlock(&pool->mutexBusy);        pthread_mutex_unlock(&pool->mutexPool);                //调用任务里的函数        task.function(task.arg);        //参数建议传堆内存        //(*task.function)(task.arg);   //另一种写法        delete task.arg;        task.arg = nullptr;        printf("thread %ld  end working...\n",pthread_self());        pthread_mutex_lock(&pool->mutexPool);        pool->busyNum--;        pthread_mutex_unlock(&pool->mutexPool);    &#125;    return NULL;&#125;template <typename T>void* ThreadPool<T>::manager(void* arg)&#123;    ThreadPool* pool = (ThreadPool*)arg;    while(!pool->shutdown)&#123;        // 每3s检测一次        sleep(3);        // 取出线程池中日任务的数量和当前线程的数量        pthread_mutex_lock(&pool->mutexPool);        int queueSize = pool->taskQ->taskNumber();        int liveNum = pool->liveNum;        // 取出忙的线程的数量        // pthread_mutex_lock(&pool->mutexBusy);        int busyNum = pool->busyNum;        // pthread_mutex_unlock(&pool->mutexBusy);        pthread_mutex_unlock(&pool->mutexPool);                               //添加线程        //自定义规则：任务的个数>存活的线程个数 && 存活的线程个数 < 线程的最大个数        if(queueSize > liveNum && liveNum < pool->maxNum)&#123;            pthread_mutex_lock(&pool->mutexPool);            int count = 0;            for(int i = 0; i < pool->maxNum && count < NUMBER && pool->liveNum < pool->maxNum; ++i)&#123;                if(pool->threadIDs[i] == 0)&#123;                    pthread_create(&pool->threadIDs[i],NULL,worker,pool);                    count++;                    pool->liveNum++;                &#125;            &#125;             pthread_mutex_unlock(&pool->mutexPool);        &#125;        //销毁线程        //自定义规则：忙的线程*2 < 存活的线程数 && 存活的线程 > 最小线程数        if(busyNum * 2 < liveNum && liveNum > pool->minNum)&#123;            pthread_mutex_lock(&pool->mutexPool);            pool->exitNum = NUMBER;            pthread_mutex_unlock(&pool->mutexPool);            // 让工作的线程自杀            for(int i = 0; i < NUMBER; ++i)&#123;                // 唤醒工作线程                pthread_cond_signal(&pool->notEmpty);            &#125;                &#125;    &#125;    return NULL;&#125;template <typename T>// 线程退出void ThreadPool<T>::threadExit()&#123;    pthread_t tid = pthread_self();    for (int i = 0; i < maxNum; ++i)    &#123;        if (threadIDs[i] == tid)        &#123;            cout << "threadExit() function: thread "                 << to_string(pthread_self()) << " exiting..." << endl;            threadIDs[i] = 0;            break;        &#125;    &#125;    pthread_exit(NULL);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ThreadPool-h"><a href="#ThreadPool-h" class="headerlink" title="ThreadPool.h"></a>ThreadPool.h</h3><pre class="line-numbers language-c++"><code class="language-c++">#pragma once#include "TaskQueue.h"#include "TaskQueue.cpp"template <typename T>class ThreadPool&#123;   public:           //  创建线程池并初始化     ThreadPool(int min, int max);    //  销毁线程池    ~ThreadPool();    //  给线程池添加任务    void threadPoolAddTask(Task<T> task);    //  获取线程池中工作的线程的个数    int  getBusyNum();    //  获取线程池中活着的线程的个数    int getAliveNum();    //////private:    static void* worker(void* arg);    static void* manager(void* arg);    void threadExit();    //////private:    //任务队列    TaskQueue<T> *taskQ;    //管理者线程    pthread_t   managerID;  //管理者线程ID    //工作线程    pthread_t   *threadIDs; //工作的线程ID    int minNum;     //最小线程数量    int maxNum;     //最大线程数量    int busyNum;    //忙的线程个数    int liveNum;    //存活的线程个数    int exitNum;    //要销毁的线程个数    //互斥锁    pthread_mutex_t mutexPool;  //锁整个的线程池    //条件变量    pthread_cond_t notEmpty;    //任务队列是不是空了    bool shutdown = false;   //是不是要销毁线程池，销毁为1，不销毁为0    static const int NUMBER = 2;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> linux </tag>
            
            <tag> c </tag>
            
            <tag> 网络编程 </tag>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++11新特性（I）</title>
      <link href="/2023/10/31/C-11%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%88I%EF%BC%89/"/>
      <url>/2023/10/31/C-11%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%88I%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="C-11新特性"><a href="#C-11新特性" class="headerlink" title="C++11新特性"></a>C++11新特性</h1><h3 id="1-auto-自动推导类型"><a href="#1-auto-自动推导类型" class="headerlink" title="1. auto 自动推导类型"></a>1. auto 自动推导类型</h3><p><code>auto</code>可以在声明变量的时候根据变量初始值的类型自动为此变量选择匹配的类型</p><pre class="line-numbers language-c++"><code class="language-c++">int a = 10;auto b = a;//自动推断类型，b为 int类型auto c = 1.9;//自动推断类型，c为double类型auto d = 1.2e12L;//自动推断类型，d 是 long double<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-using-定义别名"><a href="#2-using-定义别名" class="headerlink" title="2. using 定义别名"></a>2. using 定义别名</h3><p>之前在 C++中可以通过<code> typedef</code> 重定义一个类型，语法格式如下：</p><pre class="line-numbers language-c++"><code class="language-c++">typedef 旧的类型名 新的类型名;// 使用举例typedef unsigned int uint_t;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>关键字<code>using</code>作为别名声明的开始，其后紧跟别名和等号，其作用是把等号左侧的名字规定成等号右侧类型的别名。<strong>类型别名和类型的名字等价，只要是类型的名字能出现的地方，就能使用类型别名。使用<code>typedef</code>定义的别名和使用<code>using</code>定义的别名在语义上是等效的。</strong></p><pre class="line-numbers language-c++"><code class="language-c++">using 新的类型 = 旧的类型;// 使用举例using uint_t = int;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>定义函数指针</p><pre class="line-numbers language-c++"><code class="language-c++">// 使用typedef定义函数指针typedef int(*func_ptr)(int, double);// 使用using定义函数指针using func_ptr1 = int(*)(int, double);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在C++11中，新增了一个特性就是可以通过使用<code>using</code>来为一个模板定义别名，但是<code>typedef</code>不行</p><pre class="line-numbers language-c++"><code class="language-c++">template <typename T>using mymap = map<int, T>;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>using</code>语法和<code>typedef</code>一样，并不会创建出新的类型，它们只是给某些类型定义了新的别名。<code>using</code>相较于<code>typedef</code>的优势在于<strong>定义函数指针别名时看起来更加直观，并且可以给模板定义别名</strong>。</p><h3 id="3-右值引用"><a href="#3-右值引用" class="headerlink" title="3. &amp;&amp; 右值引用"></a>3. &amp;&amp; 右值引用</h3><ol><li><strong>左值是指存储在内存中、有明确存储地址（可取地址）的数据；</strong></li><li><strong>右值是指可以提供数据值的数据（不可取地址）；</strong></li></ol><p>右值分两种：</p><ol><li>纯右值：非引用返回的临时变量、运算表达式产生的临时变量、原始字面量和 lambda 表达式等</li><li>将亡值：与右值引用相关的表达式，比如，T&amp;&amp;类型函数的返回值、 std::move 的返回值等。</li></ol><ul><li><p><strong>右值引用具有移动语义，移动语义可以将资源（堆、系统对象等）通过浅拷贝从一个对象转移到另一个对象这样就能减少不必要的临时对象的创建、拷贝以及销毁，可以大幅提高C++应用程序的性能。</strong></p></li><li><p><strong>移动构造中使用了右值引用，会将临时对象中的堆内存地址的所有权转移给对象t，这块内存被成功续命，因此在t对象中还可以继续使用这块内存。</strong></p></li></ul><ol><li>左值和右值是独立于他们的类型的，右值引用类型可能是左值也可能是右值。</li><li>编译器会将已命名的右值引用视为左值，将未命名的右值引用视为右值。</li><li>auto&amp;&amp;或者函数参数类型自动推导的T&amp;&amp;是一个未定的引用类型，它可能是左值引用也可能是右值引用类型，这取决于初始化的值类型（上面有例子）。</li><li>通过右值推导 T&amp;&amp; 或者 auto&amp;&amp; 得到的是一个右值引用类型，其余都是左值引用类型。</li></ol><h3 id="4-nullptr-标识空指针"><a href="#4-nullptr-标识空指针" class="headerlink" title="4. nullptr 标识空指针"></a>4. nullptr 标识空指针</h3><p>在C++中<code>NULL</code>和<code>0</code>是等价的，C++11 标准并没有对 NULL 的宏定义做任何修改，而是另其炉灶，引入了一个新的关键字<code>nullptr</code>。<code>nullptr </code>专用于初始化空类型指针，不同类型的指针变量都可以使用 <code>nullptr </code>来初始化。</p><pre class="line-numbers language-c++"><code class="language-c++">int*    ptr1 = nullptr;char*   ptr2 = nullptr;double* ptr3 = nullptr;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>NULL</code>底层源码</p><pre class="line-numbers language-c++"><code class="language-c++">#ifndef NULL    #ifdef __cplusplus        #define NULL 0    #else        #define NULL ((void *)0)    #endif#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>C++ 中，<code>void * </code>类型无法隐式转换为其他类型的指针，此时使用 <code>0 </code>代替 <code>(void *)0)</code>，用于解决空指针的问题。</p><p><strong><code>nullptr</code> 无法隐式转换为整形，但是可以隐式匹配指针类型。在 C++11 标准下，相比 <code>NULL</code> 和<code> 0</code>，使用 <code>nullptr</code> 初始化空指针可以令我们编写的程序更加健壮</strong></p><h3 id="5-decltype-类型推导"><a href="#5-decltype-类型推导" class="headerlink" title="5. decltype 类型推导"></a>5. decltype 类型推导</h3><p><code>decltype</code>类型说明符，它的作用是选择并返回操作数的数据类型，在此过程中，编译器分析表达式并得到它的类型，却不实际计算表达式的值。 </p><pre class="line-numbers language-c++"><code class="language-c++">int getSize();int main(void)&#123;    int tempA = 2;        /*1.dclTempA为int*/    decltype(tempA) dclTempA;    /*2.dclTempB为int，对于getSize根本没有定义，但是程序依旧正常，因为decltype只做分析，并不调用getSize，*/    decltype(getSize()) dclTempB;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <code>decltype</code>和<code>auto</code>都可以用来推断类型，但是二者有几处明显的差异： </p><ol><li><p><code>auto</code>忽略顶层<code>const</code>，<code>decltype</code>保留顶层<code>const</code>；</p></li><li><p>对引用操作，<code>auto</code>推断出原有类型，<code>decltype</code>推断出引用； </p></li><li><p>对解引用操作，<code>auto</code>推断出原有类型，<code>decltype</code>推断出引用； </p></li><li><p><code>auto</code> 推断时会实际执行，<code>ecltype</code>不会执行，只做分析。 总之在使用中过程中和<code>const</code>、引用和指针结合时需要特别小心。</p></li></ol><h3 id="6-委托构造"><a href="#6-委托构造" class="headerlink" title="6. 委托构造"></a>6. 委托构造</h3><p>C++11 引入了委托构造的概念，这使得构造函数可以在同一个类中一个构造函数调用另一个构造函数，从而达到简化代码的目的</p><pre class="line-numbers language-c++"><code class="language-c++">class Base &#123;public:    int value1;    int value2;    Base() &#123;        value1 = 1;    &#125;    Base(int value) : Base() &#123;  // 委托 Base() 构造函数        value2 = 2;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于epoll的web服务器(C语言版本)</title>
      <link href="/2023/10/28/%E5%9F%BA%E4%BA%8Eepoll%E7%9A%84web%E6%9C%8D%E5%8A%A1%E5%99%A8-C%E8%AF%AD%E8%A8%80%E7%89%88%E6%9C%AC/"/>
      <url>/2023/10/28/%E5%9F%BA%E4%BA%8Eepoll%E7%9A%84web%E6%9C%8D%E5%8A%A1%E5%99%A8-C%E8%AF%AD%E8%A8%80%E7%89%88%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>记录学习使用epoll实现web服务器</p><span id="more"></span><h2 id="基于epoll的web服务器-C语言版本"><a href="#基于epoll的web服务器-C语言版本" class="headerlink" title="基于epoll的web服务器(C语言版本)"></a>基于epoll的web服务器(C语言版本)</h2><h3 id="1-初始化监听套接字"><a href="#1-初始化监听套接字" class="headerlink" title="1. 初始化监听套接字"></a>1. 初始化监听套接字</h3><p>包括创建监听套接字，设置端口复用，绑定，设置监听等步骤</p><h4 id="1-1-创建监听套接字（socket函数）"><a href="#1-1-创建监听套接字（socket函数）" class="headerlink" title="1.1 创建监听套接字（socket函数）"></a>1.1 创建监听套接字（socket函数）</h4><p><code>socket()</code>打开一个网络通讯端口，如果成功的话，就像<code>open()</code>一样返回一个文件描述符，应用程序可以像读写文件一样用<code>read/write</code>在网络上收发数据，如果<code>socket()</code>调用出错则返回<code>-1</code>。对于<code>IPv4</code>，<code>domain</code>参数指定为<code>AF_INET</code>。对于<code>TCP</code>协议，<code>type</code>参数指定为<code>SOCK_STREAM</code>，表示面向流的传输协议。如果是<code>UDP</code>协议，则<code>type</code>参数指定为<code>SOCK_DGRAM</code>，表示面向数据报的传输协议。<code>protocol</code>参数的介绍从略，指定为0即可。</p><pre class="line-numbers language-txt"><code class="language-txt">#include <sys/types.h> /* See NOTES */#include <sys/socket.h>int socket(int domain, int type, int protocol);domain:    AF_INET 这是大多数用来产生socket的协议，使用TCP或UDP来传输，用IPv4的地址    AF_INET6 与上面类似，不过是来用IPv6的地址    AF_UNIX 本地协议，使用在Unix和Linux系统上，一般都是当客户端和服务器在同一台及其上的时候使用type:    SOCK_STREAM 这个协议是按照顺序的、可靠的、数据完整的基于字节流的连接。这是一个使用最多的socket类型，这个socket是使用TCP来进行传输。    SOCK_DGRAM 这个协议是无连接的、固定长度的传输调用。该协议是不可靠的，使用UDP来进行它的连接。    SOCK_SEQPACKET该协议是双线路的、可靠的连接，发送固定长度的数据包进行传输。必须把这个包完整的接受才能进行读取。    SOCK_RAW socket类型提供单一的网络访问，这个socket类型使用ICMP公共协议。（ping、traceroute使用该协议）    SOCK_RDM 这个类型是很少使用的，在大部分的操作系统上没有实现，它是提供给数据链路层使用，不保证数据包的顺序protocol:    传0 表示使用默认协议。返回值：    成功：返回指向新创建的socket的文件描述符，失败：返回-1，设置errno<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-设置端口复用（setsockopt函数）"><a href="#1-2-设置端口复用（setsockopt函数）" class="headerlink" title="1.2 设置端口复用（setsockopt函数）"></a>1.2 设置端口复用（setsockopt函数）</h4><p>在<code>server</code>的TCP连接没有完全断开之前不允许重新监听是不合理的。因为，TCP连接没有完全断开指的是<code>connfd</code>（127.0.0.1:6666）没有完全断开，而我们重新监听的是<code>listenfd</code>（0.0.0.0:6666），虽然是占用同一个端口，但<code>IP</code>地址不同，<code>connfd</code>对应的是与某个客户端通讯的一个具体的<code>IP</code>地址，而<code>listenfd</code>对应的是<code>wildcard address</code>。解决这个问题的方法是使用<code>setsockopt()</code>设置<code>socket</code>描述符的选项<code>SO_REUSEADDR</code>为1，表示允许创建端口号相同但<code>IP</code>地址不同的多个<code>socket</code>描述符。</p><p>在server代码的socket()和bind()调用之间插入如下代码：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> opt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">setsockopt</span><span class="token punctuation">(</span>listenfd<span class="token punctuation">,</span> SOL_SOCKET<span class="token punctuation">,</span> SO_REUSEADDR<span class="token punctuation">,</span> <span class="token operator">&amp;</span>opt<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="1-3-绑定（bind函数）"><a href="#1-3-绑定（bind函数）" class="headerlink" title="1.3 绑定（bind函数）"></a>1.3 绑定（bind函数）</h4><p>服务器程序所监听的网络地址和端口号通常是固定不变的，客户端程序得知服务器程序的地址和端口号后就可以向服务器发起连接，因此服务器需要调用<code>bind</code>绑定一个固定的网络地址和端口号。</p><pre class="line-numbers language-txt"><code class="language-txt">#include <sys/types.h> /* See NOTES */#include <sys/socket.h>int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);sockfd：    socket文件描述符addr:    构造出IP地址加端口号addrlen:    sizeof(addr)长度返回值：    成功返回0，失败返回-1, 设置errno<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>bind()</code>的作用是将参数<code>sockfd</code>和<code>addr</code>绑定在一起，使<code>sockfd</code>这个用于网络通讯的文件描述符监听<code>addr</code>所描述的地址和端口号。前面讲过，<code>struct sockaddr *</code>是一个通用指针类型，<code>addr</code>参数实际上可以接受多种协议的<code>sockaddr</code>结构体，而它们的长度各不相同，所以需要第三个参数<code>addrlen</code>指定结构体的长度。如：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> sockaddr_in addr<span class="token punctuation">;</span><span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>servaddr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>servaddr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">htonl</span><span class="token punctuation">(</span>INADDR_ANY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//INADDR_ANY = 0</span>servaddr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先将整个结构体清零，然后设置地址类型为<code>AF_INET</code>，<strong>网络地址为</strong><code>INADDR_ANY</code>**，这个宏表示本地的任意<code>IP</code><strong>地址</strong>，因为服务器可能有多个网卡，每个网卡也可能绑定多个<code>IP</code>地址，这样设置可以在所有的<code>IP</code>地址上监听，直到与某个客户端建立了连接时才确定下来到底用哪个<code>IP</code>地址，端口号为8888。</p><h4 id="1-4-设置监听-（listen函数）"><a href="#1-4-设置监听-（listen函数）" class="headerlink" title="1.4 设置监听 （listen函数）"></a>1.4 设置监听 （listen函数）</h4><pre class="line-numbers language-txt"><code class="language-txt">#include <sys/types.h> /* See NOTES */#include <sys/socket.h>int listen(int sockfd, int backlog);sockfd:    socket文件描述符backlog:    排队建立3次握手队列和刚刚建立3次握手队列的链接数和(现在只表示建立链接队列的数量)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看系统默认<code>backlog</code></p><pre class="line-numbers language-shell"><code class="language-shell">cat /proc/sys/net/ipv4/tcp_max_syn_backlog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>典型的服务器程序可以同时服务于多个客户端，当有客户端发起连接时，服务器调用的<code>accept()</code>返回并接受这个连接，如果有大量的客户端发起连接而服务器来不及处理，尚未<code>accept</code>的客户端就处于连接等待状态，<code>listen()</code>声明<code>sockfd</code>处于监听状态，并且最多允许有<code>backlog</code>个客户端处于连接待状态，如果接收到更多的连接请求就忽略。<code>listen()</code>成功返回0，失败返回-1。</p><h4 id="1-5-初始化监听套接字（initListenFd函数）"><a href="#1-5-初始化监听套接字（initListenFd函数）" class="headerlink" title="1.5 初始化监听套接字（initListenFd函数）"></a>1.5 初始化监听套接字（initListenFd函数）</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 初始化监听套接字</span><span class="token keyword">int</span> <span class="token function">initListenFd</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1. 创建监听套接字</span>    <span class="token keyword">int</span> lfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span>SOCK_STREAM<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>lfd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"socket error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2. 设置端口复用</span>    <span class="token keyword">int</span> opt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">setsockopt</span><span class="token punctuation">(</span>lfd<span class="token punctuation">,</span>SOL_SOCKET<span class="token punctuation">,</span>SO_REUSEADDR<span class="token punctuation">,</span><span class="token operator">&amp;</span>opt<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"setsockopt error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 3. 绑定</span>    <span class="token keyword">struct</span> sockaddr_in addr<span class="token punctuation">;</span>    addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>    addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>    addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">bind</span><span class="token punctuation">(</span>lfd<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>addr<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"bind error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 4.设置监听</span>    ret <span class="token operator">=</span> <span class="token function">listen</span><span class="token punctuation">(</span>lfd<span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"listen error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 5. 返回fd</span>    <span class="token keyword">return</span> lfd<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-启动epoll"><a href="#2-启动epoll" class="headerlink" title="2. 启动epoll"></a>2. 启动epoll</h3><p><code>epoll</code>是<code>Linux</code>下<strong>IO多路复用</strong>接口<code>select/poll</code>的增强版本，它能显著提高程序在大量并发连接中只有少量活跃的情况下的系统CPU利用率，因为它会复用文件描述符集合来传递结果而不用迫使开发者每次等待事件之前都必须重新准备要被侦听的文件描述符集合，另一点原因就是获取事件的时候，它无须遍历整个被侦听的描述符集，只要遍历那些被内核IO事件异步唤醒而加入<code>Ready</code>队列的描述符集合就行了。</p><p><code>epoll</code>除了提供<code>select/poll</code>那种IO事件的水平触发（Level Triggered）外，还提供了边沿触发（Edge Triggered），这就使得用户空间程序有可能缓存IO状态，减少<code>epoll_wait/epoll_pwait</code>的调用，提高应用程序效率。</p><h4 id="2-1-创建epoll树-epoll-create"><a href="#2-1-创建epoll树-epoll-create" class="headerlink" title="2.1 创建epoll树  (epoll_create)"></a>2.1 创建epoll树  (epoll_create)</h4><p> 创建一个<code>epoll</code>句柄，参数<code>size</code>用来告诉内核监听的文件描述符的个数，跟内存大小有关。(<strong>参数size已经弃用，只需提供大于0的数字就行</strong>)</p><pre class="line-numbers language-txt"><code class="language-txt">#include <sys/epoll.h>int epoll_create(int size)size：监听数目（内核参考值）返回值：成功：非负文件描述符；失败：-1，设置相应的errno<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用cat命令查看一个进程可以打开的socket描述符上限。</p><pre class="line-numbers language-shell"><code class="language-shell">cat /proc/sys/fs/file-max806425<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如有需要，可以通过修改配置文件的方式修改该上限值。</p><pre class="line-numbers language-txt"><code class="language-txt">sudo vi /etc/security/limits.conf在文件尾部写入以下配置,soft软限制，hard硬限制。如下图所示。* soft nofile 65536* hard nofile 100000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20231026200903197.png" alt="image-20231026200903197"></p><h4 id="2-2-上树（epoll-ctl函数）"><a href="#2-2-上树（epoll-ctl函数）" class="headerlink" title="2.2 上树（epoll_ctl函数）"></a>2.2 上树（epoll_ctl函数）</h4><p>控制某个<code>epoll</code>监控的文件描述符上的事件：注册、修改、删除。</p><pre class="line-numbers language-txt"><code class="language-txt">#include <sys/epoll.h>int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event)    epfd：为epoll_creat的句柄    op：表示动作，用3个宏来表示：    EPOLL_CTL_ADD (注册新的fd到epfd)，    EPOLL_CTL_MOD (修改已经注册的fd的监听事件)，    EPOLL_CTL_DEL (从epfd删除一个fd)；    event：告诉内核需要监听的事件struct epoll_event &#123;    __uint32_t events; /* Epoll events */    epoll_data_t data; /* User data variable */&#125;;typedef union epoll_data &#123;    void *ptr;    int fd;    uint32_t u32;    uint64_t u64;&#125; epoll_data_t;EPOLLIN ：表示对应的文件描述符可以读（包括对端SOCKET正常关闭）EPOLLOUT：表示对应的文件描述符可以写EPOLLPRI：表示对应的文件描述符有紧急的数据可读（这里应该表示有带外数据到来）EPOLLERR：表示对应的文件描述符发生错误EPOLLHUP：表示对应的文件描述符被挂断；EPOLLET： 将EPOLL设为边缘触发(Edge Triggered)模式，这是相对于水平触发(Level Triggered)而言的EPOLLONESHOT：只监听一次事件，当监听完这次事件之后，如果还需要继续监听这个socket的话，需要再次把这个socket加入到EPOLL队列里返回值：成功：0；失败：-1，设置相应的errno<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-检测（epoll-wait函数）"><a href="#2-3-检测（epoll-wait函数）" class="headerlink" title="2.3 检测（epoll_wait函数）"></a>2.3 检测（epoll_wait函数）</h4><p>等待所监控文件描述符上有事件的产生，类似于<code>select()</code>调用。</p><pre class="line-numbers language-txt"><code class="language-txt">#include <sys/epoll.h>    int epoll_wait(int epfd, struct epoll_event *events, int maxevents, int timeout)    events：用来存内核得到事件的集合，可简单看作数组。    maxevents：告之内核这个events有多大，这个maxevents的值不能大于创建epoll_create()时的size，    timeout：是超时时间    -1：阻塞    0：立即返回，非阻塞    >0：指定毫秒    返回值：成功返回有多少文件描述符就绪，时间到时返回0，出错返回-1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4-启动epoll-epollrun函数"><a href="#2-4-启动epoll-epollrun函数" class="headerlink" title="2.4 启动epoll(epollrun函数)"></a>2.4 启动epoll(epollrun函数)</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//启动epoll</span><span class="token keyword">void</span> <span class="token function">epollrun</span><span class="token punctuation">(</span><span class="token keyword">int</span> lfd<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1. 创建epoll树</span>    <span class="token keyword">int</span> epfd <span class="token operator">=</span> <span class="token function">epoll_create</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>epfd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"epoll_create error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2. lfd上树</span>    <span class="token keyword">struct</span> epoll_event ev<span class="token punctuation">;</span>    ev<span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd <span class="token operator">=</span> lfd<span class="token punctuation">;</span>    ev<span class="token punctuation">.</span>events <span class="token operator">=</span> EPOLLIN<span class="token punctuation">;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">epoll_ctl</span><span class="token punctuation">(</span>epfd<span class="token punctuation">,</span>EPOLL_CTL_ADD<span class="token punctuation">,</span>lfd<span class="token punctuation">,</span><span class="token operator">&amp;</span>ev<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"epoll_ctl error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 3. 检测(委托内核检测添加到树上的节点)</span>    <span class="token keyword">struct</span> epoll_event evs<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token function">siezof</span><span class="token punctuation">(</span>evs<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> epoll_event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token function">epoll_wait</span><span class="token punctuation">(</span>epfd<span class="token punctuation">,</span>evs<span class="token punctuation">,</span>size<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"epoll_wait error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历发生变化的节点</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>evs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>events <span class="token operator">&amp;</span> EPOLLIN<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 不是读事件</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> fd <span class="token operator">=</span> evs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fd <span class="token operator">==</span> lfd<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 建立新连接 accept</span>                <span class="token function">acceptClient</span><span class="token punctuation">(</span>lfd<span class="token punctuation">,</span>epfd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 主要是接受对端的数据(读数据)</span>                <span class="token function">recvHttpRequest</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>epfd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-建立连接"><a href="#3-建立连接" class="headerlink" title="3. 建立连接"></a>3. 建立连接</h3><h4 id="3-1-建立连接-（accept函数）"><a href="#3-1-建立连接-（accept函数）" class="headerlink" title="3.1 建立连接 （accept函数）"></a>3.1 建立连接 （accept函数）</h4><p><strong>三方握手完成后，服务器调用<code>accept()</code>接受连接</strong>，如果服务器调用<code>accept()</code>时还没有客户端的连接请求，就阻塞等待直到有客户端连接上来。<code>addr</code>是一个传出参数，<code>accept()</code>返回时传出客户端的地址和端口号。<code>addrlen</code>参数是一个传入传出参数（value-result argument），传入的是调用者提供的缓冲区<code>addr</code>的长度以避免缓冲区溢出问题，传出的是客户端地址结构体的实际长度（有可能没有占满调用者提供的缓冲区）。如果给<code>addr</code>参数传<code>NULL</code>，表示不关心客户端的地址。</p><pre class="line-numbers language-txt"><code class="language-txt">#include <sys/types.h> /* See NOTES */#include <sys/socket.h>int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);sockdf:    socket文件描述符addr:    传出参数，返回链接客户端地址信息，含IP地址和端口号addrlen:    传入传出参数（值-结果）,传入sizeof(addr)大小，函数返回时返回真正接收到地址结构体的大小返回值：    成功返回一个新的socket文件描述符，用于和客户端通信，失败返回-1，设置errno<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们的服务器程序结构是这样的：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    cliaddr_len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>cliaddr<span class="token punctuation">)</span><span class="token punctuation">;</span>    connfd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>listenfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>cliaddr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cliaddr_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    n <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> MAXLINE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token function">close</span><span class="token punctuation">(</span>connfd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>整个是一个while死循环，每次循环处理一个客户端连接。由于<code>cliaddr_len</code>是传入传出参数，每次调用<code>accept()</code>之前应该重新赋初值。<code>accept()</code>的参数<code>listenfd</code>是先前的监听文件描述符，而<code>accept()</code>的返回值是另外一个文件描述符<code>connfd</code>，之后与客户端之间就通过这个<code>connfd</code>通讯，最后关闭<code>connfd</code>断开连接，而不关闭<code>listenfd</code>，再次回到循环开头<code>listenfd</code>仍然用作<code>accept</code>的参数。<code>accept()</code>成功返回一个文件描述符，出错返回-1。</p><h4 id="3-2-epoll事件模型"><a href="#3-2-epoll事件模型" class="headerlink" title="3.2 epoll事件模型"></a>3.2 epoll事件模型</h4><p><code>EPOLL</code>事件有两种模型：</p><ul><li><p><code>Edge Triggered (ET) </code>边缘触发只有数据到来才触发，不管缓存区中是否还有数据。</p></li><li><p><code>Level Triggered (LT) </code>水平触发只要有数据都会触发。</p></li></ul><pre class="line-numbers language-txt"><code class="language-txt">思考如下步骤：1.假定我们已经把一个用来从管道中读取数据的文件描述符(rfd)添加到epoll描述符。2.管道的另一端写入了2KB的数据3.调用epoll_wait，并且它会返回rfd，说明它已经准备好读取操作4.读取1KB的数据5.调用epoll_wait……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ET模式 即Edge Triggered工作模式（边沿触发）</strong></p><p>如果我们在第1步将<code>rfd</code>添加到<code>epoll</code>描述符的时候使用了<code>EPOLLET</code>标志，那么在第5步调用<code>epoll_wait</code>之后将有可能会挂起，因为剩余的数据还存在于文件的输入缓冲区内，而且数据发出端还在等待一个针对已经发出数据的反馈信息。只有在监视的文件句柄上发生了某个事件的时候 <code>ET</code> 工作模式才会汇报事件。因此在第5步的时候，调用者可能会放弃等待仍在存在于文件输入缓冲区内的剩余数据。<code>epoll</code>工作在<code>ET</code>模式的时候，必须使用非阻塞套接口，以避免由于一个文件句柄的阻塞读&#x2F;阻塞写操作把处理多个文件描述符的任务饿死。最好以下面的方式调用<code>ET</code>模式的<code>epoll</code>接口，在后面会介绍避免可能的缺陷。</p><ul><li><p>基于非阻塞文件句柄</p></li><li><p>只有当<code>read</code>或者<code>write</code>返回<code>EAGAIN</code>(非阻塞读，暂时无数据)时才需要挂起、等待。但这并不是说每次<code>read</code>时都需要循环读，直到读到产生一个<code>EAGAIN</code>才认为此次事件处理完成，当<code>read</code>返回的读到的数据长度小于请求的数据长度时，就可以确定此时缓冲中已没有数据了，也就可以认为此事读事件已处理完成。</p></li></ul><p><strong>LT模式即Level Triggered工作模式(水平触发)</strong></p><p>与<code>ET</code>模式不同的是，以<code>LT</code>方式调用<code>epoll</code>接口的时候，它就相当于一个速度比较快的<code>poll</code>，无论后面的数据是否被使用。</p><p><strong>比较</strong></p><p><code>LT(level triggered)</code>：<code>LT</code>是<strong>缺省</strong>的工作方式，并且同时支持<code>block</code>和<code>no-block socket</code>。在这种做法中，内核告诉你一个文件描述符是否就绪了，然后你可以对这个就绪的<code>fd</code>进行IO操作。如果你不作任何操作，内核还是会继续通知你的，所以，这种模式编程出错误可能性要小一点。**传统的<code>select/poll</code>**都是这种模型的代表。</p><p><code>ET(edge-triggered)</code>：**<code>ET</code>是高速工作方式，只支持<code>no-block socket</code>**。在这种模式下，当描述符从未就绪变为就绪时，内核通过<code>epoll</code>告诉你。然后它会假设你知道文件描述符已经就绪，并且不会再为那个文件描述符发送更多的就绪通知。请注意，如果一直不对这个<code>fd</code>作IO操作(从而导致它再次变成未就绪)，内核不会发送更多的通知<code>**(only once)**</code>.</p><h4 id="3-3-阻塞与非阻塞"><a href="#3-3-阻塞与非阻塞" class="headerlink" title="3.3 阻塞与非阻塞"></a>3.3 阻塞与非阻塞</h4><ul><li>非阻塞模式可以理解为，执行此套接字的网络调用时，不管是否执行成功，都会立即返回。</li></ul><p>​如调用<code>recv( )</code>函数读取网络缓冲区中的数据时，不管是否读到数据都立即返回，而不会一直挂在此函数的调用上。</p><ul><li>阻塞模式为只有接收到数据后才会返回，套接字默认的会创建堵塞模式。</li></ul><h4 id="3-4-建立连接（accpetClient函数）"><a href="#3-4-建立连接（accpetClient函数）" class="headerlink" title="3.4 建立连接（accpetClient函数）"></a>3.4 建立连接（accpetClient函数）</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">accpetClient</span><span class="token punctuation">(</span><span class="token keyword">int</span> lfd<span class="token punctuation">,</span><span class="token keyword">int</span> epfd<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1. 建立连接</span>    <span class="token keyword">struct</span> sockaddr_in cliaddr<span class="token punctuation">;</span>    socklen_t len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>cliaddr<span class="token punctuation">)</span><span class="token punctuation">;</span>    cliaddr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>    <span class="token keyword">int</span> cfd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>lfd<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>cliaddr<span class="token punctuation">,</span><span class="token operator">&amp;</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cfd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"accept error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ip<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"new client ip=%s port=%d\n"</span><span class="token punctuation">,</span>    <span class="token function">inet_ntop</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cliaddr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr<span class="token punctuation">,</span>ip<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">ntohs</span><span class="token punctuation">(</span>cliaddr<span class="token punctuation">.</span>sin_port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. 设置非阻塞</span>    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token function">fcntl</span><span class="token punctuation">(</span>cfd<span class="token punctuation">,</span>F_GETFL<span class="token punctuation">)</span><span class="token punctuation">;</span>    flag <span class="token operator">|</span><span class="token operator">=</span> O_NONBLOCK<span class="token punctuation">;</span>    <span class="token function">fcntl</span><span class="token punctuation">(</span>cfd<span class="token punctuation">,</span>F_SETFL<span class="token punctuation">,</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 3. cfd添加到epoll</span>    <span class="token keyword">struct</span> epoll_event ev<span class="token punctuation">;</span>    ev<span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd <span class="token operator">=</span> cfd<span class="token punctuation">;</span>    ev<span class="token punctuation">.</span>events <span class="token operator">=</span> EPOLLIN <span class="token operator">|</span> EPOLLET<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//边沿模式</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">epoll_ctl</span><span class="token punctuation">(</span>epfd<span class="token punctuation">,</span>EPOLL_CTL_ADD<span class="token punctuation">,</span>cfd<span class="token punctuation">,</span><span class="token operator">&amp;</span>ev<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"epoll_ctl error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-接收客户端发来的http请求"><a href="#4-接收客户端发来的http请求" class="headerlink" title="4. 接收客户端发来的http请求"></a>4. 接收客户端发来的http请求</h3><h4 id="4-1-接收数据-（recv函数）"><a href="#4-1-接收数据-（recv函数）" class="headerlink" title="4.1 接收数据 （recv函数）"></a>4.1 接收数据 （recv函数）</h4><p>接收来自<code>socket</code>缓冲区的数据，当缓冲区没有数据可取时，<code>recv</code>会一直处于阻塞状态()，直到缓冲区至少又一个字节数据可读取，或者对端关闭，并读取所有数据后返回。</p><pre class="line-numbers language-txt"><code class="language-txt">#include<sys/types.h>#include<sys/socket.h>int recv(int sockfd, char * buf, int len, int flags);sockfd：连接的fdbuf：用于接收数据的缓冲区len：缓冲区长度flags：指定调用方式返回值：成功返回实际读到的字节数。如果recv在copy时出错，那么它返回err，err小于0；如果recv函数在等待协议接收数据时网络中断了，那么它返回0。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>read</strong></p><p><code>read</code>函数从文件描述符（包括<code>TCP Socket</code>）中读取数据，并将读取的数据存储到指定的缓冲区中。</p><pre class="line-numbers language-txt"><code class="language-txt">ssize_t read(int fd, void *buf, size_t count);fd：要读取数据的文件描述符，可以是TCP Socket。buf：存储读取数据的缓冲区。count：要读取的字节数。返回值：成功时返回实际读取的字节数，失败时返回-1，并设置errno变量来指示错误的原因。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>read</code>函数和<code>recv</code>函数都是阻塞调用，即在没有数据可读时会一直阻塞等待。它们的主要区别在于<code>recv</code>函数可以通过<code>flags</code>参数控制一些特殊的行为，如设置<code>MSG_PEEK</code>标志来预览数据而不将其从缓冲区中移除。</p><h4 id="4-2-EAGAIN错误"><a href="#4-2-EAGAIN错误" class="headerlink" title="4.2 EAGAIN错误"></a>4.2 EAGAIN错误</h4><p>以<code>O_NONBLOCK</code>的标志打开文件<code>/socket/FIFO</code>，如果你连续做<code>read</code>或者<code>recv</code>操作而没有数据可读。此时程序不会阻塞起来等待数据准备就绪返回，<code>read</code>函数会返回一个错误<code>EAGAIN</code>，提示你的应用程序现在没有数据可读请稍后再试。</p><pre class="line-numbers language-txt"><code class="language-txt">（epoll的ET模式下设置recv，对应的fd文件描述符设置为非阻塞）下调用了阻塞操作，在该操作没有完成就返回这个错误，这个错误不会破坏socket的同步，不用管它，下次循环接着recv就可以。对非阻塞socket而言，EAGAIN不是一种错误。在VxWorks和Windows上，EAGAIN的名字叫做EWOULDBLOCK。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-3-接受http请求（recvHttpRequest函数）"><a href="#4-3-接受http请求（recvHttpRequest函数）" class="headerlink" title="4.3 接受http请求（recvHttpRequest函数）"></a>4.3 接受http请求（recvHttpRequest函数）</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">recvHttpRequest</span><span class="token punctuation">(</span><span class="token keyword">int</span> cfd<span class="token punctuation">,</span><span class="token keyword">int</span> epfd<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">4096</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token number">0</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> tmp<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token number">0</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1. 接收数据</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> <span class="token function">recv</span><span class="token punctuation">(</span>cfd<span class="token punctuation">,</span>tmp<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>total <span class="token operator">+</span> len <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">memcpy</span><span class="token punctuation">(</span>buf <span class="token operator">+</span> total<span class="token punctuation">,</span>tmp<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        total <span class="token operator">+</span><span class="token operator">=</span> len<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2. 判断数据是否接受完毕</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> errno <span class="token operator">==</span> EAGAIN<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 解析请求行   </span>        <span class="token comment" spellcheck="true">/*        0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19        G E T   / 1 . t x t H  T  T  P  /  1  .  1  /r /n        */</span>        <span class="token keyword">char</span><span class="token operator">*</span> pt <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//大字符串找小字符串</span>        <span class="token keyword">int</span> reqLen <span class="token operator">=</span> pt <span class="token operator">-</span> buf<span class="token punctuation">;</span>        buf<span class="token punctuation">[</span>reqLen<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 客户端断开连接</span>        <span class="token function">epoll_ctl</span><span class="token punctuation">(</span>epfd<span class="token punctuation">,</span>EPOLL_CTL_DEL<span class="token punctuation">,</span>cfd<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"recv error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-解析请求行"><a href="#5-解析请求行" class="headerlink" title="5. 解析请求行"></a>5. 解析请求行</h3><h4 id="5-1-格式化拆分字符串-（sscanf函数）"><a href="#5-1-格式化拆分字符串-（sscanf函数）" class="headerlink" title="5.1 格式化拆分字符串 （sscanf函数）"></a>5.1 格式化拆分字符串 （sscanf函数）</h4><pre class="line-numbers language-txt"><code class="language-txt">sprintf（）是把格式化数据输出成（存储到）字符串。sscanf（）是从字符串中读取格式化的数据。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-txt"><code class="language-txt">// 函数原型// 将参数str的字符串根据参数format字符串来转换并格式化数据，转换后的结果存于对应的参数内。sscanf(const char *str, const char *format, ...)。具体功能如下：（1）根据格式从字符串中提取数据。如从字符串中取出整数、浮点数和字符串等。（2）取指定长度的字符串（3）取到指定字符为止的字符串（4）取仅包含指定字符集的字符串（5）取到指定字符集为止的字符串// 可以使用正则表达式进行字符串的拆分// shell脚本的时候, 会将正则表达式, 其实就是字符串的匹配规则, 用特殊字符来描述一类字符串/*正则匹配规则:    [1-9]: 匹配一个字符, 这个字符在 1-9 范围内就满足条件    [2-7]: 匹配一个字符, 这个字符在 2-7 范围内就满足条件    [a-z]: 匹配一个字符, 这个字符在 a-z 范围内就满足条件    [A,b,c,D, e, f]: 匹配一个字符, 这个字符是集合中任意一个就满足条件    [1-9, f-x]: 匹配一个字符, 这个字符是1-9, 或者f-x 集合中的任意一个就满足条件    [^1]: ^代表否定, 匹配一个字符,这个字符只要不是1就满足条件    [^2-8]: 匹配一个字符,这个字符只要不在 2-8 范围内就满足条件    [^a-f]: 匹配一个字符,这个字符只要不在 a-f 范围内就满足条件    [^ ]: 匹配一个字符,这个字符只要不是空格就满足条件使用正则表达式如何取匹配字符串:举例:     字符串 ==> abcdefg12345AABBCCDD890    正则表达式: [1-9][a-z], 可以匹配两个字符    匹配方式: 从原始字符串开始位置遍历, 每遍历一个字符都需要和正则表达式进行匹配,         满足条件继续向后匹配, 不满足条件, 匹配结束        从新开始: 从正则表达式的第一个字符重新开始向后一次匹配            当整个大字符串被匹配一遍, 就结束了    abcdefg12345AABBCCDD893b        - 匹配到一个子字符串: 3b    1a2b3c4d5e6f7g12345AABBCCDD893b     - 1a     - 2b     - 3c     - 4d     - 5e     - 6f     - 7g     - 3b*/sscanf可以支持格式字符%[]：(1)-: 表示范围，如：%[1-9]表示只读取1-9这几个数字 %[a-z]表示只读取a-z小写字母，类似地 %[A-Z]只读取大写字母(2)^: 表示不取，如：%[^1]表示读取除'1'以外的所有字符 %[^/]表示除/以外的所有字符(3),: 范围可以用","相连接 如%[1-9,a-z]表示同时取1-9数字和a-z小写字母 (4)原则：从第一个在指定范围内的数字开始读取，到第一个不在范围内的数字结束%s 可以看成%[] 的一个特例 %[^ ](注意^后面有一个空格！)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-2-转码"><a href="#5-2-转码" class="headerlink" title="5.2 转码"></a>5.2 转码</h4><pre class="line-numbers language-txt"><code class="language-txt">假设浏览器访问的文件名中有中文: Linux内核.jpg    - 浏览器在给服务器发送请求的时候, 会自动将中文进制转换: Linux%E5%86%85%E6%A0%B8.jpg    - 为什么要转换?        - 在http请求的请求行中不支持中文字符, 如果有中文, 浏览器就会自动将中文进行转换        - 在服务器端收到的文件名就不是原来的名字了, 因此服务器端就不能识别了        - 如果服务器端想要正确的处理, 需要将特殊字符串解析成原来的汉字        $ unicode 内UTF-8: e5 86 85 $ unicode 核UTF-8: e6 a0 b8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-3-获取文件信息（stat）"><a href="#5-3-获取文件信息（stat）" class="headerlink" title="5.3 获取文件信息（stat）"></a>5.3 获取文件信息（stat）</h4><p><code>Linux</code> 下可以使用<code>stat </code>命令查看文件的属性，其实这个命令内部就是通过调用<code> stat()</code>函数来获取文件属性的，<code>stat </code>函数是 <code>Linux </code>中的系统调用，用于获取文件相关的信息。</p><pre class="line-numbers language-txt"><code class="language-txt">#include <sys/types.h>#include <sys/stat.h>#include <unistd.h>int stat(const char *pathname, struct stat *buf);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-txt"><code class="language-txt">struct stat&#123;     dev_t st_dev; /* 文件所在设备的 ID */     ino_t st_ino; /* 文件对应 inode 节点编号 */     mode_t st_mode; /* 文件对应的模式 */     nlink_t st_nlink; /* 文件的链接数 */     uid_t st_uid; /* 文件所有者的用户 ID */     gid_t st_gid; /* 文件所有者的组 ID */     dev_t st_rdev; /* 设备号（指针对设备文件） */     off_t st_size; /* 文件大小（以字节为单位） */     blksize_t st_blksize; /* 文件内容存储的块大小 */     blkcnt_t st_blocks; /* 文件内容所占块数 */     struct timespec st_atim; /* 文件最后被访问的时间 */     struct timespec st_mtim; /* 文件内容最后被修改的时间 */     struct timespec st_ctim; /* 文件状态最后被改变的时间 */&#125;;st_dev：该字段用于描述此文件所在的设备。不常用，可以不用理会。st_ino：文件的 inode 编号。st_mode：该字段用于描述文件的模式，譬如文件类型、文件权限都记录在该变量中。st_nlink：该字段用于记录文件的硬链接数，也就是为该文件创建了多少个硬链接文件。链接文件可以分为软链接（符号链接）文件和硬链接文件。st_uid、st_gid：此两个字段分别用于描述文件所有者的用户 ID 以及文件所有者的组 ID。st_rdev：该字段记录了设备号，设备号只针对于设备文件，包括字符设备文件和块设备文件，不用理会。st_size：该字段记录了文件的大小（逻辑大小），以字节为单位。st_atim、st_mtim、st_ctim：此三个字段分别用于记录文件最后被访问的时间、文件内容最后被修改的时间以及文件状态最后被改变的时间，都是 struct timespec 类型变量。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-3-解析请求行（parseRequestLine函数）"><a href="#5-3-解析请求行（parseRequestLine函数）" class="headerlink" title="5.3 解析请求行（parseRequestLine函数）"></a>5.3 解析请求行（parseRequestLine函数）</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">parseRequestLine</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> line<span class="token punctuation">,</span><span class="token keyword">int</span> cfd<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1. 拆分http请求行   get /xxx/1.jpg http/1.1</span>    <span class="token keyword">char</span> method<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 方法</span>    <span class="token keyword">char</span> path<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 路径</span>    <span class="token keyword">char</span> protocol<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 协议</span>    <span class="token function">sscanf</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span><span class="token string">"%[^ ] %[^ ] %[^ ]"</span><span class="token punctuation">,</span>method<span class="token punctuation">,</span>path<span class="token punctuation">,</span>protocol<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"method = %s, path = %s, protocol = %s\n"</span><span class="token punctuation">,</span> method<span class="token punctuation">,</span> path<span class="token punctuation">,</span> protocol<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断是否是get请求</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcasecmp</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span><span class="token string">"get"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//不区分大小写</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 转码 将不能识别的中文乱码 -> 中文</span>    <span class="token comment" spellcheck="true">// 解码 %23 %34 %5f</span>    <span class="token function">decode_str</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2. 处理客户端请求的静态资源</span>    <span class="token keyword">char</span><span class="token operator">*</span> file <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果没有指定访问的资源, 默认显示资源目录中的内容</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// file的值, 资源目录的当前位置</span>        file <span class="token operator">=</span> <span class="token string">"./"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 去掉path中的/ 获取访问文件名</span>        file <span class="token operator">=</span> path <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3. 获取文件属性</span>    <span class="token keyword">struct</span> stat st<span class="token punctuation">;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">stat</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span><span class="token operator">&amp;</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 文件不存在--回复404</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断文件类型（判断是目录还是文件）</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">S_ISDIR</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span>st_mode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 目录</span>        <span class="token comment" spellcheck="true">// 把目录发给客户端</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 把文件内容发给客户端</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-发送响应头"><a href="#6-发送响应头" class="headerlink" title="6. 发送响应头"></a>6. 发送响应头</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sendHeadMsg</span><span class="token punctuation">(</span><span class="token keyword">int</span> cfd<span class="token punctuation">,</span><span class="token keyword">int</span> status<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> desrc<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> type<span class="token punctuation">,</span><span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 状态行</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">4096</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token number">0</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token string">"http/1.1 %d %s \r\n"</span><span class="token punctuation">,</span>status<span class="token punctuation">,</span>desrc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 消息报头</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>buf <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"Content-Type: %s\r\n"</span><span class="token punctuation">,</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>buf <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"Content-Length: %d\r\n"</span><span class="token punctuation">,</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">send</span><span class="token punctuation">(</span>cfd<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 空行</span>    <span class="token function">send</span><span class="token punctuation">(</span>cfd<span class="token punctuation">,</span> <span class="token string">"\r\n"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-通过文件名获取文件的类型"><a href="#7-通过文件名获取文件的类型" class="headerlink" title="7. 通过文件名获取文件的类型"></a>7. 通过文件名获取文件的类型</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 通过文件名获取文件的类型</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">get_file_type</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> dot<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 自右向左查找‘.’字符, 如不存在返回NULL</span>    dot <span class="token operator">=</span> <span class="token function">strrchr</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>dot <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"text/plain; charset=utf-8"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>dot<span class="token punctuation">,</span> <span class="token string">".html"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>dot<span class="token punctuation">,</span> <span class="token string">".htm"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"text/html; charset=utf-8"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>dot<span class="token punctuation">,</span> <span class="token string">".jpg"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>dot<span class="token punctuation">,</span> <span class="token string">".jpeg"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"image/jpeg"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>dot<span class="token punctuation">,</span> <span class="token string">".gif"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"image/gif"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>dot<span class="token punctuation">,</span> <span class="token string">".png"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"image/png"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>dot<span class="token punctuation">,</span> <span class="token string">".css"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"text/css"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>dot<span class="token punctuation">,</span> <span class="token string">".au"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"audio/basic"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span> dot<span class="token punctuation">,</span> <span class="token string">".wav"</span> <span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"audio/wav"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>dot<span class="token punctuation">,</span> <span class="token string">".avi"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"video/x-msvideo"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>dot<span class="token punctuation">,</span> <span class="token string">".mov"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>dot<span class="token punctuation">,</span> <span class="token string">".qt"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"video/quicktime"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>dot<span class="token punctuation">,</span> <span class="token string">".mpeg"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>dot<span class="token punctuation">,</span> <span class="token string">".mpe"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"video/mpeg"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>dot<span class="token punctuation">,</span> <span class="token string">".vrml"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>dot<span class="token punctuation">,</span> <span class="token string">".wrl"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"model/vrml"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>dot<span class="token punctuation">,</span> <span class="token string">".midi"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>dot<span class="token punctuation">,</span> <span class="token string">".mid"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"audio/midi"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>dot<span class="token punctuation">,</span> <span class="token string">".mp3"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"audio/mpeg"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>dot<span class="token punctuation">,</span> <span class="token string">".ogg"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"application/ogg"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>dot<span class="token punctuation">,</span> <span class="token string">".pac"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"application/x-ns-proxy-autoconfig"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"text/plain; charset=utf-8"</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-发送文件"><a href="#8-发送文件" class="headerlink" title="8. 发送文件"></a>8. 发送文件</h3><h4 id="8-1-断言（assert函数）"><a href="#8-1-断言（assert函数）" class="headerlink" title="8.1 断言（assert函数）"></a>8.1 断言（assert函数）</h4><p>编译期<code>assert</code>函数的目的在于当条件不满足时，阻止编译，从而防止错误的逻辑通过编辑。而运行期<code>assert</code>的目的在于运行时发现条件不满足时，产生一个<code>Debug</code>事件(<code>DebugBreak</code>)，从而让调试器停下来方便用户检查原因。<code>assert </code>是一个宏，不是函数。</p><pre><code>//表达式可以是任何有效的 C 语言表达式，很多时候它是一个条件。void assert(int expression or variable);</code></pre><h4 id="8-2-光标函数（lseek函数）"><a href="#8-2-光标函数（lseek函数）" class="headerlink" title="8.2 光标函数（lseek函数）"></a>8.2 光标函数（lseek函数）</h4><pre class="line-numbers language-txt"><code class="language-txt">#include <sys/types.h> #include <unistd.h>off_t lseek(int handle, off_t offset, int fromwhere);1) 欲将读写位置移到文件开头时:lseek（int fildes,0,SEEK_SET）；2) 欲将读写位置移到文件尾时:lseek（int fildes，0,SEEK_END）；3) 想要取得目前文件位置时:lseek（int fildes，0,SEEK_CUR）；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-3-发送文件（sendFile函数）"><a href="#8-3-发送文件（sendFile函数）" class="headerlink" title="8.3 发送文件（sendFile函数）"></a>8.3 发送文件（sendFile函数）</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sendFile</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> filename<span class="token punctuation">,</span><span class="token keyword">int</span> cfd<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1. 打开文件</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span>O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>fd <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 断言</span>    <span class="token comment" spellcheck="true">// if(fd == -1)&amp;#123;</span>    <span class="token comment" spellcheck="true">//     perror("open error");</span>    <span class="token comment" spellcheck="true">// &amp;#125;</span>    <span class="token comment" spellcheck="true">// 2. 循环读文件</span><span class="token macro property">#<span class="token directive keyword">if</span> 1</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">4096</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token number">0</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 发送读出的数据</span>        ret <span class="token operator">=</span> <span class="token function">send</span><span class="token punctuation">(</span>cfd<span class="token punctuation">,</span>buf<span class="token punctuation">,</span>len<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>errno <span class="token operator">=</span> EAGAIN<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"send error:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EINTR<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"send error:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"send error:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">else</span></span>    off_t offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token function">lseek</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>SEEK_END<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">lseek</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>SEEK_SET<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>offset <span class="token operator">&lt;</span> size<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">sendfile</span><span class="token punctuation">(</span>cfd<span class="token punctuation">,</span>fd<span class="token punctuation">,</span><span class="token operator">&amp;</span>offset<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ret value: %d\n"</span><span class="token punctuation">,</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> errno <span class="token operator">==</span> EAGAIN<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"没数据。。。\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"snedfile"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-发送目录"><a href="#9-发送目录" class="headerlink" title="9. 发送目录"></a>9. 发送目录</h3><h4 id="9-1-目录扫描函数（scandir函数）"><a href="#9-1-目录扫描函数（scandir函数）" class="headerlink" title="9.1 目录扫描函数（scandir函数）"></a>9.1 目录扫描函数（scandir函数）</h4><p><code>scandir()</code>会扫描参数<code>dir</code>指定的目录文件，经由参数<code>select</code>指定的函数来挑选目录结构至参数<code>namelist</code>数组中，最后再调用参数<code>compar</code>指定的函数来排序<code>namelist</code>数组中的目录数据。每次从目录文件中读取一个目录结构后便将此结构传给参数<code>select</code>所指的函数，<code>select</code>函数若不想要将此目录结构复制到<code>namelis</code>t数组就返回0，若<code>select</code>为空指针则代表选择所有的目录结构。<code>scandir()</code>会调用<code>qsort()</code>来排序数据，参数<code>compar</code>则为<code>qsort()</code>的参数，若是要排列目录名称字母则可使用<code>alphasort()</code>。</p><pre class="line-numbers language-txt"><code class="language-txt">#include <dirent.h>int scandir(const char *dir,             struct dirent ***namelist,            int (*select)(const struct dirent *),            int (*compar)(const struct dirent **,             const struct dirent **));dir:指定扫描的目录namelist:struct dirent结构体类型的三级指针，用于获取该函数内部为存放返回结果的分配的动态内存select:函数指针，指向过滤模式函数,当selectr指针设置为NULL时，扫描dir目录下的所有顶层文件.该函数有一个参数const struct dirent *是指在遍历过程中所遍历到的每一个子目录dirent，select可以根据dirent的类型、名称等信息来判定当前的dirent是否为合法的子目录，合法则函数返回0，则该子目录的名称会被存储在namelist中；否则返回非0，则该子目录被过滤掉。compar:函数指针，指向对遍历结果进行排序函数，alphasort函数和versionsort是经常用到的函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-2-发送目录（sendDir函数）"><a href="#9-2-发送目录（sendDir函数）" class="headerlink" title="9.2 发送目录（sendDir函数）"></a>9.2 发送目录（sendDir函数）</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 发送目录内容</span><span class="token keyword">int</span> <span class="token function">sendDir</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> dirname<span class="token punctuation">,</span> <span class="token keyword">int</span> cfd<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 拼接一个html页面&lt;table>&lt;/table></span>   <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">4096</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token number">0</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>      <span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token string">"&lt;html>&lt;head>&lt;title>目录名：%s&lt;/title>&lt;/head>&lt;body>&lt;table>"</span><span class="token punctuation">,</span>dirname<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//sprintf(buf + strlen(buf),"&lt;body>&lt;h1>当前目录：%s&lt;/h1>&lt;table>",dirname);</span>    <span class="token comment" spellcheck="true">// 目录项二级指针</span>    <span class="token keyword">struct</span> dirent<span class="token operator">*</span><span class="token operator">*</span> ptr<span class="token punctuation">;</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token function">scandir</span><span class="token punctuation">(</span>dirname<span class="token punctuation">,</span><span class="token operator">&amp;</span>ptr<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>alphasort<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 遍历目录</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 取出文件名 namelist 指向的是一个指针数组 struct dirent* tmp[]</span>        <span class="token keyword">char</span><span class="token operator">*</span> name <span class="token operator">=</span> ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>d_name<span class="token punctuation">;</span>        <span class="token keyword">char</span> subPath<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token number">0</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 拼接文件袋完整路径</span>        <span class="token function">sprintf</span><span class="token punctuation">(</span>subPath<span class="token punctuation">,</span><span class="token string">"%s/%s"</span><span class="token punctuation">,</span>dirname<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">struct</span> stat st<span class="token punctuation">;</span>        <span class="token function">stat</span><span class="token punctuation">(</span>subPath<span class="token punctuation">,</span><span class="token operator">&amp;</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> enstr<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 编码生成 %E5 %A7 之类的东西</span>        <span class="token function">encode_str</span><span class="token punctuation">(</span>enstr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>enstr<span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果是文件</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">S_ISREG</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span>st_mode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                   <span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token operator">+</span><span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span>                     <span class="token string">"&lt;tr>&lt;td>&lt;a href=\"%s\">%s&lt;/a>&lt;/td>&lt;td>%ld&lt;/td>&lt;/tr>"</span><span class="token punctuation">,</span>                    enstr<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>st<span class="token punctuation">.</span>st_size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">S_ISDIR</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span>st_mode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 如果是目录       </span>            <span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token operator">+</span><span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span>                     <span class="token string">"&lt;tr>&lt;td>&lt;a href=\"%s/\">%s/&lt;/a>&lt;/td>&lt;td>%ld&lt;/td>&lt;/tr>"</span><span class="token punctuation">,</span>                    enstr<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>st<span class="token punctuation">.</span>st_size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">send</span><span class="token punctuation">(</span>cfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EAGAIN<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"send error:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EINTR<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"send error:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"send error:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 字符串拼接</span>        <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 字符串拼接</span>    <span class="token comment" spellcheck="true">//memset(buf, 0, sizeof(buf));</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"&lt;/table>&lt;/body>&lt;/html>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">send</span><span class="token punctuation">(</span>cfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"dir message send OK!!!!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token macro property">#<span class="token directive keyword">if</span> 0</span>    <span class="token comment" spellcheck="true">// 打开目录</span>    DIR<span class="token operator">*</span> dir <span class="token operator">=</span> <span class="token function">opendir</span><span class="token punctuation">(</span>dirname<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>dir <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"opendir error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 读目录</span>    <span class="token keyword">struct</span> dirent<span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>ptr <span class="token operator">=</span> <span class="token function">readdir</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token operator">*</span> name <span class="token operator">=</span> ptr<span class="token operator">-></span>d_name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">closedir</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-完整代码"><a href="#10-完整代码" class="headerlink" title="10. 完整代码"></a>10. 完整代码</h3><h4 id="整体框架"><a href="#整体框架" class="headerlink" title="整体框架"></a>整体框架</h4><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20231028135200278.png" alt="image-20231028135200278"></p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*客户端: 浏览器    - 通过浏览器访问服务器:        - 访问方式: 服务器的IP地址:端口    - 应用层协议使用: http, 数据需要在浏览器端使用该协议进行包装    - 响应消息的处理也是浏览器完成的 => 程序猿不需要管    - 客户端通过url访问服务器资源        - 客户端访问的路径:        1. http://192.168.1.100:8989/  或者  http://192.168.1.100:8989            - 访问服务器提供的资源目录的根目录                - 并不是服务器上的 / 目录                  - 这个目录根据服务器端的描述应该是: /home/robin/luffy 目录            - 请求行:                GET / HTTP/1.1        2. http://192.168.1.100:8989/a.txt            - 端口后边的/代表服务器的资源根目录                - 在服务器端路径: /home/robin/luffy 目录            - 客户端要访问服务器上的a.txt的文件            - a.txt 这个文件在服务器提供的资源目录中                - 服务器上的路径: /home/robin/luffy/a.txt            - 请求行:                GET /a.txt HTTP/1.1        3. http://192.168.1.100:8989/hello/a.txt            - http://192.168.1.100:8989: 服务器地址            - /hello/a.txt                - /: 服务器端提供的资源根目录                - hello: 资源根目录的子目录                - a.txt: 在hello目录中            - 请求行:                GET /hello/a.txt HTTP/1.1        4. http://192.168.1.100:8989/hello/wrold/            - http://192.168.1.100:8989: 服务器地址            - /hello/world/                - /: 服务器端提供的资源根目录                - hello: 资源根目录的子目录                - world/: 如果world后边有/代表这是一个目录, 这个目录在hello目录中            - 请求行:                GET /hello/world/ HTTP/1.1*/</span><span class="token comment" spellcheck="true">/*服务器端: 提供服务器, 让客户端访问    - 支持多客户端访问        - 使用IO多路转接 => epoll    - 客户端发送给的请求消息是基于http的        - 需要能够解析http请求    - 服务器回复客户端数据, 使用http协议封装回复的数据 ==> http响应    - 服务器端需要提供一个资源目录, 目录中的文件可以供客户端访问        - 客户端访问的文件没有在资源目录中, 就不能访问了            - 假设服务器提供个资源目录: /home/robin/luffy 目录*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 服务器端处理的伪代码</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1. 创建监听的fd</span>    <span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2. 绑定</span>    <span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 3. 设置监听</span>    <span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4. 创建epoll模型</span>    <span class="token function">epoll_create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">epoll_ctl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 5. 检测</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">epoll_wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 监听的文件描述符</span>        <span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 通信的</span>        <span class="token comment" spellcheck="true">// 接收数据->http请求消息</span>        <span class="token function">recvAndParseHttp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 基于边沿非阻塞模型接收数据</span><span class="token keyword">int</span> <span class="token function">recvAndParseHttp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 循环接收数据</span>    <span class="token comment" spellcheck="true">// 解析http请求消息</span>    <span class="token comment" spellcheck="true">// http请求由两种:get / post</span>    <span class="token comment" spellcheck="true">// 只处理get请求, 浏览器向服务器请求访问的文件都是静态资源, 因此使用get就可以</span>    <span class="token comment" spellcheck="true">// 判断是不是get请求  ==> 在请求行中 ==> 请求行的第一部分</span>    <span class="token comment" spellcheck="true">// 客户端向服务器请求的静态资源是什么? => 请求行的第二部分</span>    <span class="token comment" spellcheck="true">// 找到服务器上的静态资源</span>        <span class="token operator">-</span> 文件 <span class="token operator">-></span> 读文件内容        <span class="token operator">-</span> 目录 <span class="token operator">-></span> 遍历目录    <span class="token comment" spellcheck="true">// 将文件内容或者目录内容打包到http响应协议中</span>    <span class="token comment" spellcheck="true">// 将整条协议发送回给客户端即可</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="epoll-web-c"><a href="#epoll-web-c" class="headerlink" title="epoll_web.c"></a><strong>epoll_web.c</strong></h4><!-- more --><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"epoll_web.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/epoll.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;strings.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;errno.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;assert.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/sendfile.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;dirent.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token comment" spellcheck="true">// 初始化监听套接字</span><span class="token keyword">int</span> <span class="token function">initListenFd</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> port<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1. 创建监听套接字</span>    <span class="token keyword">int</span> lfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span>SOCK_STREAM<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>lfd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"socket error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2. 设置端口复用</span>    <span class="token keyword">int</span> opt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">setsockopt</span><span class="token punctuation">(</span>lfd<span class="token punctuation">,</span>SOL_SOCKET<span class="token punctuation">,</span>SO_REUSEADDR<span class="token punctuation">,</span><span class="token operator">&amp;</span>opt<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"setsockopt error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 3. 绑定</span>    <span class="token keyword">struct</span> sockaddr_in addr<span class="token punctuation">;</span>    addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>    addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>    addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    ret <span class="token operator">=</span> <span class="token function">bind</span><span class="token punctuation">(</span>lfd<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>addr<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"bind error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 4.设置监听</span>    ret <span class="token operator">=</span> <span class="token function">listen</span><span class="token punctuation">(</span>lfd<span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"listen error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 5. 返回fd</span>    <span class="token keyword">return</span> lfd<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//启动epoll</span><span class="token keyword">int</span> <span class="token function">epollrun</span><span class="token punctuation">(</span><span class="token keyword">int</span> lfd<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1. 创建epoll树</span>    <span class="token keyword">int</span> epfd <span class="token operator">=</span> <span class="token function">epoll_create</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>epfd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"epoll_create error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2. lfd上树</span>    <span class="token keyword">struct</span> epoll_event ev<span class="token punctuation">;</span>    ev<span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd <span class="token operator">=</span> lfd<span class="token punctuation">;</span>    ev<span class="token punctuation">.</span>events <span class="token operator">=</span> EPOLLIN<span class="token punctuation">;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">epoll_ctl</span><span class="token punctuation">(</span>epfd<span class="token punctuation">,</span>EPOLL_CTL_ADD<span class="token punctuation">,</span>lfd<span class="token punctuation">,</span><span class="token operator">&amp;</span>ev<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"epoll_ctl error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 3. 检测(委托内核检测添加到树上的节点)</span>    <span class="token keyword">struct</span> epoll_event evs<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>evs<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> epoll_event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token function">epoll_wait</span><span class="token punctuation">(</span>epfd<span class="token punctuation">,</span>evs<span class="token punctuation">,</span>size<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"epoll_wait error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历发生变化的节点</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>evs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>events <span class="token operator">&amp;</span> EPOLLIN<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 不是读事件</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> fd <span class="token operator">=</span> evs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fd <span class="token operator">==</span> lfd<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//建立新连接accept</span>                <span class="token function">accpetClient</span><span class="token punctuation">(</span>lfd<span class="token punctuation">,</span>epfd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 读数据</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"=============before recvHttpRequest=============\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">recvHttpRequest</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>epfd<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"=============after recvHttpRequest=============\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">accpetClient</span><span class="token punctuation">(</span><span class="token keyword">int</span> lfd<span class="token punctuation">,</span><span class="token keyword">int</span> epfd<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1. 建立连接</span>    <span class="token keyword">struct</span> sockaddr_in cliaddr<span class="token punctuation">;</span>    socklen_t len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>cliaddr<span class="token punctuation">)</span><span class="token punctuation">;</span>    cliaddr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>    <span class="token keyword">int</span> cfd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>lfd<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>cliaddr<span class="token punctuation">,</span><span class="token operator">&amp;</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cfd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"accept error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ip<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"new client ip=%s port=%d\n"</span><span class="token punctuation">,</span>    <span class="token function">inet_ntop</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cliaddr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr<span class="token punctuation">,</span>ip<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">ntohs</span><span class="token punctuation">(</span>cliaddr<span class="token punctuation">.</span>sin_port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. 设置cfd为非阻塞</span>    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token function">fcntl</span><span class="token punctuation">(</span>cfd<span class="token punctuation">,</span>F_GETFL<span class="token punctuation">)</span><span class="token punctuation">;</span>    flag <span class="token operator">|</span><span class="token operator">=</span> O_NONBLOCK<span class="token punctuation">;</span>    <span class="token function">fcntl</span><span class="token punctuation">(</span>cfd<span class="token punctuation">,</span>F_SETFL<span class="token punctuation">,</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 3. cfd添加到epoll</span>    <span class="token keyword">struct</span> epoll_event ev<span class="token punctuation">;</span>    ev<span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd <span class="token operator">=</span> cfd<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 边沿非阻塞模式</span>    ev<span class="token punctuation">.</span>events <span class="token operator">=</span> EPOLLIN <span class="token operator">|</span> EPOLLET<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//边沿模式</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">epoll_ctl</span><span class="token punctuation">(</span>epfd<span class="token punctuation">,</span>EPOLL_CTL_ADD<span class="token punctuation">,</span>cfd<span class="token punctuation">,</span><span class="token operator">&amp;</span>ev<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"epoll_ctl error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">recvHttpRequest</span><span class="token punctuation">(</span><span class="token keyword">int</span> cfd<span class="token punctuation">,</span><span class="token keyword">int</span> epfd<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">4096</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token number">0</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> tmp<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token number">0</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1. 接收数据</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> <span class="token function">recv</span><span class="token punctuation">(</span>cfd<span class="token punctuation">,</span>tmp<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>total <span class="token operator">+</span> len <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">memcpy</span><span class="token punctuation">(</span>buf <span class="token operator">+</span> total<span class="token punctuation">,</span>tmp<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        total <span class="token operator">+</span><span class="token operator">=</span> len<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2. 判断数据是否接受完毕</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> errno <span class="token operator">==</span> EAGAIN<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 解析请求行   </span>        <span class="token comment" spellcheck="true">/*        0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19        G E T   / 1 . t x t H  T  T  P  /  1  .  1  /r /n        */</span>        <span class="token keyword">char</span><span class="token operator">*</span> pt <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//大字符串找小字符串</span>        <span class="token keyword">int</span> reqLen <span class="token operator">=</span> pt <span class="token operator">-</span> buf<span class="token punctuation">;</span>        buf<span class="token punctuation">[</span>reqLen<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>        <span class="token function">parseRequestLine</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span>cfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 客户端断开连接</span>        <span class="token function">epoll_ctl</span><span class="token punctuation">(</span>epfd<span class="token punctuation">,</span>EPOLL_CTL_DEL<span class="token punctuation">,</span>cfd<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>cfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"recv error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">parseRequestLine</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> line<span class="token punctuation">,</span><span class="token keyword">int</span> cfd<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1. 拆分http请求行   get /xxx/1.jpg http/1.1</span>    <span class="token keyword">char</span> method<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 方法</span>    <span class="token keyword">char</span> path<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 路径</span>    <span class="token keyword">char</span> protocol<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 协议</span>    <span class="token function">sscanf</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span><span class="token string">"%[^ ] %[^ ] %[^ ]"</span><span class="token punctuation">,</span>method<span class="token punctuation">,</span>path<span class="token punctuation">,</span>protocol<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"method = %s, path = %s, protocol = %s\n"</span><span class="token punctuation">,</span> method<span class="token punctuation">,</span> path<span class="token punctuation">,</span> protocol<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断是否是get请求</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcasecmp</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span><span class="token string">"get"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//不区分大小写</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 转码 将不能识别的中文乱码 -> 中文</span>    <span class="token comment" spellcheck="true">// 解码 %23 %34 %5f</span>    <span class="token function">decode_str</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2. 处理客户端请求的静态资源</span>    <span class="token keyword">char</span><span class="token operator">*</span> file <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果没有指定访问的资源, 默认显示资源目录中的内容</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// file的值, 资源目录的当前位置</span>        file <span class="token operator">=</span> <span class="token string">"./"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 去掉path中的/ 获取访问文件名</span>        file <span class="token operator">=</span> path <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3. 获取文件属性</span>    <span class="token keyword">struct</span> stat st<span class="token punctuation">;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">stat</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span><span class="token operator">&amp;</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 文件不存在--回复404</span>        <span class="token function">sendHeadMsg</span><span class="token punctuation">(</span>cfd<span class="token punctuation">,</span><span class="token number">404</span><span class="token punctuation">,</span><span class="token string">"Not Found"</span><span class="token punctuation">,</span><span class="token function">get_file_type</span><span class="token punctuation">(</span><span class="token string">".html"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sendFile</span><span class="token punctuation">(</span><span class="token string">"404.html"</span><span class="token punctuation">,</span>cfd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断文件类型（判断是目录还是文件）</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">S_ISDIR</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span>st_mode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 目录</span>        <span class="token comment" spellcheck="true">// 把目录发给客户端</span>         <span class="token function">sendHeadMsg</span><span class="token punctuation">(</span>cfd<span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"OK"</span><span class="token punctuation">,</span><span class="token function">get_file_type</span><span class="token punctuation">(</span><span class="token string">".html"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">sendDir</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span>cfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 把文件内容发给客户端</span>        <span class="token function">sendHeadMsg</span><span class="token punctuation">(</span>cfd<span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"OK"</span><span class="token punctuation">,</span><span class="token function">get_file_type</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">,</span>st<span class="token punctuation">.</span>st_size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sendFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span>cfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">sendHeadMsg</span><span class="token punctuation">(</span><span class="token keyword">int</span> cfd<span class="token punctuation">,</span><span class="token keyword">int</span> status<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> desrc<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> type<span class="token punctuation">,</span><span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 状态行</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">4096</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token number">0</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token string">"http/1.1 %d %s \r\n"</span><span class="token punctuation">,</span>status<span class="token punctuation">,</span>desrc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 消息报头</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>buf <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"Content-Type: %s\r\n"</span><span class="token punctuation">,</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>buf <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"Content-Length: %d\r\n"</span><span class="token punctuation">,</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">send</span><span class="token punctuation">(</span>cfd<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 空行</span>    <span class="token function">send</span><span class="token punctuation">(</span>cfd<span class="token punctuation">,</span> <span class="token string">"\r\n"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">sendFile</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> filename<span class="token punctuation">,</span><span class="token keyword">int</span> cfd<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1. 打开文件</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span>O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>fd <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 断言</span>    <span class="token comment" spellcheck="true">// if(fd == -1)&amp;#123;</span>    <span class="token comment" spellcheck="true">//     perror("open error");</span>    <span class="token comment" spellcheck="true">// &amp;#125;</span>    <span class="token comment" spellcheck="true">// 2. 循环读文件</span><span class="token macro property">#<span class="token directive keyword">if</span> 1</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">4096</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token number">0</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 发送读出的数据</span>        ret <span class="token operator">=</span> <span class="token function">send</span><span class="token punctuation">(</span>cfd<span class="token punctuation">,</span>buf<span class="token punctuation">,</span>len<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>errno <span class="token operator">=</span> EAGAIN<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"send error:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EINTR<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"send error:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"send error:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">else</span></span>    off_t offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token function">lseek</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>SEEK_END<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">lseek</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>SEEK_SET<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>offset <span class="token operator">&lt;</span> size<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">sendfile</span><span class="token punctuation">(</span>cfd<span class="token punctuation">,</span>fd<span class="token punctuation">,</span><span class="token operator">&amp;</span>offset<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ret value: %d\n"</span><span class="token punctuation">,</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> errno <span class="token operator">==</span> EAGAIN<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"没数据。。。\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"snedfile"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 发送目录内容</span><span class="token keyword">int</span> <span class="token function">sendDir</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> dirname<span class="token punctuation">,</span> <span class="token keyword">int</span> cfd<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 拼接一个html页面&lt;table>&lt;/table></span>   <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">4096</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token number">0</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>      <span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token string">"&lt;html>&lt;head>&lt;title>目录名：%s&lt;/title>&lt;/head>&lt;body>&lt;table>"</span><span class="token punctuation">,</span>dirname<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//sprintf(buf + strlen(buf),"&lt;body>&lt;h1>当前目录：%s&lt;/h1>&lt;table>",dirname);</span>    <span class="token comment" spellcheck="true">// 目录项二级指针</span>    <span class="token keyword">struct</span> dirent<span class="token operator">*</span><span class="token operator">*</span> ptr<span class="token punctuation">;</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token function">scandir</span><span class="token punctuation">(</span>dirname<span class="token punctuation">,</span><span class="token operator">&amp;</span>ptr<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>alphasort<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 遍历目录</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 取出文件名 namelist 指向的是一个指针数组 struct dirent* tmp[]</span>        <span class="token keyword">char</span><span class="token operator">*</span> name <span class="token operator">=</span> ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>d_name<span class="token punctuation">;</span>        <span class="token keyword">char</span> subPath<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token number">0</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 拼接文件袋完整路径</span>        <span class="token function">sprintf</span><span class="token punctuation">(</span>subPath<span class="token punctuation">,</span><span class="token string">"%s/%s"</span><span class="token punctuation">,</span>dirname<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">struct</span> stat st<span class="token punctuation">;</span>        <span class="token function">stat</span><span class="token punctuation">(</span>subPath<span class="token punctuation">,</span><span class="token operator">&amp;</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> enstr<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 编码生成 %E5 %A7 之类的东西</span>        <span class="token function">encode_str</span><span class="token punctuation">(</span>enstr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>enstr<span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果是文件</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">S_ISREG</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span>st_mode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                   <span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token operator">+</span><span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span>                     <span class="token string">"&lt;tr>&lt;td>&lt;a href=\"%s\">%s&lt;/a>&lt;/td>&lt;td>%ld&lt;/td>&lt;/tr>"</span><span class="token punctuation">,</span>                    enstr<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>st<span class="token punctuation">.</span>st_size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">S_ISDIR</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span>st_mode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 如果是目录       </span>            <span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token operator">+</span><span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span>                     <span class="token string">"&lt;tr>&lt;td>&lt;a href=\"%s/\">%s/&lt;/a>&lt;/td>&lt;td>%ld&lt;/td>&lt;/tr>"</span><span class="token punctuation">,</span>                    enstr<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>st<span class="token punctuation">.</span>st_size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">send</span><span class="token punctuation">(</span>cfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EAGAIN<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"send error:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EINTR<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"send error:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"send error:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 字符串拼接</span>        <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 字符串拼接</span>    <span class="token comment" spellcheck="true">//memset(buf, 0, sizeof(buf));</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"&lt;/table>&lt;/body>&lt;/html>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">send</span><span class="token punctuation">(</span>cfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"dir message send OK!!!!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token macro property">#<span class="token directive keyword">if</span> 0</span>    <span class="token comment" spellcheck="true">// 打开目录</span>    DIR<span class="token operator">*</span> dir <span class="token operator">=</span> <span class="token function">opendir</span><span class="token punctuation">(</span>dirname<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>dir <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"opendir error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 读目录</span>    <span class="token keyword">struct</span> dirent<span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>ptr <span class="token operator">=</span> <span class="token function">readdir</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token operator">*</span> name <span class="token operator">=</span> ptr<span class="token operator">-></span>d_name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">closedir</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* *  这里的内容是处理%20之类的东西！是"解码"过程。 *  %20 URL编码中的‘ ’(space) *  %21 '!' %22 '"' %23 '#' %24 '$' *  %25 '%' %26 '&amp;' %27 ''' %28 '('...... *  相关知识html中的‘ ’(space)是&amp;nbsp */</span><span class="token comment" spellcheck="true">// 16进制数转化为10进制</span><span class="token keyword">int</span> <span class="token function">hexit</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> c <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">>=</span> <span class="token string">'a'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token string">'f'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> c <span class="token operator">-</span> <span class="token string">'a'</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">>=</span> <span class="token string">'A'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token string">'F'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> c <span class="token operator">-</span> <span class="token string">'A'</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">encode_str</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> to<span class="token punctuation">,</span> <span class="token keyword">int</span> tosize<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> from<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> tolen<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>tolen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">*</span>from <span class="token operator">!=</span> <span class="token string">'\0'</span> <span class="token operator">&amp;&amp;</span> tolen <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">&lt;</span> tosize<span class="token punctuation">;</span> <span class="token operator">++</span>from<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isalnum</span><span class="token punctuation">(</span><span class="token operator">*</span>from<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">strchr</span><span class="token punctuation">(</span><span class="token string">"/_.-~"</span><span class="token punctuation">,</span> <span class="token operator">*</span>from<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                  <span class="token operator">*</span>to <span class="token operator">=</span> <span class="token operator">*</span>from<span class="token punctuation">;</span>            <span class="token operator">++</span>to<span class="token punctuation">;</span>            <span class="token operator">++</span>tolen<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">sprintf</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token string">"%%%02x"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>from <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            to <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            tolen <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">*</span>to <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">decode_str</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>to<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>from<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span> <span class="token operator">*</span>from <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span> <span class="token operator">++</span>to<span class="token punctuation">,</span> <span class="token operator">++</span>from  <span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>from<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'%'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isxdigit</span><span class="token punctuation">(</span>from<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isxdigit</span><span class="token punctuation">(</span>from<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                   <span class="token operator">*</span>to <span class="token operator">=</span> <span class="token function">hexit</span><span class="token punctuation">(</span>from<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">16</span> <span class="token operator">+</span> <span class="token function">hexit</span><span class="token punctuation">(</span>from<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            from <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>                              <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token operator">*</span>to <span class="token operator">=</span> <span class="token operator">*</span>from<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">*</span>to <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 通过文件名获取文件的类型</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">get_file_type</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> dot<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 自右向左查找‘.’字符, 如不存在返回NULL</span>    dot <span class="token operator">=</span> <span class="token function">strrchr</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>dot <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"text/plain; charset=utf-8"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>dot<span class="token punctuation">,</span> <span class="token string">".html"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>dot<span class="token punctuation">,</span> <span class="token string">".htm"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"text/html; charset=utf-8"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>dot<span class="token punctuation">,</span> <span class="token string">".jpg"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>dot<span class="token punctuation">,</span> <span class="token string">".jpeg"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"image/jpeg"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>dot<span class="token punctuation">,</span> <span class="token string">".gif"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"image/gif"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>dot<span class="token punctuation">,</span> <span class="token string">".png"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"image/png"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>dot<span class="token punctuation">,</span> <span class="token string">".css"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"text/css"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>dot<span class="token punctuation">,</span> <span class="token string">".au"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"audio/basic"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span> dot<span class="token punctuation">,</span> <span class="token string">".wav"</span> <span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"audio/wav"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>dot<span class="token punctuation">,</span> <span class="token string">".avi"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"video/x-msvideo"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>dot<span class="token punctuation">,</span> <span class="token string">".mov"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>dot<span class="token punctuation">,</span> <span class="token string">".qt"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"video/quicktime"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>dot<span class="token punctuation">,</span> <span class="token string">".mpeg"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>dot<span class="token punctuation">,</span> <span class="token string">".mpe"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"video/mpeg"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>dot<span class="token punctuation">,</span> <span class="token string">".vrml"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>dot<span class="token punctuation">,</span> <span class="token string">".wrl"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"model/vrml"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>dot<span class="token punctuation">,</span> <span class="token string">".midi"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>dot<span class="token punctuation">,</span> <span class="token string">".mid"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"audio/midi"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>dot<span class="token punctuation">,</span> <span class="token string">".mp3"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"audio/mpeg"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>dot<span class="token punctuation">,</span> <span class="token string">".ogg"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"application/ogg"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>dot<span class="token punctuation">,</span> <span class="token string">".pac"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"application/x-ns-proxy-autoconfig"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"text/plain; charset=utf-8"</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="epoll-web-h"><a href="#epoll-web-h" class="headerlink" title="epoll_web.h"></a><strong>epoll_web.h</strong></h4><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> _EPOLL_SEVER_H</span><span class="token macro property">#<span class="token directive keyword">define</span> _EPOLL_SEVER_H</span><span class="token comment" spellcheck="true">// 初始化监听的套接字</span><span class="token keyword">int</span> <span class="token function">initListenFd</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//启动epoll</span><span class="token keyword">int</span> <span class="token function">epollrun</span><span class="token punctuation">(</span><span class="token keyword">int</span> lfd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 建立新连接</span><span class="token keyword">int</span> <span class="token function">accpetClient</span><span class="token punctuation">(</span><span class="token keyword">int</span> lfd<span class="token punctuation">,</span><span class="token keyword">int</span> epfd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 读数据</span><span class="token keyword">int</span> <span class="token function">recvHttpRequest</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span><span class="token keyword">int</span> epfd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 解析请求行</span><span class="token keyword">int</span> <span class="token function">parseRequestLine</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> line<span class="token punctuation">,</span><span class="token keyword">int</span> cfd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 发送响应头（状态行+响应头）</span><span class="token keyword">int</span> <span class="token function">sendHeadMsg</span><span class="token punctuation">(</span><span class="token keyword">int</span> cfd<span class="token punctuation">,</span><span class="token keyword">int</span> status<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> desrc<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> type<span class="token punctuation">,</span><span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 发送文件</span><span class="token keyword">int</span> <span class="token function">sendFile</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> filename<span class="token punctuation">,</span><span class="token keyword">int</span> cfd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 发送目录</span><span class="token keyword">int</span> <span class="token function">sendDir</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> dirName<span class="token punctuation">,</span><span class="token keyword">int</span> cfd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 通过文件名获取文件的类型</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">get_file_type</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">hexit</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">encode_str</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> to<span class="token punctuation">,</span> <span class="token keyword">int</span> tosize<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> from<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">decode_str</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>to<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"epoll_web.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"./a.out port path\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 采用指定端口</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 修改进程工作目录，方便后续操作</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">chdir</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"chdir error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化监听套接字</span>    <span class="token keyword">int</span> lfd <span class="token operator">=</span> <span class="token function">initListenFd</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 启动epoll模型</span>    <span class="token function">epollrun</span><span class="token punctuation">(</span>lfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> c </tag>
            
            <tag> 网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Qt开发工作上的需求</title>
      <link href="/2023/10/26/%E4%BD%BF%E7%94%A8Qt%E5%BC%80%E5%8F%91%E5%B7%A5%E4%BD%9C%E4%B8%8A%E7%9A%84%E9%9C%80%E6%B1%82/"/>
      <url>/2023/10/26/%E4%BD%BF%E7%94%A8Qt%E5%BC%80%E5%8F%91%E5%B7%A5%E4%BD%9C%E4%B8%8A%E7%9A%84%E9%9C%80%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<p>记录最近工作设及到一些关于qt编程的相关内容</p><span id="more"></span><h3 id="功能1：鼠标点击图片显示坐标和像素"><a href="#功能1：鼠标点击图片显示坐标和像素" class="headerlink" title="功能1：鼠标点击图片显示坐标和像素"></a>功能1：鼠标点击图片显示坐标和像素</h3><p>最近工作设及到一些关于qt编程的工作，主要内容就是在一个<code>QGraphicsView</code>上显示了一个<code>QGraphicsPixmapItem</code>的相机监控的图片，并用鼠标点击图片显示坐标和像素。</p><p>最初在网上找到的解决方案是重写<code>mousePressEvent()</code>方法</p><pre class="line-numbers language-c++"><code class="language-c++">void ImgHelper::mousePressEvent(QGraphicsSceneMouseEvent* event)&#123;    std::cout << "Item: (" << event->scenePos().x() << ", " << event->scenePos().y() << ')' << std::endl; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>测试发现未响应鼠标事件，网上找到说：重写鼠标点击事件函数时发现鼠标点击事件在子类化后的<code>QGraphicsScene</code>中被响应，但是子类化后的<code>QGraphicsPixmapItem</code>无法响应。<code>QGraphicsView</code>的事件传递机制的顺序是<code>View-&gt;Scene-&gt;Item</code>，也就是说事件被子类化的<code>QGraphicsScene</code>吞没了，没有传递到下一级的<code>item</code>。<br>解决方案，在子类化的<code>QGraphicsScene</code>中重写<code>mousePressEvent()</code>方法内部一定要要记得调用：</p><pre class="line-numbers language-c++"><code class="language-c++">QGraphicsScene::mousePressEvent(event);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意，要想返回图像坐标系的位置，就需要在子类化的<code>QGraphicsPixmapItem</code>中调用<code>scenePos()</code>函数。即使放大图像，点击图像中相同位置也会返回相同坐标结果。</p><p>结果发现还是没有反应，还有一种说法就是加上下面这句话</p><pre class="line-numbers language-c++"><code class="language-c++">//使能QGraphcisView控件的鼠标跟踪view->setMouseTracking(true);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最后尝试把<code>mousePressEvent</code>函数在最上层的<code>mainwindow</code>中重写并使能鼠标，有效果，但是坐标并不是我想要的效果，现在的坐标系是整个界面的，我想要的是图像的坐标，然后能通过图像控件的位置和长宽进行筛选，但是获得的图像是经过qt自适应缩放在<code>600X600</code>的容器里的。</p><p>在一筹莫展的时候，突然看到<code>eventFilter</code>事件过滤器。</p><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/20210320141253167.png" alt="在这里插入图片描述"></p><p>原本事件应该直接发送给“组件对象”，但是现在却先将事件发送给“过滤器对象”，经过过滤的事件再发给“组件对象”。</p><p><strong>事件过滤器的操作：</strong></p><ol><li>首先给需要添加事件过滤器的部件<strong>注册监听对象</strong>；<br><code>对象名-&gt;installEventFilter(true);</code></li><li>重写<code>eventFilter(QObject *obj, QEvent *event)</code>函数进行处理。<!-- more -->首先使用参数<code>obj</code>进行与绑定的控件对象进行判断，是否与其相等；然后在使用参数<code>event-&gt;type()</code>的返回值与枚举鼠标或者键盘进行判断；最后将<code>event</code>转换为鼠标事件对象或者键盘对象事件，就可以进行操作了。</li></ol><pre class="line-numbers language-c++"><code class="language-c++">bool ImgHelper::eventFilter(QObject *watched, QEvent *event)&#123;    //判断信号是不是来自QGraphicsView    if(watched == view->viewport())&#123;        switch (event->type()) &#123;        //鼠标移动事件        case  QEvent::MouseMove:        &#123;            QMouseEvent *m_event = (QMouseEvent*)event;            if(pixmapItem == NULL)&#123;                break;            &#125;           // QPoint point = m_event->pos();            QPixmap pix= pixmapItem->pixmap();            QImage img = pix.toImage();          //  QSize size = pixmapItem->pixmap().size();            QPoint point = m_event->pos();           // qDebug()<<"point:"<<point<<endl;            // 坐标系转换 - 视图 -> 场景            QPointF scenePoint = view->mapToScene(point);            //qDebug()<<"scenePoint:"<<scenePoint<<endl;            // 坐标系转换 - 场景 -> 图元            QPointF itempoint = pixmapItem->mapFromScene(scenePoint);           // qDebug()<<"itempoint:"<<itempoint<<endl;            QString str;            // 判断所选点是否在图像范围内            if(itempoint.x()>=0 &&itempoint.x()<=pix.width() && itempoint.y()>=0 && itempoint.y()<= pix.height())&#123;                QRgb pixColor = img.pixel(itempoint.x(),itempoint.y());               // qDebug()<<pixColor<<" "<<qRed(pixColor)<<" "<<qGreen(pixColor)<<" "<<qBlue(pixColor)<<endl;                str = QString("X:%1\nY:%2\nR:%3\nG:%4\nB:%5\n").arg(QString::number(itempoint.x(),'f',1))                                                                .arg(QString::number(itempoint.y(),'f',1))                                                                .arg(qRed(pixColor))                                                                .arg(qGreen(pixColor))                                                                .arg(qBlue(pixColor)).toLocal8Bit();            &#125;            else&#123;                str = "";            &#125;            img_xy_pix->setText(str);            img_xy_pix->setStyleSheet("color:red;");            break;        &#125;        // 鼠标点击事件        case QEvent::MouseButtonPress:        &#123;            if(pixmapItem == NULL)&#123;                break;            &#125;            QMouseEvent *m_event = (QMouseEvent*)event;            // 左键点击确定起点            if(m_event->button() == Qt::LeftButton )&#123;             //   QPixmap pix= pixmapItem->pixmap();                QPainter painter(view->viewport());                painter.setPen(QPen(Qt::blue,1));              //  QImage img = pix.toImage();              //  QSize size = pixmapItem->pixmap().size();               // qDebug()<<"size:"<<size<<endl;                QPoint point = m_event->pos();               // qDebug()<<"point:"<<point<<endl;                QPointF scenePoint = view->mapToScene(point);                //qDebug()<<"scenePoint:"<<scenePoint<<endl;                QPointF itempoint = pixmapItem->mapFromScene(scenePoint);                startPoint = itempoint;                break;            &#125;            break;        &#125;        // 送开鼠标，确定终点        case QEvent::MouseButtonRelease:        &#123;            if(pixmapItem == NULL)&#123;                break;            &#125;            QMouseEvent *m_event = (QMouseEvent*)event;            if(m_event->button() == Qt::LeftButton )&#123;//                QPixmap pix= pixmapItem->pixmap();                QPainter painter(view->viewport());                painter.setPen(QPen(Qt::blue,1));              //  QImage img = pix.toImage();              //  QSize size = pixmapItem->pixmap().size();               // qDebug()<<"size:"<<size<<endl;                QPoint point = m_event->pos();               // qDebug()<<"point:"<<point<<endl;                QPointF scenePoint = view->mapToScene(point);                //qDebug()<<"scenePoint:"<<scenePoint<<endl;                QPointF itempoint = pixmapItem->mapFromScene(scenePoint);                QPointF endPoint = itempoint;                if(startPoint.x() != 0 && startPoint.y() != 0)&#123;                    QRectF rectangle(startPoint.x(),startPoint.y(),endPoint.x()-startPoint.x(),endPoint.y()-startPoint.y());                    painter.drawRect(rectangle);                    painter.setPen(QPen(Qt::red,1));                    rects = scene->addRect(rectangle,rectPen);//                    float rectInfo[8];//                    rectcounts++;//                    rectInfo[0] = rectcounts;//                    float x = (endPoint.x()-startPoint.x()) / 2 + startPoint.x();//                    float y = (endPoint.y()-startPoint.y()) / 2 + startPoint.y();//                    float height;//                    float width;//                    if(endPoint.x()-startPoint.x() > endPoint.y()-startPoint.y())&#123;//                       height = endPoint.x()-startPoint.x();//                       width = endPoint.y()-startPoint.y();//                    &#125;else&#123;//                        width = endPoint.x()-startPoint.x();//                        height = endPoint.y()-startPoint.y();//                    &#125;                 //   rectInfo[1] = x;                 //   rectInfo[2] = y;                 //   rectInfo[3] = height;                 //      rectInfo[4] = width;                  //  float angle = -90;                 //   rectInfo[5] = angle;//                    CassUdpHelper* udpClient = new CassUdpHelper(localPort, this);                    //                     bool flag = false;  //                    int rectCountsAddr = 353345520;//                    flag = udpClient->writeBytesByModbus(rectCountsAddr, (char*)&rectcounts, sizeof(short), hostIpAddr, hostPort);//                    if(!flag) &#123;//                        delete udpClient;//                         break;//                    &#125;//                    int startAddr = 427778712;//                    flag = udpClient->writeBytesByModbus(startAddr + sizeof(float)*8 *(rectcounts - 1), (char*)rectInfo, sizeof(float)*8, hostIpAddr, hostPort);//                    if(!flag) &#123;//                        delete udpClient;//                         break;//                    &#125;//                    delete udpClient;                                    &#125;                break;            &#125;            break;        &#125;        default:            break;        &#125;    &#125;    return false;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="功能2：Qt拖动鼠标画一个矩形"><a href="#功能2：Qt拖动鼠标画一个矩形" class="headerlink" title="功能2：Qt拖动鼠标画一个矩形"></a>功能2：Qt拖动鼠标画一个矩形</h3><p>想要画一个矩形就需要过滤鼠标点击事件，鼠标按下时确定矩形的起点，然后拖动一段距离，松开确定终点。</p><!-- more --><pre class="line-numbers language-c++"><code class="language-c++">// 鼠标点击事件        case QEvent::MouseButtonPress:        &#123;            if(pixmapItem == NULL)&#123;                break;            &#125;            QMouseEvent *m_event = (QMouseEvent*)event;            // 左键点击确定起点            if(m_event->button() == Qt::LeftButton )&#123;             //   QPixmap pix= pixmapItem->pixmap();                QPainter painter(view->viewport());                painter.setPen(QPen(Qt::blue,1));              //  QImage img = pix.toImage();              //  QSize size = pixmapItem->pixmap().size();               // qDebug()<<"size:"<<size<<endl;                QPoint point = m_event->pos();               // qDebug()<<"point:"<<point<<endl;                QPointF scenePoint = view->mapToScene(point);                //qDebug()<<"scenePoint:"<<scenePoint<<endl;                QPointF itempoint = pixmapItem->mapFromScene(scenePoint);                startPoint = itempoint;                break;            &#125;            break;        &#125;        // 送开鼠标，确定终点        case QEvent::MouseButtonRelease:        &#123;            if(pixmapItem == NULL)&#123;                break;            &#125;            QMouseEvent *m_event = (QMouseEvent*)event;            if(m_event->button() == Qt::LeftButton )&#123;//                QPixmap pix= pixmapItem->pixmap();                QPainter painter(view->viewport());                painter.setPen(QPen(Qt::blue,1));              //  QImage img = pix.toImage();              //  QSize size = pixmapItem->pixmap().size();               // qDebug()<<"size:"<<size<<endl;                QPoint point = m_event->pos();               // qDebug()<<"point:"<<point<<endl;                QPointF scenePoint = view->mapToScene(point);                //qDebug()<<"scenePoint:"<<scenePoint<<endl;                QPointF itempoint = pixmapItem->mapFromScene(scenePoint);                QPointF endPoint = itempoint;                if(startPoint.x() != 0 && startPoint.y() != 0)&#123;                    QRectF rectangle(startPoint.x(),startPoint.y(),endPoint.x()-startPoint.x(),endPoint.y()-startPoint.y());                    painter.drawRect(rectangle);                    painter.setPen(QPen(Qt::red,1));                    rects = scene->addRect(rectangle,rectPen);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是在网上看到其他人重写的一个<code>QGraphicsRectItem</code>类，画出来的矩形可以拖动，变形，旋转，使用时只需要导入这个类</p><ul><li><p>mygraphicrectitem.h</p><!-- more --><pre class="line-numbers language-c++"><code class="language-c++">#ifndef MYGRAPHICRECTITEM_H#define MYGRAPHICRECTITEM_H#include <QObject>#include <QWidget>#include <QMouseEvent>#include <QGraphicsScene>#include <QGraphicsRectItem>#include <QGraphicsSceneMouseEvent>#include <QRect>#include <QPainter>#include <QPolygon>#include <QList>enum STATE_FLAG&#123;    DEFAULT_FLAG=0,    MOV_LEFT_LINE,//标记当前为用户按下矩形的左边界区域    MOV_TOP_LINE,//标记当前为用户按下矩形的上边界区域    MOV_RIGHT_LINE,//标记当前为用户按下矩形的右边界区域    MOV_BOTTOM_LINE,//标记当前为用户按下矩形的下边界区域    MOV_RIGHTBOTTOM_RECT,//标记当前为用户按下矩形的右下角    MOV_RECT,//标记当前为鼠标拖动图片移动状态    ROTATE//标记当前为旋转状态&#125;;class myGraphicRectItem:public QObject,public QGraphicsItem&#123;    Q_OBJECTpublic:    myGraphicRectItem(QGraphicsItem *parent = nullptr);    //myGraphicRectItem(QRectF m_OriginRect = QRectF(0,0,100,100));    QRectF  boundingRect() const;    ~myGraphicRectItem();    void setRectSize(QRectF mrect,bool bResetRotateCenter = true);    void paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget);    void mousePressEvent(QGraphicsSceneMouseEvent *event);    void mouseMoveEvent(QGraphicsSceneMouseEvent *event);    void mouseReleaseEvent(QGraphicsSceneMouseEvent *event);    void SetRotate(qreal RotateAngle,QPointF ptCenter=QPointF(-999,-999));    QPointF getRotatePoint(QPointF ptCenter, QPointF ptIn, qreal angle);//获取旋转后的点    QList<QPointF> getRotatePoints(QPointF ptCenter,QList<QPointF> ptIns,qreal angle);//获取多个旋转后的点    QPolygonF getRotatePolygonFromRect(QPointF ptCenter,QRectF rectIn,qreal angle);//将矩形旋转之后返回多边形    QRectF getCrtPosRectToSceen();    QRectF m_SmallRotateRect;//矩形顶部用来表示旋转的标记的矩形    QPolygonF m_SmallRotatePolygon;//矩形顶部用来表示旋转的标记的矩形旋转后形成的多边形    QPointF getSmallRotateRectCenter(QPointF ptA,QPointF ptB);//获取旋转时候矩形正上方的旋转标记矩形    QRectF  getSmallRotateRect(QPointF ptA,QPointF ptB);    bool    m_bRotate;    qreal   m_RotateAngle;    QPointF m_RotateCenter;private:    QRectF  m_oldRect;    QPolygonF m_oldRectPolygon;    QRectF  m_RotateAreaRect;    bool    m_bResize;    QPolygonF m_insicedPolygon;    QRectF  m_insicedRectf;    QPolygonF m_leftPolygon;    QRectF  m_leftRectf;    QPolygonF m_topPolygon;    QRectF  m_topRectf;    QPolygonF m_rightPolygon;    QRectF  m_rightRectf;    QPolygonF m_bottomPolygon;    QRectF  m_bottomRectf;//    QPolygonF m_rbPolygon;//    QRectF  m_rbRectf;    QPointF m_startPos;    STATE_FLAG m_StateFlag;    QPointF *pPointFofSmallRotateRect;protected:&#125;;#endif // MYGRAPHICRECTITEM_H<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>mygraphicrectitem.cpp</p><!-- more --><pre class="line-numbers language-c++"><code class="language-c++">#include "mygraphicrectitem.h"#include <QtMath>#include <QDebug>myGraphicRectItem::myGraphicRectItem(QGraphicsItem *parent):    m_bResize(false),    m_oldRect(0,0,100,100),    m_bRotate(false),    m_RotateAngle(0),    m_StateFlag(DEFAULT_FLAG)&#123;    //setParent(parent);    setRectSize(m_oldRect);    setToolTip("Click and drag me!");  //提示    setCursor(Qt::ArrowCursor);   //改变光标形状,手的形状    setFlag(QGraphicsItem::ItemIsMovable);    //    setAcceptDrops(true);    pPointFofSmallRotateRect = new QPointF[4];    SetRotate(0);    setFlag(QGraphicsItem::ItemIsSelectable);//&#125;QRectF myGraphicRectItem::boundingRect() const&#123;    //return m_oldRectPolygon.boundingRect();    QRectF boundingRectF = m_oldRectPolygon.boundingRect();    return QRectF(boundingRectF.x()-40,boundingRectF.y()-40,boundingRectF.width()+80,boundingRectF.height()+80);&#125;myGraphicRectItem::~myGraphicRectItem()&#123;    delete []pPointFofSmallRotateRect;    pPointFofSmallRotateRect = nullptr;&#125;void myGraphicRectItem::setRectSize(QRectF mrect, bool bResetRotateCenter)&#123;    m_oldRect = mrect;    if(bResetRotateCenter)    &#123;        m_RotateCenter.setX(m_oldRect.x()+m_oldRect.width()/2);        m_RotateCenter.setY(m_oldRect.y()+m_oldRect.height()/2);    &#125;    m_oldRectPolygon = getRotatePolygonFromRect(m_RotateCenter,m_oldRect,m_RotateAngle);    m_insicedRectf = QRectF(m_oldRect.x()+8,m_oldRect.y()+8,m_oldRect.width()-16,m_oldRect.height()-16);    m_insicedPolygon =getRotatePolygonFromRect(m_RotateCenter,m_insicedRectf,m_RotateAngle);    m_leftRectf = QRectF(m_oldRect.x(),m_oldRect.y(),8,m_oldRect.height()-8);    m_leftPolygon = getRotatePolygonFromRect(m_RotateCenter,m_leftRectf,m_RotateAngle);    m_topRectf = QRectF(m_oldRect.x()+8,m_oldRect.y(),m_oldRect.width()-8,8);    m_topPolygon = getRotatePolygonFromRect(m_RotateCenter,m_topRectf,m_RotateAngle);    m_rightRectf = QRectF(m_oldRect.right()-8,m_oldRect.y()+8,8,m_oldRect.height()-16);    m_rightPolygon = getRotatePolygonFromRect(m_RotateCenter,m_rightRectf,m_RotateAngle);    m_bottomRectf = QRectF(m_oldRect.x(),m_oldRect.bottom()-8,m_oldRect.width()-8,8);    m_bottomPolygon = getRotatePolygonFromRect(m_RotateCenter,m_bottomRectf,m_RotateAngle);//    m_rbRectf = QRectF(m_oldRect.right()-8,m_oldRect.bottom()-8,8,8);//    m_rbPolygon = getRotatePolygonFromRect(m_RotateCenter,m_rbRectf,m_RotateAngle);    m_SmallRotateRect = getSmallRotateRect(mrect.topLeft(),mrect.topRight());//矩形正上方的旋转标记矩形    m_SmallRotatePolygon = getRotatePolygonFromRect(m_RotateCenter,m_SmallRotateRect,m_RotateAngle);&#125;void myGraphicRectItem::paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget)&#123;    QPen mPen = QPen(Qt::yellow);    painter->setPen(mPen);    //绘制旋转后的矩形    painter->drawPolygon(m_oldRectPolygon);    //绘制旋转圆形    mPen.setWidth(2);    mPen.setColor(Qt::green);    painter->setPen(mPen);    QPointF pf = getSmallRotateRectCenter(m_oldRectPolygon[0],m_oldRectPolygon[1]);    QRectF rect = QRectF(pf.x()-10,pf.y()-10,20,20);    painter->drawEllipse(rect);//绘制圆形    painter->drawPoint(pf);//绘制点&#125;void myGraphicRectItem::mousePressEvent(QGraphicsSceneMouseEvent *event)&#123;    if(event->button()== Qt::LeftButton)    &#123;        m_startPos = event->pos();//鼠标左击时，获取当前鼠标在图片中的坐标，        if(m_SmallRotatePolygon.containsPoint(m_startPos,Qt::WindingFill))//旋转矩形        &#123;            setCursor(Qt::PointingHandCursor);            m_StateFlag = ROTATE;        &#125;        else if(m_insicedPolygon.containsPoint(m_startPos,Qt::WindingFill))//在矩形内框区域时按下鼠标，则可拖动图片        &#123;            setCursor(Qt::ClosedHandCursor);   //改变光标形状,手的形状            m_StateFlag = MOV_RECT;//标记当前为鼠标拖动图片移动状态        &#125;        else if(m_leftPolygon.containsPoint(m_startPos,Qt::WindingFill))        &#123;            setCursor(Qt::SizeHorCursor);            m_StateFlag = MOV_LEFT_LINE;//标记当前为用户按下矩形的左边界区域        &#125;        else if(m_rightPolygon.containsPoint(m_startPos,Qt::WindingFill))        &#123;            setCursor(Qt::SizeHorCursor);            m_StateFlag = MOV_RIGHT_LINE;//标记当前为用户按下矩形的右边界区域        &#125;        else if(m_topPolygon.containsPoint(m_startPos,Qt::WindingFill))        &#123;            setCursor(Qt::SizeVerCursor);            m_StateFlag = MOV_TOP_LINE;//标记当前为用户按下矩形的上边界区域        &#125;        else if(m_bottomPolygon.containsPoint(m_startPos,Qt::WindingFill))        &#123;            setCursor(Qt::SizeVerCursor);            m_StateFlag = MOV_BOTTOM_LINE;//标记当前为用户按下矩形的下边界区域        &#125;//        else if(m_rbPolygon.containsPoint(m_startPos,Qt::WindingFill))//        &#123;//            setCursor(Qt::SizeFDiagCursor);//            m_StateFlag = MOV_RIGHTBOTTOM_RECT;//标记当前为用户按下矩形的右下角//        &#125;        else        &#123;            m_StateFlag = DEFAULT_FLAG;        &#125;    &#125;    else    &#123;        QGraphicsItem::mousePressEvent(event);    &#125;&#125;void myGraphicRectItem::mouseMoveEvent(QGraphicsSceneMouseEvent *event)&#123;    if(m_StateFlag == ROTATE)    &#123;       int nRotateAngle = atan2((event->pos().x()-m_RotateCenter.x()),(event->pos().y()-m_RotateCenter.y()))*180/M_PI;       SetRotate(180-nRotateAngle);       setRectSize(m_oldRect);       //qDebug()<<nRotateAngle;    &#125;    else if(m_StateFlag == MOV_RECT)    &#123;        QPointF point = (event->pos() - m_startPos);        moveBy(point.x(), point.y());        setRectSize(m_oldRect);        scene()->update();    &#125;    else if(m_StateFlag == MOV_LEFT_LINE)    &#123;        QPointF pf = QPointF((m_oldRectPolygon.at(1).x()+m_oldRectPolygon.at(2).x())/2,((m_oldRectPolygon.at(1).y()+m_oldRectPolygon.at(2).y())/2));        //计算到右侧边中点的距离        qreal dis = sqrt((event->pos().x()-pf.x())*(event->pos().x()-pf.x()) +(event->pos().y()-pf.y())*(event->pos().y()-pf.y()));        qreal dis2LT = sqrt((event->pos().x()-m_oldRectPolygon.at(0).x())*(event->pos().x()-m_oldRectPolygon.at(0).x()) +(event->pos().y()-m_oldRectPolygon.at(0).y())*(event->pos().y()-m_oldRectPolygon.at(0).y()));        qreal dis2RT = sqrt((event->pos().x()-m_oldRectPolygon.at(1).x())*(event->pos().x()-m_oldRectPolygon.at(1).x()) +(event->pos().y()-m_oldRectPolygon.at(1).y())*(event->pos().y()-m_oldRectPolygon.at(1).y()));        if(dis<16||dis2LT>dis2RT)        &#123;            return;        &#125;        else        &#123;            QRectF newRect(m_oldRect);            newRect.setLeft(m_oldRect.right()-dis);            newRect.setRight(m_oldRect.right());            setRectSize(newRect,false);            m_RotateCenter=QPointF((m_oldRectPolygon.at(0).x()+m_oldRectPolygon.at(2).x())/2,(m_oldRectPolygon.at(0).y()+m_oldRectPolygon.at(2).y())/2);            m_oldRect.moveCenter(m_RotateCenter);            setRectSize(m_oldRect);            scene()->update();//必须要用scene()->update()，不能用update();否则会出现重影        &#125;    &#125;    else if(m_StateFlag == MOV_TOP_LINE)    &#123;        //底边中点        QPointF pf = QPointF((m_oldRectPolygon.at(2).x()+m_oldRectPolygon.at(3).x())/2,((m_oldRectPolygon.at(2).y()+m_oldRectPolygon.at(3).y())/2));        //计算到底边中点的距离        qreal dis = sqrt((event->pos().x()-pf.x())*(event->pos().x()-pf.x()) +(event->pos().y()-pf.y())*(event->pos().y()-pf.y()));        qreal dis2LT = sqrt((event->pos().x()-m_oldRectPolygon.at(0).x())*(event->pos().x()-m_oldRectPolygon.at(0).x()) +(event->pos().y()-m_oldRectPolygon.at(0).y())*(event->pos().y()-m_oldRectPolygon.at(0).y()));        qreal dis2LB = sqrt((event->pos().x()-m_oldRectPolygon.at(3).x())*(event->pos().x()-m_oldRectPolygon.at(3).x()) +(event->pos().y()-m_oldRectPolygon.at(3).y())*(event->pos().y()-m_oldRectPolygon.at(3).y()));        if(dis<16||dis2LT>dis2LB)        &#123;            return;        &#125;        else        &#123;            QRectF newRect(m_oldRect);            newRect.setTop(m_oldRect.bottom()-dis);            newRect.setBottom(m_oldRect.bottom());            setRectSize(newRect,false);            m_RotateCenter=QPointF((m_oldRectPolygon.at(0).x()+m_oldRectPolygon.at(2).x())/2,(m_oldRectPolygon.at(0).y()+m_oldRectPolygon.at(2).y())/2);            m_oldRect.moveCenter(m_RotateCenter);            setRectSize(m_oldRect);            scene()->update();//必须要用scene()->update()，不能用update();否则会出现重影        &#125;    &#125;    else if(m_StateFlag == MOV_RIGHT_LINE)    &#123;        QPointF pf = QPointF((m_oldRectPolygon.at(0).x()+m_oldRectPolygon.at(3).x())/2,((m_oldRectPolygon.at(0).y()+m_oldRectPolygon.at(3).y())/2));        //计算到左侧边中点的距离        qreal dis = sqrt((event->pos().x()-pf.x())*(event->pos().x()-pf.x()) +(event->pos().y()-pf.y())*(event->pos().y()-pf.y()));        qreal dis2LT = sqrt((event->pos().x()-m_oldRectPolygon.at(0).x())*(event->pos().x()-m_oldRectPolygon.at(0).x()) +(event->pos().y()-m_oldRectPolygon.at(0).y())*(event->pos().y()-m_oldRectPolygon.at(0).y()));        qreal dis2RT = sqrt((event->pos().x()-m_oldRectPolygon.at(1).x())*(event->pos().x()-m_oldRectPolygon.at(1).x()) +(event->pos().y()-m_oldRectPolygon.at(1).y())*(event->pos().y()-m_oldRectPolygon.at(1).y()));        if(dis<16||dis2LT<dis2RT)        &#123;            return;        &#125;        else        &#123;            QRectF newRect(m_oldRect);            newRect.setLeft(m_oldRect.left());            newRect.setRight(m_oldRect.left()+dis);            setRectSize(newRect,false);            m_RotateCenter=QPointF((m_oldRectPolygon.at(0).x()+m_oldRectPolygon.at(2).x())/2,(m_oldRectPolygon.at(0).y()+m_oldRectPolygon.at(2).y())/2);            m_oldRect.moveCenter(m_RotateCenter);            setRectSize(m_oldRect);            scene()->update();//必须要用scene()->update()，不能用update();否则会出现重影        &#125;    &#125;    else if(m_StateFlag == MOV_BOTTOM_LINE)    &#123;        //顶边中点        QPointF pf = QPointF((m_oldRectPolygon.at(0).x()+m_oldRectPolygon.at(1).x())/2,((m_oldRectPolygon.at(0).y()+m_oldRectPolygon.at(1).y())/2));        //计算到底边中点的距离        qreal dis = sqrt((event->pos().x()-pf.x())*(event->pos().x()-pf.x()) +(event->pos().y()-pf.y())*(event->pos().y()-pf.y()));        qreal dis2LT = sqrt((event->pos().x()-m_oldRectPolygon.at(0).x())*(event->pos().x()-m_oldRectPolygon.at(0).x()) +(event->pos().y()-m_oldRectPolygon.at(0).y())*(event->pos().y()-m_oldRectPolygon.at(0).y()));        qreal dis2LB = sqrt((event->pos().x()-m_oldRectPolygon.at(3).x())*(event->pos().x()-m_oldRectPolygon.at(3).x()) +(event->pos().y()-m_oldRectPolygon.at(3).y())*(event->pos().y()-m_oldRectPolygon.at(3).y()));        if(dis<16||dis2LT<dis2LB)        &#123;            return;        &#125;        else        &#123;            QRectF newRect(m_oldRect);            newRect.setTop(m_oldRect.top());            newRect.setBottom(m_oldRect.top()+dis);            setRectSize(newRect,false);            m_RotateCenter=QPointF((m_oldRectPolygon.at(0).x()+m_oldRectPolygon.at(2).x())/2,(m_oldRectPolygon.at(0).y()+m_oldRectPolygon.at(2).y())/2);            m_oldRect.moveCenter(m_RotateCenter);            setRectSize(m_oldRect);            scene()->update();//必须要用scene()->update()，不能用update();否则会出现重影        &#125;    &#125;&#125;void myGraphicRectItem::mouseReleaseEvent(QGraphicsSceneMouseEvent *event)&#123;    setCursor(Qt::ArrowCursor);    if(m_StateFlag == MOV_RECT)    &#123;        m_StateFlag = DEFAULT_FLAG;    &#125;    else &#123;        QGraphicsItem::mouseReleaseEvent(event);    &#125;&#125;void myGraphicRectItem::SetRotate(qreal RotateAngle, QPointF ptCenter)&#123;    m_bRotate = true;    if(ptCenter.x()==-999 && ptCenter.y()==-999)    &#123;        m_RotateCenter = QPointF(m_oldRect.x()+m_oldRect.width()/2,m_oldRect.y()+m_oldRect.height()/2);    &#125;    else    &#123;        m_RotateCenter = ptCenter;    &#125;    m_RotateAngle = RotateAngle;    this->update();&#125;QPointF myGraphicRectItem::getRotatePoint(QPointF ptCenter, QPointF ptIn, qreal angle)&#123;    double dx = ptCenter.x();    double dy = ptCenter.y();    double x = ptIn.x();    double y = ptIn.y();    double xx,yy;    xx = (x-dx)*cos(angle*M_PI/180)-(y-dy)*sin(angle*M_PI/180)+dx;    yy = (x-dx)*sin(angle*M_PI/180)+(y-dy)*cos(angle*M_PI/180)+dy;    return QPointF(xx,yy);&#125;QList<QPointF> myGraphicRectItem::getRotatePoints(QPointF ptCenter, QList<QPointF> ptIns, qreal angle)&#123;    QList<QPointF> lstPt;    for(int i = 0;i<ptIns.count();i++)    &#123;        lstPt.append(getRotatePoint(ptCenter,ptIns.at(i),angle));    &#125;    return lstPt;&#125;QPolygonF myGraphicRectItem::getRotatePolygonFromRect(QPointF ptCenter, QRectF rectIn, qreal angle)&#123;    QVector<QPointF> vpt;    QPointF pf = getRotatePoint(ptCenter,rectIn.topLeft(),angle);    vpt.append(pf);    pf = getRotatePoint(ptCenter,rectIn.topRight(),angle);    vpt.append(pf);    pf = getRotatePoint(ptCenter,rectIn.bottomRight(),angle);    vpt.append(pf);    pf = getRotatePoint(ptCenter,rectIn.bottomLeft(),angle);    vpt.append(pf);    pf = getRotatePoint(ptCenter,rectIn.topLeft(),angle);    vpt.append(pf);    return QPolygonF(vpt);&#125;QRectF myGraphicRectItem::getCrtPosRectToSceen()&#123;    QRectF retRect = QRectF(m_oldRect.x()+pos().x(),m_oldRect.y()+pos().y(),m_oldRect.width(),m_oldRect.height());    return retRect;&#125;QRectF myGraphicRectItem::getSmallRotateRect(QPointF ptA,QPointF ptB)&#123;    QPointF pt = getSmallRotateRectCenter(ptA,ptB);    return QRectF(pt.x()-10,pt.y()-10,20,20);&#125;QPointF myGraphicRectItem::getSmallRotateRectCenter(QPointF ptA,QPointF ptB)&#123;    QPointF ptCenter = QPointF((ptA.x()+ptB.x())/2,(ptA.y()+ptB.y())/2);//A,B点的中点C    //中垂线方程式为 y=x*k + b;    qreal x,y;//旋转图标矩形的中心    if(abs(ptB.y()-ptA.y())<0.1)    &#123;        if(ptA.x()<ptB.x())//矩形左上角在上方        &#123;            x = ptCenter.x();            y = ptCenter.y()-20;        &#125;        else//矩形左上角在下方        &#123;            x = ptCenter.x();            y = ptCenter.y()+20;        &#125;    &#125;    else if(ptB.y()>ptA.y())//顺时针旋转0-180    &#123;        qreal k = (ptA.x()-ptB.x())/(ptB.y()-ptA.y());//中垂线斜率        qreal b = (ptA.y()+ptB.y())/2-k*(ptA.x()+ptB.x())/2;        //求AB线中垂线上离AB中点20个像素的点C的坐标        x = 20*cos(atan(k))+ptCenter.x();        y = k*x+b;    &#125;    else if(ptB.y()<ptA.y())//顺时针旋转180-360    &#123;        qreal k = (ptA.x()-ptB.x())/(ptB.y()-ptA.y());//中垂线斜率        qreal b = (ptA.y()+ptB.y())/2-k*(ptA.x()+ptB.x())/2;        //求AB线中垂线上离AB中点20个像素的点C的坐标        x = -20*cos(atan(k))+ptCenter.x();        y = k*x+b;    &#125;    return QPointF(x,y);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="功能3：Qt中设置QGraphicsView的背景色为透明且无边框"><a href="#功能3：Qt中设置QGraphicsView的背景色为透明且无边框" class="headerlink" title="功能3：Qt中设置QGraphicsView的背景色为透明且无边框"></a>功能3：Qt中设置<code>QGraphicsView</code>的背景色为透明且无边框</h3><ol><li>设置背景色为透明：在<code>QGraphicsView</code>上调用<code>setStyleSheet()</code>方法，并将背景色样式设置为透明。示例代码如下：</li></ol><pre class="line-numbers language-c++"><code class="language-c++">QGraphicsView* view = new QGraphicsView;view->setStyleSheet("background-color: transparent;");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>设置边框：在<code>QGraphicsView</code>上调用<code>setFrameStyle()</code>方法，并将边框样式设置为无边框。示例代码如下：</li></ol><pre class="line-numbers language-c++"><code class="language-c++">QGraphicsView* view = new QGraphicsView;view->setFrameStyle(QFrame::NoFrame);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在Qt中使用一个按钮清除<code>QGraphicsView</code>上监控的图片<code>QGraphicsPixmapItem</code>上画出来不需要的矩形<code>QGraphicsRectItem</code></p><ol><li><p>首先，在<code>QGraphicsView</code>上绑定一个按钮<code>QPushButton</code></p><pre class="line-numbers language-c++"><code class="language-c++">QPushButton* clearBtn = new QPushButton(view);# 将按钮放置在view的左下角btn.setGeometry(0,view.geometry().height()-40,40,20);btn.setText("clear");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>给按钮绑定槽函数，用于清除矩形</p><pre class="line-numbers language-c++"><code class="language-c++">#在.h文件中定义槽函数private slots:    void on_btn_clicked();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++"><code class="language-c++"># 在构造函数中绑定槽函数connect(clearBtn,SIGNAL(clicked()),this,SLOT(on_btn_clicked()));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-c++"><code class="language-c++"># 槽函数的具体实现void ImgHelper::on_btn_clicked()&#123;    rectcounts = 0;#设矩形个数为0    scene->clear();# 清空scene    imgUpdated(cloneImage);# 将直接保存的监控图片重新添加进scene&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="功能4：保存错误图片"><a href="#功能4：保存错误图片" class="headerlink" title="功能4：保存错误图片"></a>功能4：保存错误图片</h3><p>当发现监控的图片有问题时，就可以一键保存监控的图片，按日期创建文件夹，方便查看问题</p><pre class="line-numbers language-c++"><code class="language-c++">void ImgHelper::onSaveErrorImage()&#123;    //20230908    QString currentPath = QDir::currentPath();    QString filedir = currentPath + QDir::separator() + "errorImg";    QDir dir(filedir);    if(!dir.exists())&#123;       if(dir.mkdir(filedir))&#123;       &#125;else&#123;           qDebug()<<"创建目录失败";       &#125;    &#125;    QString nowDate = QDateTime::QDateTime::currentDateTime().toString("yyyy-MM-dd") ;    QString filedirdate = filedir + QDir::separator() + nowDate;    QDir dirdate(filedirdate);    if(!dirdate.exists())&#123;       if(dirdate.mkdir(filedirdate))&#123;       &#125;else&#123;           qDebug()<<"创建目录失败";       &#125;    &#125;    for(int i = 1; i <= 8; i++)&#123;        QString imgpath = filedirdate + QDir::separator() + "tt" + QString::number(i) +".bmp";        QFile file(imgpath);        //判断文件是否存在        if(file.exists())&#123;           continue;        &#125;        if(pixmapItem != NULL)&#123;            pixmapItem->pixmap().save(imgpath);        &#125;        break;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="功能5：修复图片通道异常"><a href="#功能5：修复图片通道异常" class="headerlink" title="功能5：修复图片通道异常"></a>功能5：修复图片通道异常</h3><pre class="line-numbers language-c++"><code class="language-c++">//2023926加  修复PLC查看图片出现的通道异常        for(int x = 0 ; x < image.height(); x++)&#123;                    for(int y = 0 ; y < image.width(); y++)&#123;                        QRgb pixel = image.pixel(x,y);                        int red = qBlue(pixel);                        int green =qRed(pixel);                        int blue = qGreen(pixel);                        QRgb newpixel = qRgb(red,green,blue);                        image.setPixel(x,y,newpixel);                    &#125;                &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解析Http协议</title>
      <link href="/2023/10/20/%E8%A7%A3%E6%9E%90Http%E5%8D%8F%E8%AE%AE/"/>
      <url>/2023/10/20/%E8%A7%A3%E6%9E%90Http%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<p>在写webSever时了解了一点关于http协议的内容，更方便后面的学习</p><span id="more"></span><p><strong>HTTP</strong>(hypertext transport protocol 超文本传输协议）：一种无状态的，以请求&#x2F;应答方式运行的协议，它使用可扩展的语义和自描述消息格式，与基于网络的超文本信息系统灵活的互动。</p><h2 id="1-http请求"><a href="#1-http请求" class="headerlink" title="1. http请求"></a>1. http请求</h2><pre class="line-numbers language-txt"><code class="language-txt">http请求消息分为四部分1. 请求行    不管是get请求还是post请求，请求行分为三部分2. 请求头3. 空行4. 客户端想服务器提交的数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-txt"><code class="language-txt">GET /doing HTTP/1.1Host: 10.1.18.4User-Agent: Mozilla/5.0 (Windows NT 6.2; rv:40.0) Gecko/20100101 Firefox/40.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3Accept-Encoding: gzip, deflateReferer: http://10.1.18.4/Connection: keep-alive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-txt"><code class="language-txt">1. 请求行GET /doing HTTP/1.1三部分：请求方式请求的资源（/不代表服务器根目录，是服务器给客户端提供的资源目录）        HTTP协议版本还有看不见的\r\n2. 请求头若干个键值对Host: 10.1.18.4User-Agent: Mozilla/5.0 (Windows NT 6.2; rv:40.0) Gecko/20100101 Firefox/40.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3Accept-Encoding: gzip, deflateReferer: http://10.1.18.4/Connection: keep-alive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>get</p><ul><li>提交的数据,不安全,提交的数据会显示到地址栏中，被别人看到之后，数据就泄露了</li><li>图中的<code> userid</code>和<code>roomid </code>就是浏览器向服务器提交的数据地址栏中的数据会放到某块缓冲中，地址栏对应的缓存是有上限的,在几k左右</li></ul></li><li><p>post</p><ul><li>提交的数据并不会显示到地址栏中,完全不可见的，因此更安全</li></ul></li></ul><ol><li><p>请求行，用来说明请求类型，要访问的资源以及所使用的<code>http</code>版本。get说明请求类型为get，该行的最后一部分说明使用的是<code>http 1.1</code>版本</p></li><li><p>请求头，紧接着请求行（即第一行）之后的部分，用来说明服务器要使用的附加信息。从第二行起为请求头部，<code>host</code>将指出请求的目的地。<code>User-Agent</code>，服务器端和客户端脚本都能访问它，它是客户端类型检测逻辑的重要基础。该信息由你的客户端来定义，并且在每个请求中自动发送等。</p></li><li><p>空行，请求头部后面的空行是必须的。即使第四部分的请求数据为空，也必须有空行。</p></li><li><p>请求数据也叫主体，可以添加任意的其他数据，上面的请求数据为空。</p></li></ol><h2 id="1-2-http响应"><a href="#1-2-http响应" class="headerlink" title="1.2 http响应"></a>1.2 http响应</h2><ol><li>状态行，由<code>http</code>协议版本号， 状态码， 状态消息三部分组成。上面<code>http</code>版本号为<code>http/1.1</code>，状态码为200，状态消息为”OK”。</li><li>消息报头，用来说明客户端要使用的一些附加信息。<code>Date</code>：生成响应的日期和时间；<code>Content-Type</code>：指定了MIME类型的<code>html(text/html)</code>，编码类型是<code>UTF-8</code>。</li><li>空行，消息报头后面的空行是必须的。</li><li>响应正文，服务器返回给客户端的文本信息，空行后面的<code>html</code>部分为响应正文。</li></ol><h2 id="1-3-http状态码"><a href="#1-3-http状态码" class="headerlink" title="1.3 http状态码"></a>1.3 http状态码</h2><p>状态代码有三位数字组成，第一个数字定义了响应的类别，共分五种类别:</p><pre class="line-numbers language-txt"><code class="language-txt">1xx:指示信息--表示请求已接收，继续处理2xx:成功--表示请求已被成功接收、理解、接受3xx:重定向--要完成请求必须进行更进—步的操作(网络地址的重新访问)4xx:客户端错误--请求有语法错误或请求无法实现5xx:服务器端错误--服务器未能实现合法的请求<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常见状态码</p><pre class="line-numbers language-txt"><code class="language-txt">200 OK客户端请求成功400 Bad Request客户端请求有语法错误，不能被服务器所理解401 Unauthorized请求未经授权，这个状态代码必须和Www-Authenticate报头域一起使用403 Forbidden 服务器收到请求，但是拒绝提供服务404 Not Found 请求资源不存在，eg:输入了错误的URL500 Internal Server Error服务器发生不可预期的错误503 Server Unavailable 服务器当前不能处理客户端的请求，一段时间后可能恢复正常<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下git使用</title>
      <link href="/2023/10/09/Linux%E4%B8%8Bgit%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/10/09/Linux%E4%B8%8Bgit%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>简单介绍git的基本命令</p><span id="more"></span><h1 id="Linux下Git使用"><a href="#Linux下Git使用" class="headerlink" title="Linux下Git使用"></a>Linux下Git使用</h1><h3 id="1-git的安装"><a href="#1-git的安装" class="headerlink" title="1. git的安装"></a>1. git的安装</h3><pre class="line-numbers language-shell"><code class="language-shell">sudo apt install git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完，使用<code>git --version</code>查看git版本</p><h3 id="2-配置git"><a href="#2-配置git" class="headerlink" title="2. 配置git"></a>2. 配置git</h3><pre class="line-numbers language-shell"><code class="language-shell">git config --global user.name "Your Name“##配置用户 git config --global user.email email@example.com##配置邮箱git config --global --list##查看配置信息## --global 全局配置，所有仓库生效，不加就只对当前用户有效## --system 系统配置，对所有用户生效<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-新建版本库"><a href="#3-新建版本库" class="headerlink" title="3. 新建版本库"></a>3. 新建版本库</h3><pre class="line-numbers language-shell"><code class="language-shell"> git init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-工作区域与文件状态"><a href="#4-工作区域与文件状态" class="headerlink" title="4. 工作区域与文件状态"></a>4. 工作区域与文件状态</h3><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230920204530239.png" alt="image-20230920204530239"></p><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230920204638439.png" alt="image-20230920204638439"></p><h3 id="5-添加和提交文件"><a href="#5-添加和提交文件" class="headerlink" title="5. 添加和提交文件"></a>5. 添加和提交文件</h3><pre class="line-numbers language-shell"><code class="language-shell">git init##创建仓库git status##查看仓库的状态git add##添加到暂存库git commit ##提交git rm --cached <file>...##将文件从暂存区中去除git log##查看提交记录git ls-files##查看暂存区的文件git commit -a -m " " #实现添加和提交两个步骤<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-回退版本"><a href="#3-回退版本" class="headerlink" title="3. 回退版本"></a>3. 回退版本</h3><pre class="line-numbers language-shell"><code class="language-shell">git reset --softgit reset --hardgit reset --mixed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230921085607903.png" alt="image-20230921085607903"></p><pre class="line-numbers language-shell"><code class="language-shell">git reset HEAD^##默认为mixed,回退一个版本<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-txt"><code class="language-txt">HEAD 表示当前版本HEAD^ 上一个版本HEAD^^ 上上一个版本HEAD^^^ 上上上一个版本HEAD~0 表示当前版本HEAD~1 上一个版本HEAD^2 上上一个版本HEAD^3 上上上一个版本执行 git reset HEAD 以取消之前 git add 添加，但不希望包含在下一提交快照中的缓存<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>误操作之后</p><pre class="line-numbers language-shell"><code class="language-shell">git reflog##回溯日志git reset --hard 版本号##回退<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-查看差异"><a href="#6-查看差异" class="headerlink" title="6. 查看差异"></a>6. 查看差异</h3><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230921091532989.png" alt="image-20230921091532989"></p><pre class="line-numbers language-shell"><code class="language-shell">git diff#默认比较工作区和暂存区之间的差异git diff HEAD#比较工作区和版本库之间的差异git diff --cached#比较暂存区和版本库之间的区别git diff 版本号版本号#比较两个版本之间的差异git diff HEAD~ HEAD#如回退版本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230921092511736.png" alt="image-20230921092511736"></p><h3 id="7-删除文件"><a href="#7-删除文件" class="headerlink" title="7. 删除文件"></a>7. 删除文件</h3><p>方法1：先删除本地文件，再提交</p><pre class="line-numbers language-shell"><code class="language-shell">rm -rf 3.txt##删除本地中的文件git add .##删除暂存区中的文件git commit -m 'deleted 3.txt'##删除工作区文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>方法2</p><pre class="line-numbers language-shell"><code class="language-shell">git rm 2.txt##删除本地和暂存区中文件git commit -m 'deleted 2.txt'##删除工作区文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230921093523261.png" alt="image-20230921093523261"></p><h3 id="8-忽略文件"><a href="#8-忽略文件" class="headerlink" title="8. 忽略文件"></a>8. 忽略文件</h3><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230921093644360.png" alt="image-20230921093644360"></p><pre class="line-numbers language-shell"><code class="language-shell"> echo "*.log" > .gitignore##表示忽略所有日志文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230921094538072.png" alt="image-20230921094538072"></p><h3 id="9-远程仓库github"><a href="#9-远程仓库github" class="headerlink" title="9. 远程仓库github"></a>9. 远程仓库github</h3><p>注册github账号，创建仓库</p><h3 id="10-ssh配置和克隆仓库"><a href="#10-ssh配置和克隆仓库" class="headerlink" title="10. ssh配置和克隆仓库"></a>10. ssh配置和克隆仓库</h3><p>创建ssh密钥</p><pre class="line-numbers language-shell"><code class="language-shell">cd ~cd .ssh#如果显示文件不存在，就之间执行以下命令ssh-keygen -t rsa -b 4096 -C "xxx@email.com"#直接enter,如果是第二次执行，记得更改文件名，不然会覆盖之前的id_rsa文件，且不可逆<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230921101312117.png" alt="image-20230921101312117"></p><p>执行之前的命令会生成以下两个文件，有.pub的是公钥文件，没有的是私钥文件，复制公钥文件到github的Settings里的ssh配置</p><p>如果是第一次配置就配置完了，如果是第二次，更改了文件名的，就需要新建一个config文件，内容为</p><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230921101639858.png" alt="image-20230921101639858"></p><p>意思是：当我们在访问github.com这个网站的时候。使用的是test这个文件里的密钥</p><pre class="line-numbers language-shell"><code class="language-shell"> git clone git@github.com:xxx.git##克隆新建的远程仓库<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230921102254407.png" alt="image-20230921102254407"></p><pre class="line-numbers language-shell"><code class="language-shell">git push##将本地文件推送到远程仓库<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="11-关联本地仓库和远程仓库"><a href="#11-关联本地仓库和远程仓库" class="headerlink" title="11. 关联本地仓库和远程仓库"></a>11. 关联本地仓库和远程仓库</h3><ol><li>本地无仓库</li></ol><pre class="line-numbers language-shell"><code class="language-shell">echo "# fist-repo" >> README.mdgit initgit add README.mdgit commit -m "first commit"git branch -M maingit remote add origin git@github.com:xxx.gitgit push -u origin main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>本地已经有仓库</li></ol><pre class="line-numbers language-shell"><code class="language-shell">git remote add origin git@github.com:xxx.git##添加一个远程仓库git branch -M main##指定分支的名称为maingit push -u origin main##把本地的main分支与远程的orgin main分支关联<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell">git remote -v##查看本地仓库对应的远程仓库别名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230921103436235.png" alt="image-20230921103436235"></p><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230921103522078.png" alt="image-20230921103522078"></p><h3 id="12-分支"><a href="#12-分支" class="headerlink" title="12. 分支"></a>12. 分支</h3><pre class="line-numbers language-shell"><code class="language-shell">git branch#查看分支git branchdev#新建分支devgit checkout dev#切换到分支dev(有风险，有时会用来恢复文件)git switch main#切换到分支maingit merge dev#将要被合并的分支(dev)合并到当前分支(main)git log --graph --oneline --decorate --all##查看分支情况git branch -d dev#删除分支(已经合并)git branch -D dev#删除分支(未合并，强行删除)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230921140159925.png" alt="image-20230921140159925"></p><h3 id="13-回退和rebase"><a href="#13-回退和rebase" class="headerlink" title="13. 回退和rebase"></a>13. 回退和rebase</h3><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230921140826350.png" alt="image-20230921140826350"></p><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230921141221770.png" alt="image-20230921141221770"></p><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230921141308973.png" alt="image-20230921141308973"></p><h3 id="14-分支管理和工作流模型"><a href="#14-分支管理和工作流模型" class="headerlink" title="14. 分支管理和工作流模型"></a>14. 分支管理和工作流模型</h3><ol><li><strong>git flow模型</strong></li></ol><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/v2-04b62035a49e04e997d3cb05e22970a9_r.jpg" alt="img"></p><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/v2-f20d5d1eab3704639fe64531776b4bac_720w.webp" alt="img"></p><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/v2-c7b37d13cfb22d77c840bac3cceee6a7_r.jpg" alt="img"></p><ol start="2"><li><strong>github flow模型</strong></li></ol><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230921141728150.png" alt="image-20230921141728150"></p><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230921141750346.png" alt="image-20230921141750346"></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux高性能服务器编程I</title>
      <link href="/2023/09/25/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8BI/"/>
      <url>/2023/09/25/Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8BI/</url>
      
        <content type="html"><![CDATA[<p>今天的内容包括一些linux网络编程基本api和实现了TCP协议的服务端以及客户端。</p><span id="more"></span><h1 id="Linux高性能服务器编程笔记"><a href="#Linux高性能服务器编程笔记" class="headerlink" title="Linux高性能服务器编程笔记"></a>Linux高性能服务器编程笔记</h1><h3 id="主机字节序和网络字节序"><a href="#主机字节序和网络字节序" class="headerlink" title="主机字节序和网络字节序"></a>主机字节序和网络字节序</h3><p>大端字节序（网络字节序，数据传输，JAVA虚拟机）：高位字节存储在内存的低地址处</p><p>小端字节序（主机字节序，现代PC机）：低位字节存储在内存的低地址处</p><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230925111901112.png" alt="image-20230925111901112"></p><p>地址族类型通常与协议族类型相对应</p><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230925112244293.png" alt="image-20230925112244293"></p><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230925141532173.png" alt="image-20230925141532173"></p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc <span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">192</span><span class="token punctuation">,</span><span class="token number">168</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>buf<span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token function">htonl</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>sum<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d %d\n"</span><span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++"><code class="language-c++">#include <iostream>#include <arpa/inet.h>int main(int argc, char *argv[]) &#123;       //unsigned char buf[4] = &#123;192, 168, 1, 2&#125;;    char buf[4] = &#123;static_cast<char>(192), static_cast<char>(168), static_cast<char>(1), static_cast<char>(2)&#125;;        int num = *(int *)buf;    int sum = htonl(num);    unsigned char *p = reinterpret_cast<unsigned char *>(&sum);    std::cout << static_cast<int>(*p) << " " << static_cast<int>(*(p + 1)) << " " << static_cast<int>(*(p + 2)) << " " << static_cast<int>(*(p + 3)) << std::endl;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>2 1 168 192</code></pre><p>c语言代码转c++时，在初始化<code>buf</code>数组时，对于大于一个字节的整数，需要将其强制转换为<code>char</code>类型，使用<code>static_cast&lt;char&gt;(value)</code>进行转换即可。这样做可以避免<code>narrowing conversion</code>错误。</p><p><strong>网络里面的数据类型定义都应该用无符号，更加保险</strong></p><h3 id="点分十进制转换"><a href="#点分十进制转换" class="headerlink" title="点分十进制转换"></a>点分十进制转换</h3><pre class="line-numbers language-txt"><code class="language-txt">// src为 点分十进制字符串的IPv4地址 或 十六进制字符串表示的IPv6地址 存入dst的内存中 af指定地址族// 可以为 AF_INET AF_INET6 成功返回1 失败返回-1int inet_pton(int af, const char * src, void* dst);// 协议名, 需要转换的ip, 存储地址, 长度(有两个常量 INET_ADDRSTRLEN, INET6_ADDRSTRLEN)const char* inet_ntop(int af, const void*  src, char* dst, socklen_t cnt);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-txt"><code class="language-txt">// 创建 命名 监听 socket# include <sys/types.h># include <sys/socket.h>// domain指定使用那个协议族 PF_INET PF_INET6// type指定服务类型 SOCK_STREAM (TCP协议) SOCK_DGRAM(UDP协议)// protocol设置为默认的0// 成功返回socket文件描述符(linux一切皆文件), 失败返回-1int socket(int domain, int type, int protocol);// socket为socket文件描述符// my_addr 为地址信息// addrlen为socket地址长度// 成功返回0 失败返回 -1int bind(int socket, const struct sockaddr* my_addr, socklen_t addrlen);// backlog表示队列最大的长度int listen(int socket, int backlog);// 接受连接 失败返回-1 成功时返回socketint accept(int sockfd, struct sockaddr* addr, socklen_t* addrlen)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Linux内核2.2之后，<code>socket backlog</code>参数的形为改变了，<strong>现在它指等待<code>accept</code>的<code>完全建立</code>的套接字的队列长度</strong>，而不是不完全连接请求的数量。 <strong>不完全连接</strong>的长度可以使用<code>/proc/sys/net/ipv4/tcp_max_syn_backlog</code>设置。这意味着当前Linux版本使用上面第二种说法，有两个队列：具有由系统范围设置指定的大小的<code>SYN队列</code> 和 应用程序（也就是backlog参数）指定的<code>accept</code>队列。</p><pre class="line-numbers language-shell"><code class="language-shell">cat /proc/sys/net/ipv4/tcp_max_syn_backlog512<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a><strong>TCP协议</strong></h3><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230926154633974.png" alt="image-20230926154633974"></p><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230927104224676.png" alt="TCP协议流程"></p><h4 id="TCP三次握手"><a href="#TCP三次握手" class="headerlink" title="TCP三次握手"></a>TCP三次握手</h4><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/20170305084830550" alt="这里写图片描述"></p><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><pre class="line-numbers language-c++"><code class="language-c++">#include <iostream>#include <sys/socket.h>#include <arpa/inet.h>#include <unistd.h>using namespace std;int main()&#123;    // 1. 创建套接字    int socket_fd;    socket_fd = socket(AF_INET,SOCK_STREAM,0);    // 2. 连接服务器    struct  sockaddr_in addr;    addr.sin_family = AF_INET;    addr.sin_port = htons(8080);    inet_pton(AF_INET,"172.18.192.1",&addr.sin_addr.s_addr);        connect(socket_fd,(struct sockaddr*)&addr,sizeof(addr));    // 3. 读写数据    char buf[1024] = "";    while(1)&#123;        int n = read(STDIN_FILENO,buf,sizeof(buf));        write(socket_fd,buf,n);     //发送数据给服务器        n = read(socket_fd,buf,sizeof(buf));        write(STDOUT_FILENO,buf,sizeof(buf));    &#125;    // 4. 关闭链接    close(socket_fd);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h4><pre class="line-numbers language-c++"><code class="language-c++">#include<iostream>#include<sys/socket.h>#include<unistd.h>#include<arpa/inet.h>#include<stdio.h>#include<string.h>using namespace std;int main()&#123;    // 1. 创建套接字    int socket_fd;    socket_fd = socket(AF_INET,SOCK_STREAM,0);    cout<<socket_fd<<endl;    // 2. 绑定 bind    struct sockaddr_in addr;    addr.sin_family = AF_INET;    addr.sin_port = htons(8010);    addr.sin_addr.s_addr = 0;   //如果是0，绑定的是通配地址   // inet_pton(AF_INET,"192.168.0.102",&addr.sin_addr.s_addr);    int ret = bind(socket_fd,(struct sockaddr *)&addr,sizeof(addr));    if(ret < 0)&#123;        perror("");        exit(0);    &#125;    // 3. 监听 listen    listen(socket_fd,128);  //参数128是等待监听队列和已连接监听队列之和的最大值（linux2.2后，只表示已连接队列）    // 4. 提取 accept    struct sockaddr_in cliaddr; //已建立连接    socklen_t len = sizeof(cliaddr);    int Con_fd = accept(socket_fd,(struct sockaddr *)&cliaddr,&len);  //已连接套接字    char ip[16]="";    printf("new client ip=%s port=%d\n",inet_ntop(AF_INET, &cliaddr.sin_addr.s_addr,ip,16),ntohs(cliaddr.sin_port));    // 5. 读写    char buf[1024] = "";    while(1)&#123;        bzero(buf,sizeof(buf));     //清空buff        int n = read(STDIN_FILENO,buf,sizeof(buf));        write(Con_fd,buf,n);        n = read(Con_fd,buf,sizeof(buf));        printf("%s\n",buf);            &#125;    // 6. 关闭    close(socket_fd);    close(Con_fd);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用命令<code> nc 127.0.0.1 8008</code>连接服务器</p><pre class="line-numbers language-txt"><code class="language-txt">new client ip=127.0.0.1 port=56918<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="出错处理封装函数"><a href="#出错处理封装函数" class="headerlink" title="出错处理封装函数"></a>出错处理封装函数</h4><h5 id="warp-c"><a href="#warp-c" class="headerlink" title="warp.c"></a>warp.c</h5><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;errno.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token keyword">void</span> <span class="token function">perr_exit</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">perror</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">Accept</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">struct</span> sockaddr <span class="token operator">*</span>sa<span class="token punctuation">,</span> socklen_t <span class="token operator">*</span>salenptr<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    again<span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> sa<span class="token punctuation">,</span> salenptr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>errno <span class="token operator">==</span> ECONNABORTED<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EINTR<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">goto</span> again<span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">perr_exit</span><span class="token punctuation">(</span><span class="token string">"accept error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> n<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">Bind</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> sockaddr <span class="token operator">*</span>sa<span class="token punctuation">,</span> socklen_t salen<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token function">bind</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> sa<span class="token punctuation">,</span> salen<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">perr_exit</span><span class="token punctuation">(</span><span class="token string">"bind error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> n<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">Connect</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> sockaddr <span class="token operator">*</span>sa<span class="token punctuation">,</span> socklen_t salen<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> sa<span class="token punctuation">,</span> salen<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">perr_exit</span><span class="token punctuation">(</span><span class="token string">"connect error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> n<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">Listen</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">int</span> backlog<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token function">listen</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> backlog<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">perr_exit</span><span class="token punctuation">(</span><span class="token string">"listen error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> n<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">Socket</span><span class="token punctuation">(</span><span class="token keyword">int</span> family<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span> protocol<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>family<span class="token punctuation">,</span> type<span class="token punctuation">,</span> protocol<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">perr_exit</span><span class="token punctuation">(</span><span class="token string">"socket error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> n<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>ssize_t <span class="token function">Read</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> size_t nbytes<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    ssize_t n<span class="token punctuation">;</span>again<span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> ptr<span class="token punctuation">,</span> nbytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EINTR<span class="token punctuation">)</span>            <span class="token keyword">goto</span> again<span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> n<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>ssize_t <span class="token function">Write</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> size_t nbytes<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    ssize_t n<span class="token punctuation">;</span>again<span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> ptr<span class="token punctuation">,</span> nbytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EINTR<span class="token punctuation">)</span>            <span class="token keyword">goto</span> again<span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> n<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">Close</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">perr_exit</span><span class="token punctuation">(</span><span class="token string">"close error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> n<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>ssize_t <span class="token function">Readn</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>vptr<span class="token punctuation">,</span> size_t n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    size_t nleft<span class="token punctuation">;</span>    ssize_t nread<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>    ptr <span class="token operator">=</span> vptr<span class="token punctuation">;</span>    nleft <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>nleft <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>nread <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> ptr<span class="token punctuation">,</span> nleft<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EINTR<span class="token punctuation">)</span>                nread <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nread <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        nleft <span class="token operator">-</span><span class="token operator">=</span> nread<span class="token punctuation">;</span>        ptr <span class="token operator">+</span><span class="token operator">=</span> nread<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> n <span class="token operator">-</span> nleft<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>ssize_t <span class="token function">Writen</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>vptr<span class="token punctuation">,</span> size_t n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    size_t nleft<span class="token punctuation">;</span>    ssize_t nwritten<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>    ptr <span class="token operator">=</span> vptr<span class="token punctuation">;</span>    nleft <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>nleft <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>nwritten <span class="token operator">=</span> <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> ptr<span class="token punctuation">,</span> nleft<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nwritten <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> errno <span class="token operator">==</span> EINTR<span class="token punctuation">)</span>                nwritten <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        nleft <span class="token operator">-</span><span class="token operator">=</span> nwritten<span class="token punctuation">;</span>        ptr <span class="token operator">+</span><span class="token operator">=</span> nwritten<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> n<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">static</span> ssize_t <span class="token function">my_read</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> read_cnt<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token operator">*</span>read_ptr<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">char</span> read_buf<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>read_cnt <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>again<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>read_cnt <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> read_buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>read_buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EINTR<span class="token punctuation">)</span>                <span class="token keyword">goto</span> again<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>read_cnt <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        read_ptr <span class="token operator">=</span> read_buf<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    read_cnt<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token operator">*</span>read_ptr<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>ssize_t <span class="token function">Readline</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>vptr<span class="token punctuation">,</span> size_t maxlen<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    ssize_t n<span class="token punctuation">,</span> rc<span class="token punctuation">;</span>    <span class="token keyword">char</span> c<span class="token punctuation">,</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>    ptr <span class="token operator">=</span> vptr<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> maxlen<span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>rc <span class="token operator">=</span> <span class="token function">my_read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token operator">*</span>ptr<span class="token operator">++</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rc <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> n<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="warp-h"><a href="#warp-h" class="headerlink" title="warp.h"></a>warp.h</h5><pre><code>#ifndef __WRAP_H_#define __WRAP_H_void perr_exit(const char *s);int Accept(int fd, struct sockaddr *sa, socklen_t *salenptr);int Bind(int fd, const struct sockaddr *sa, socklen_t salen);int Connect(int fd, const struct sockaddr *sa, socklen_t salen);int Listen(int fd, int backlog);int Socket(int family, int type, int protocol);ssize_t Read(int fd, void *ptr, size_t nbytes);ssize_t Write(int fd, const void *ptr, size_t nbytes);int Close(int fd);ssize_t Readn(int fd, void *vptr, size_t n);ssize_t Writen(int fd, const void *vptr, size_t n);ssize_t my_read(int fd, char *ptr);ssize_t Readline(int fd, void *vptr, size_t maxlen);#endif</code></pre><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230927104030417.png" alt="image-20230927104030417"></p><h3 id="多进程服务端"><a href="#多进程服务端" class="headerlink" title="多进程服务端"></a>多进程服务端</h3><pre><code>#include &lt;stdio.h&gt;#include &lt;sys/socket.h&gt;#include &lt;arpa/inet.h&gt;#include &lt;string.h&gt;#include &lt;unistd.h&gt;#include &lt;signal.h&gt;#include &lt;stdlib.h&gt;#include &lt;sys/types.h&gt;#include &lt;sys/wait.h&gt;#include &lt;errno.h&gt; #define BUF_SIZE 256 void do_sigchld(int signo, siginfo_t *siginfo, void *p)&#123;    int status;    pid_t pid;    while((pid = waitpid(0, &amp;status, WNOHANG)) &gt; 0) //0:回收跟调用进程同组的子进程的资源，WNOHANG:不阻塞    &#123;        if (WIFEXITED(status))            printf(&quot;pid = %d, parent pid = %d, child pid = %d, exit status %d\n&quot;, pid, getpid(), siginfo-&gt;si_pid, WEXITSTATUS(status));        else if (WEXITSTATUS(status))            printf(&quot;pid = %d, parent pid = %d, child pid = %d, exit by signal %d\n &quot;, pid, getpid(), siginfo-&gt;si_pid, WIFSIGNALED(status));    &#125;&#125; void sys_err(const char *str, int err)&#123;    perror(str);    exit(err);&#125; int main(int argc, char *argv[])&#123;    if (argc &lt; 2)    &#123;        printf(&quot;%s port\n&quot;, argv[0]);        exit(1);    &#125;    //创建流式套接字    int lfd = socket(AF_INET, SOCK_STREAM, 0);    if (lfd &lt; 0)        sys_err(&quot;socket&quot;, 1);     //绑定ip端口        struct sockaddr_in server_addr;    server_addr.sin_family = AF_INET;    server_addr.sin_port = htons((unsigned short)atoi(argv[1]));    server_addr.sin_addr.s_addr = 0; //0表示将本机所有ip都绑定上    int ret = bind(lfd, (struct sockaddr *)&amp;server_addr, sizeof(server_addr));    if (ret &lt; 0)        sys_err(&quot;bind&quot;, 1);        //监听    ret = listen(lfd, 128);    if (ret &lt; 0)        sys_err(&quot;listen&quot;, 1);        //阻塞SIGCHLD信号    sigset_t set;    sigemptyset(&amp;set);    sigaddset(&amp;set, SIGCHLD);    sigprocmask(SIG_BLOCK, &amp;set, NULL);    int block = 1;    //循环提取    int cfd;    pid_t pid;    struct sockaddr_in client_addr;     socklen_t len = sizeof(client_addr);    char buf[BUF_SIZE];    ssize_t size;    char ip[INET_ADDRSTRLEN] = &quot;&quot;;    while(1)    &#123;        cfd = accept(lfd, (struct sockaddr *)&amp;client_addr, &amp;len);        if (cfd &lt; 0)        &#123;            if (errno == EINTR)                continue;             sys_err(&quot;accept&quot;, 1);        &#125;         printf(&quot;client ip = %s, port = %d connect success\n&quot;, inet_ntop(AF_INET, &amp;client_addr.sin_addr.s_addr, ip, sizeof(ip)), ntohs(client_addr.sin_port));        pid = fork();        if (pid == 0)        &#123;            //in child            close(lfd); //关闭不用了的监听套接字            //解除阻塞SIGCHLD信号            sigprocmask(SIG_UNBLOCK, &amp;set, NULL);            block = 0;             while(1)            &#123;                memset(buf, 0, sizeof(buf));                size = read(cfd, buf, sizeof(buf));                if (size == 0) //客户端断开连接                &#123;                    printf(&quot;client close\n&quot;);                    break;                &#125;                 printf(&quot;%s\n&quot;, buf);                write(cfd, buf, size);            &#125;             break;        &#125;        else if (pid &gt; 0)        &#123;            //in parent            close(cfd); //关闭不用了的跟客户端通讯的套接字            if (1 == block)            &#123;                //先捕捉                struct sigaction sa;                sa.sa_sigaction = do_sigchld;                sigemptyset(&amp;sa.sa_mask);                sa.sa_flags = SA_SIGINFO;                sigaction(SIGCHLD, &amp;sa, NULL);                //后解除阻塞                sigprocmask(SIG_UNBLOCK, &amp;set, NULL);                block = 0;            &#125;        &#125;        else            sys_err(&quot;fork&quot;, 1);    &#125;        //关闭套接字    if (pid == 0)        close(cfd);    else if (pid &gt; 0)        close(lfd);     return 0;&#125;</code></pre><pre class="line-numbers language-h"><code class="language-h">new client ip=127.0.0.1 port=53766wnew client ip=127.0.0.1 port=53768q<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>free_process</code> 函数是用于处理子进程的结束的信号处理函数。当子进程结束时，父进程会收到 <code>SIGCHLD</code> 信号，该信号会触发 <code>free_process</code> 函数。这个函数使用 <code>waitpid</code> 函数来回收子进程，避免它们成为僵尸进程。</p><h4 id="多线程服务端"><a href="#多线程服务端" class="headerlink" title="多线程服务端"></a>多线程服务端</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"wrap.h"</span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> c_info<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cfd<span class="token punctuation">;</span>    <span class="token keyword">struct</span> sockaddr_in cliaddr<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>CINFO<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">client_fun</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"argc &lt; 2  \n ./test 8000\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    pthread_attr_t attr<span class="token punctuation">;</span>    <span class="token function">pthread_attr_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_attr_setdetachstate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>attr<span class="token punctuation">,</span>PTHREAD_CREATE_DETACHED<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置线程的分离状态为分离态,线程在退出后会自动释放其资源，而不需要其他线程等待它结束。</span>    <span class="token keyword">short</span> port <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> lfd <span class="token operator">=</span> <span class="token function">tcp4bind</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//创建套接字，绑定</span>    <span class="token function">Listen</span><span class="token punctuation">(</span>lfd<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> sockaddr_in cliaddr<span class="token punctuation">;</span>    socklen_t len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>cliaddr<span class="token punctuation">)</span><span class="token punctuation">;</span>    CINFO <span class="token operator">*</span>info<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cfd <span class="token operator">=</span> <span class="token function">Accept</span><span class="token punctuation">(</span>lfd<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>cliaddr<span class="token punctuation">,</span><span class="token operator">&amp;</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> ip<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// printf("new client ip=%s port=%d\n",inet_ntop(AF_INET,&amp;cliaddr.sin_addr.s_addr,ip,16),ntohs(cliaddr.sin_port));</span>        pthread_t pthid<span class="token punctuation">;</span>        info <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>CINFO<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        info<span class="token operator">-></span>cfd <span class="token operator">=</span> cfd<span class="token punctuation">;</span>        info<span class="token operator">-></span>cliaddr <span class="token operator">=</span> cliaddr<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// pthread_create(&amp;pthid,NULL,client_fun,info);</span>         <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pthid<span class="token punctuation">,</span><span class="token operator">&amp;</span>attr<span class="token punctuation">,</span>client_fun<span class="token punctuation">,</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">client_fun</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    CINFO <span class="token operator">*</span>info <span class="token operator">=</span> <span class="token punctuation">(</span>CINFO <span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">;</span>    <span class="token keyword">char</span> ip<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"new client ip=%s port=%d\n"</span><span class="token punctuation">,</span><span class="token function">inet_ntop</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span><span class="token operator">&amp;</span>info<span class="token operator">-></span>cliaddr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr<span class="token punctuation">,</span>ip<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">ntohs</span><span class="token punctuation">(</span>info<span class="token operator">-></span>cliaddr<span class="token punctuation">.</span>sin_port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>info<span class="token operator">-></span>cfd<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"client close\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">write</span><span class="token punctuation">(</span>info<span class="token operator">-></span>cfd<span class="token punctuation">,</span>buf<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>info<span class="token operator">-></span>cfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="端口复用"><a href="#端口复用" class="headerlink" title="端口复用"></a>端口复用</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> opt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">setsockopt</span><span class="token punctuation">(</span>listenfd<span class="token punctuation">,</span> SOL_SOCKET<span class="token punctuation">,</span> SO_REUSEADDR<span class="token punctuation">,</span> <span class="token operator">&amp;</span>opt<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> linux </tag>
            
            <tag> c </tag>
            
            <tag> 网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心编程I</title>
      <link href="/2023/09/18/C-%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8BI/"/>
      <url>/2023/09/18/C-%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8BI/</url>
      
        <content type="html"><![CDATA[<p>今天的内容包括内存分区模型、内联函数和拷贝构造函数。</p><span id="more"></span><h1 id="C-核心编程"><a href="#C-核心编程" class="headerlink" title="C++核心编程"></a>C++核心编程</h1><h3 id="1-内存分区模型"><a href="#1-内存分区模型" class="headerlink" title="1. 内存分区模型"></a>1. 内存分区模型</h3><ul><li>代码区：存放函数的二进制代码，由操作系统进行管理</li><li>全局区：存放全局变量和静态变量以及常量</li><li>栈区：由编译器自动分配释放，存放函数的参数值，局部变量等</li><li>堆区：由程序员分配和释放，若程序员不释放，程序结束由操作系统释放</li></ul><h3 id="2-内联函数"><a href="#2-内联函数" class="headerlink" title="2. 内联函数"></a>2. 内联函数</h3><p>在C++中，使用关键字 <code>inline</code> 可以将函数定义为内联函数。内联函数的特点是它们的定义必须在每个调用它们的源文件中可见，通常这意味着函数的定义通常会写在头文件（.h）中。</p><p>目的：在编译时将函数的代码嵌入到调用它们的地方，而不是像普通函数一样在链接时进行函数调用。因此，如果函数定义不在可见范围内，编译器无法将其内联到调用点。</p><p><strong>在头文件中声明内联函数的原型（函数声明），并在同一头文件中定义函数的具体实现。</strong></p><pre class="line-numbers language-c++"><code class="language-c++">#构造函数可以直接赋初值，构造函数特性complex (double r = 0, double i = 0) : re(r),im(i)&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><em><strong>1. 不带指针的构造函数多半不需要写析构函数</strong></em>     <strong>如果class里面带指针，就必须有拷贝构造和拷贝复制</strong></p><p><strong>2. 写在class里面的方法是内联函数（建议编译器内联，最后还是看编译器）</strong></p><p><em><strong>3. 数据一定要放在private里面，构造函数可以放在private里面，详情见后</strong></em></p><p>以下的常成员函数在常量对象调用时起作用，若没加 <code>const</code>常量对象调用时会报错 ,所以该加<code>const</code>的地方一定要加</p><pre class="line-numbers language-c++"><code class="language-c++">double real() const &#123; return re; &#125;  #常成员函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p><em><strong>参数传递尽量用引用，返回也是</strong></em></p></li><li><p><em><strong>同一个class的不同object之间互为友元（firend)</strong></em></p></li><li><p><em><strong>临时对象  typename ()</strong></em></p></li><li><p><strong>如果class里面带指针，就必须有拷贝构造和拷贝复制</strong></p></li></ul><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230920163619993.png" alt="image-20230920163619993" style="zoom:50%;" /><p>​浅拷贝：只拷贝指针</p><p>b &#x3D; a,如果使用编译器默认的函数，是浅拷贝，有可能导致内存泄漏</p><h3 id="3-拷贝构造函数"><a href="#3-拷贝构造函数" class="headerlink" title="3. 拷贝构造函数"></a>3. <strong>拷贝构造函数</strong></h3><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230920163938278.png" alt="image-20230920163938278"></p><pre><code>                                                深拷贝:复制内存</code></pre><p><strong>拷贝赋值函数</strong>：把左边拷贝的右边分三步：1. 先把右边清空，2. 重新分配右边跟左边一样大的内存，3. 拷贝</p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230920164727873.png" alt="image-20230920164727873" style="zoom:50%;" /><p><img src="https://glf-1309623969.cos.ap-shanghai.myqcloud.com/img/image-20230920200351109.png" alt="12"></p><p>变量可以声明多次，但只能定义一次</p><pre class="line-numbers language-c++"><code class="language-c++">extern int a;#声明extern int a = 0;   #定义<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>静态函数属于类，而不属于对象</strong></p><p><strong>模板类在编译时要把.h文件和.cpp文件都要添加</strong></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
